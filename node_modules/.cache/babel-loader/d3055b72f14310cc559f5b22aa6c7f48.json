{"ast":null,"code":"import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\n\nexport var getDayGrid = function (options) {\n  var _a;\n\n  var selectedDate = options.selectedDate,\n      dateRangeType = options.dateRangeType,\n      firstDayOfWeek = options.firstDayOfWeek,\n      today = options.today,\n      minDate = options.minDate,\n      maxDate = options.maxDate,\n      weeksToShow = options.weeksToShow,\n      workWeekDays = options.workWeekDays,\n      daysToSelectInDayView = options.daysToSelectInDayView,\n      restrictedDates = options.restrictedDates,\n      markedDays = options.markedDays;\n  var restrictedDateOptions = {\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates\n  };\n  var todaysDate = today || new Date();\n  var navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n  var date;\n\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n\n  var weeks = []; // Cycle the date backwards to get to the first day of the week.\n\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  } // add the transition week as last week of previous range\n\n\n  date = addDays(date, -DAYS_IN_WEEK); // a flag to indicate whether all days of the week are outside the month\n\n  var isAllDaysOfWeekOutOfMonth = false; // in work week view if the days aren't contiguous we use week view instead\n\n  var selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n  var selectedDates = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  var shouldGetWeeks = true;\n\n  for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    var week = [];\n    isAllDaysOfWeekOutOfMonth = true;\n\n    var _loop_1 = function (dayIndex) {\n      var originalDate = new Date(date.getTime());\n      var dayInfo = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: ((_a = markedDays) === null || _a === void 0 ? void 0 : _a.some(function (markedDay) {\n          return compareDates(originalDate, markedDay);\n        })) || false\n      };\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    };\n\n    for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      _loop_1(dayIndex);\n    } // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n\n\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0; // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n\n    weeks.push(week);\n  }\n\n  return weeks;\n};","map":{"version":3,"sources":["dateGrid/getDayGrid.ts"],"names":[],"mappings":"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","sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}