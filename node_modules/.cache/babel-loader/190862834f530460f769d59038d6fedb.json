{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, KeyCodes } from '../../Utilities';\nimport { ButtonGrid } from '../../utilities/ButtonGrid/ButtonGrid';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nimport { useId, useConst, useSetTimeout, useControllableValue, useWarnings } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SwatchColorPicker';\n\nfunction useDebugWarnings(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      mutuallyExclusive: {\n        focusOnHover: 'onHover',\n        selectedId: 'defaultSelectedId'\n      },\n      deprecations: {\n        isControlled: \"selectedId' or 'defaultSelectedId\",\n        onColorChanged: 'onChange'\n      }\n    });\n  }\n}\n\nexport var SwatchColorPickerBase = React.forwardRef(function (props, ref) {\n  var defaultId = useId('swatchColorPicker');\n  var id = props.id || defaultId;\n  var internalState = useConst({\n    isNavigationIdle: true,\n    cellFocused: false,\n    navigationIdleTimeoutId: undefined,\n    navigationIdleDelay: 250\n  });\n\n  var _a = useSetTimeout(),\n      setTimeout = _a.setTimeout,\n      clearTimeout = _a.clearTimeout;\n\n  useDebugWarnings(props);\n  var colorCells = props.colorCells,\n      _b = props.cellShape,\n      cellShape = _b === void 0 ? 'circle' : _b,\n      columnCount = props.columnCount,\n      _c = props.shouldFocusCircularNavigate,\n      shouldFocusCircularNavigate = _c === void 0 ? true : _c,\n      className = props.className,\n      _d = props.disabled,\n      disabled = _d === void 0 ? false : _d,\n      doNotContainWithinFocusZone = props.doNotContainWithinFocusZone,\n      styles = props.styles,\n      _e = props.cellMargin,\n      cellMargin = _e === void 0 ? 10 : _e,\n      defaultSelectedId = props.defaultSelectedId,\n      focusOnHover = props.focusOnHover,\n      mouseLeaveParentSelector = props.mouseLeaveParentSelector,\n      onChange = props.onChange,\n      // eslint-disable-next-line deprecation/deprecation\n  onColorChanged = props.onColorChanged,\n      onCellHovered = props.onCellHovered,\n      onCellFocused = props.onCellFocused,\n      getColorGridCellStyles = props.getColorGridCellStyles,\n      cellHeight = props.cellHeight,\n      cellWidth = props.cellWidth,\n      cellBorderWidth = props.cellBorderWidth;\n  /**\n   *  Add an index to each color cells. Memoizes this so that color cells do not re-render on every update.\n   */\n\n  var itemsWithIndex = React.useMemo(function () {\n    return colorCells.map(function (item, index) {\n      return __assign(__assign({}, item), {\n        index: index\n      });\n    });\n  }, [colorCells]);\n  var mergedOnChange = React.useCallback(function (ev, newSelectedId) {\n    var _a; // Call both new and old change handlers, and add the extra `color` parameter\n\n\n    var newColor = (_a = colorCells.filter(function (c) {\n      return c.id === newSelectedId;\n    })[0]) === null || _a === void 0 ? void 0 : _a.color;\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newSelectedId, newColor);\n    onColorChanged === null || onColorChanged === void 0 ? void 0 : onColorChanged(newSelectedId, newColor);\n  }, [onChange, onColorChanged, colorCells]);\n\n  var _f = useControllableValue(props.selectedId, defaultSelectedId, mergedOnChange),\n      selectedId = _f[0],\n      setSelectedId = _f[1];\n\n  var classNames = getClassNames(styles, {\n    theme: props.theme,\n    className: className,\n    cellMargin: cellMargin\n  });\n  var gridStyles = {\n    root: classNames.root,\n    tableCell: classNames.tableCell,\n    focusedContainer: classNames.focusedContainer\n  };\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n\n  var onSwatchColorPickerBlur = React.useCallback(function () {\n    if (onCellFocused) {\n      internalState.cellFocused = false;\n      onCellFocused();\n    }\n  }, [internalState, onCellFocused]);\n  /**\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n   */\n\n  var onMouseEnter = React.useCallback(function (ev) {\n    if (!focusOnHover) {\n      return !internalState.isNavigationIdle || !!disabled;\n    }\n\n    if (internalState.isNavigationIdle && !disabled) {\n      ev.currentTarget.focus();\n    }\n\n    return true;\n  }, [focusOnHover, internalState, disabled]);\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n\n  var onMouseMove = React.useCallback(function (ev) {\n    if (!focusOnHover) {\n      return !internalState.isNavigationIdle || !!disabled;\n    }\n\n    var targetElement = ev.currentTarget; // If navigation is idle and the targetElement is the focused element bail out\n\n    if (internalState.isNavigationIdle && !(document && targetElement === document.activeElement)) {\n      targetElement.focus();\n    }\n\n    return true;\n  }, [focusOnHover, internalState, disabled]);\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n\n  var onMouseLeave = React.useCallback(function (ev) {\n    var parentSelector = mouseLeaveParentSelector;\n\n    if (!focusOnHover || !parentSelector || !internalState.isNavigationIdle || disabled) {\n      return;\n    } // Get the elements that math the given selector\n\n\n    var elements = document.querySelectorAll(parentSelector); // iterate over the elements return to make sure it is a parent of the target and focus it\n\n    for (var index = 0; index < elements.length; index += 1) {\n      if (elements[index].contains(ev.currentTarget)) {\n        /**\n         * IE11 focus() method forces parents to scroll to top of element.\n         * Edge and IE expose a setActive() function for focusable divs that\n         * sets the page focus but does not scroll the parent element.\n         */\n        if (elements[index].setActive) {\n          try {\n            elements[index].setActive();\n          } catch (e) {\n            /* no-op */\n          }\n        } else {\n          elements[index].focus();\n        }\n\n        break;\n      }\n    }\n  }, [disabled, focusOnHover, internalState, mouseLeaveParentSelector]);\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\n   */\n\n  var onGridCellHovered = React.useCallback(function (item) {\n    if (onCellHovered) {\n      return item ? onCellHovered(item.id, item.color) : onCellHovered();\n    }\n  }, [onCellHovered]);\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n\n  var onGridCellFocused = React.useCallback(function (item) {\n    if (onCellFocused) {\n      if (item) {\n        internalState.cellFocused = true;\n        return onCellFocused(item.id, item.color);\n      } else {\n        internalState.cellFocused = false;\n        return onCellFocused();\n      }\n    }\n  }, [internalState, onCellFocused]);\n  /**\n   * Handle the click on a cell\n   */\n\n  var onCellClick = React.useCallback(function (item) {\n    if (disabled) {\n      return;\n    }\n\n    if (item.id !== selectedId) {\n      if (onCellFocused && internalState.cellFocused) {\n        internalState.cellFocused = false;\n        onCellFocused();\n      }\n\n      setSelectedId(item.id);\n    }\n  }, [disabled, internalState, onCellFocused, selectedId, setSelectedId]);\n  /**\n   * Sets a timeout so we won't process any mouse \"hover\" events\n   * while navigating (via mouseWheel or arrowKeys)\n   */\n\n  var setNavigationTimeout = React.useCallback(function () {\n    if (!internalState.isNavigationIdle && internalState.navigationIdleTimeoutId !== undefined) {\n      clearTimeout(internalState.navigationIdleTimeoutId);\n      internalState.navigationIdleTimeoutId = undefined;\n    } else {\n      internalState.isNavigationIdle = false;\n    }\n\n    internalState.navigationIdleTimeoutId = setTimeout(function () {\n      internalState.isNavigationIdle = true;\n    }, internalState.navigationIdleDelay);\n  }, [clearTimeout, internalState, setTimeout]);\n  /**\n   * Callback used to handle KeyCode events\n   */\n\n  var onKeyDown = React.useCallback(function (ev) {\n    if ( // eslint-disable-next-line deprecation/deprecation\n    ev.which === KeyCodes.up || // eslint-disable-next-line deprecation/deprecation\n    ev.which === KeyCodes.down || // eslint-disable-next-line deprecation/deprecation\n    ev.which === KeyCodes.left || // eslint-disable-next-line deprecation/deprecation\n    ev.which === KeyCodes.right) {\n      setNavigationTimeout();\n    }\n  }, [setNavigationTimeout]);\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns - Element representing the item\n   */\n\n  var renderOption = function (item) {\n    return React.createElement(ColorPickerGridCell, {\n      item: item,\n      idPrefix: id,\n      color: item.color,\n      styles: getColorGridCellStyles,\n      disabled: disabled,\n      onClick: onCellClick,\n      onHover: onGridCellHovered,\n      onFocus: onGridCellFocused,\n      selected: selectedId === item.id,\n      circle: cellShape === 'circle',\n      label: item.label,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onWheel: setNavigationTimeout,\n      onKeyDown: onKeyDown,\n      height: cellHeight,\n      width: cellWidth,\n      borderWidth: cellBorderWidth\n    });\n  };\n\n  if (colorCells.length < 1 || columnCount < 1) {\n    return null;\n  }\n\n  var onRenderItem = function (item, index) {\n    var _a = props.onRenderColorCell,\n        onRenderColorCell = _a === void 0 ? renderOption : _a;\n    return onRenderColorCell(item, renderOption);\n  };\n\n  return React.createElement(ButtonGrid, __assign({}, props, {\n    ref: ref,\n    id: id,\n    items: itemsWithIndex,\n    columnCount: columnCount,\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderItem: onRenderItem,\n    shouldFocusCircularNavigate: shouldFocusCircularNavigate,\n    doNotContainWithinFocusZone: doNotContainWithinFocusZone,\n    onBlur: onSwatchColorPickerBlur,\n    theme: props.theme,\n    styles: gridStyles\n  }));\n});\nSwatchColorPickerBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,kBAAT,EAA6B,QAA7B,QAA6C,iBAA7C;AAMA,SAAS,UAAT,QAA2B,uCAA3B;AAEA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,KAAT,EAAgB,QAAhB,EAA0B,aAA1B,EAAyC,oBAAzC,EAA+D,WAA/D,QAAkF,uBAAlF;AAUA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;AAEA,IAAM,cAAc,GAAG,mBAAvB;;AAEA,SAAS,gBAAT,CAA0B,KAA1B,EAAwD;AACtD,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACA,IAAA,WAAW,CAAC;AACV,MAAA,IAAI,EAAE,cADI;AAEV,MAAA,KAAK,EAAA,KAFK;AAGV,MAAA,iBAAiB,EAAE;AAAE,QAAA,YAAY,EAAE,SAAhB;AAA2B,QAAA,UAAU,EAAE;AAAvC,OAHT;AAIV,MAAA,YAAY,EAAE;AAAE,QAAA,YAAY,EAAE,mCAAhB;AAAqD,QAAA,cAAc,EAAE;AAArE;AAJJ,KAAD,CAAX;AAMD;AACF;;AAED,OAAO,IAAM,qBAAqB,GAAqD,KAAK,CAAC,UAAN,CAGrF,UAAC,KAAD,EAAQ,GAAR,EAAW;AACX,MAAM,SAAS,GAAG,KAAK,CAAC,mBAAD,CAAvB;AACA,MAAM,EAAE,GAAG,KAAK,CAAC,EAAN,IAAY,SAAvB;AAEA,MAAM,aAAa,GAAG,QAAQ,CAAkC;AAC9D,IAAA,gBAAgB,EAAE,IAD4C;AAE9D,IAAA,WAAW,EAAE,KAFiD;AAG9D,IAAA,uBAAuB,EAAE,SAHqC;AAI9D,IAAA,mBAAmB,EAAE;AAJyC,GAAlC,CAA9B;;AAOM,MAAA,EAAA,GAA+B,aAAa,EAA5C;AAAA,MAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;AAAA,MAAc,YAAY,GAAA,EAAA,CAAA,YAA1B;;AAEN,EAAA,gBAAgB,CAAC,KAAD,CAAhB;AAGE,MAAA,UAAU,GAqBR,KAAK,CArBG,UAAV;AAAA,MACA,EAAA,GAoBE,KAAK,CApBa,SADpB;AAAA,MACA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,EADpB;AAAA,MAEA,WAAW,GAmBT,KAAK,CAnBI,WAFX;AAAA,MAGA,EAAA,GAkBE,KAAK,CAlB2B,2BAHlC;AAAA,MAGA,2BAA2B,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAHlC;AAAA,MAIA,SAAS,GAiBP,KAAK,CAjBE,SAJT;AAAA,MAKA,EAAA,GAgBE,KAAK,CAhBS,QALhB;AAAA,MAKA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EALhB;AAAA,MAMA,2BAA2B,GAezB,KAAK,CAfoB,2BAN3B;AAAA,MAOA,MAAM,GAcJ,KAAK,CAdD,MAPN;AAAA,MAQA,EAAA,GAaE,KAAK,CAbQ,UARf;AAAA,MAQA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EARf;AAAA,MASA,iBAAiB,GAYf,KAAK,CAZU,iBATjB;AAAA,MAUA,YAAY,GAWV,KAAK,CAXK,YAVZ;AAAA,MAWA,wBAAwB,GAUtB,KAAK,CAViB,wBAXxB;AAAA,MAYA,QAAQ,GASN,KAAK,CATC,QAZR;AAAA,MAaA;AACA,EAAA,cAAc,GAOZ,KAAK,CAPO,cAdd;AAAA,MAeA,aAAa,GAMX,KAAK,CANM,aAfb;AAAA,MAgBA,aAAa,GAKX,KAAK,CALM,aAhBb;AAAA,MAiBA,sBAAsB,GAIpB,KAAK,CAJe,sBAjBtB;AAAA,MAkBA,UAAU,GAGR,KAAK,CAHG,UAlBV;AAAA,MAmBA,SAAS,GAEP,KAAK,CAFE,SAnBT;AAAA,MAoBA,eAAe,GACb,KAAK,CADQ,eApBf;AAuBF;;AAEG;;AACH,MAAM,cAAc,GAAG,KAAK,CAAC,OAAN,CAAc,YAAA;AACnC,WAAO,UAAU,CAAC,GAAX,CAAe,UAAC,IAAD,EAAO,KAAP,EAAY;AAChC,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,CAAA;AACD,KAFM,CAAP;AAGD,GAJsB,EAIpB,CAAC,UAAD,CAJoB,CAAvB;AAMA,MAAM,cAAc,GAAG,KAAK,CAAC,WAAN,CACrB,UAAC,EAAD,EAAmC,aAAnC,EAAoE;WAAA,CAClE;;;AACA,QAAM,QAAQ,GAAA,CAAA,EAAA,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAA,CAAA,EAAC;AAAI,aAAA,CAAC,CAAC,EAAF,KAAA,aAAA;AAAsB,KAA7C,EAA+C,CAA/C,CAAH,MAAoD,IAApD,IAAoD,EAAA,KAAA,KAAA,CAApD,GAAoD,KAAA,CAApD,GAAoD,EAAA,CAAE,KAApE;AACA,IAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAG,EAAH,EAAO,aAAP,EAAsB,QAAtB,CAAR;AACA,IAAA,cAAc,KAAA,IAAd,IAAA,cAAc,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAA,cAAc,CAAG,aAAH,EAAkB,QAAlB,CAAd;AACD,GANoB,EAOrB,CAAC,QAAD,EAAW,cAAX,EAA2B,UAA3B,CAPqB,CAAvB;;AAUM,MAAA,EAAA,GAA8B,oBAAoB,CAAC,KAAK,CAAC,UAAP,EAAmB,iBAAnB,EAAsC,cAAtC,CAAlD;AAAA,MAAC,UAAU,GAAA,EAAA,CAAA,CAAA,CAAX;AAAA,MAAa,aAAa,GAAA,EAAA,CAAA,CAAA,CAA1B;;AAEN,MAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAU;AACxC,IAAA,KAAK,EAAE,KAAK,CAAC,KAD2B;AAExC,IAAA,SAAS,EAAA,SAF+B;AAGxC,IAAA,UAAU,EAAA;AAH8B,GAAV,CAAhC;AAMA,MAAM,UAAU,GAAG;AACjB,IAAA,IAAI,EAAE,UAAU,CAAC,IADA;AAEjB,IAAA,SAAS,EAAE,UAAU,CAAC,SAFL;AAGjB,IAAA,gBAAgB,EAAE,UAAU,CAAC;AAHZ,GAAnB;AAMA;;;AAGG;;AACH,MAAM,uBAAuB,GAAG,KAAK,CAAC,WAAN,CAAkB,YAAA;AAChD,QAAI,aAAJ,EAAmB;AACjB,MAAA,aAAa,CAAC,WAAd,GAA4B,KAA5B;AACA,MAAA,aAAa;AACd;AACF,GAL+B,EAK7B,CAAC,aAAD,EAAgB,aAAhB,CAL6B,CAAhC;AAOA;;AAEG;;AACH,MAAM,YAAY,GAAG,KAAK,CAAC,WAAN,CACnB,UAAC,EAAD,EAAwC;AACtC,QAAI,CAAC,YAAL,EAAmB;AACjB,aAAO,CAAC,aAAa,CAAC,gBAAf,IAAmC,CAAC,CAAC,QAA5C;AACD;;AACD,QAAI,aAAa,CAAC,gBAAd,IAAkC,CAAC,QAAvC,EAAiD;AAC/C,MAAA,EAAE,CAAC,aAAH,CAAiB,KAAjB;AACD;;AACD,WAAO,IAAP;AACD,GATkB,EAUnB,CAAC,YAAD,EAAe,aAAf,EAA8B,QAA9B,CAVmB,CAArB;AAaA;;AAEG;;AACH,MAAM,WAAW,GAAG,KAAK,CAAC,WAAN,CAClB,UAAC,EAAD,EAAwC;AACtC,QAAI,CAAC,YAAL,EAAmB;AACjB,aAAO,CAAC,aAAa,CAAC,gBAAf,IAAmC,CAAC,CAAC,QAA5C;AACD;;AAED,QAAM,aAAa,GAAG,EAAE,CAAC,aAAzB,CALsC,CAOtC;;AACA,QAAI,aAAa,CAAC,gBAAd,IAAkC,EAAE,QAAQ,IAAI,aAAa,KAAM,QAAQ,CAAC,aAA1C,CAAtC,EAAgH;AAC9G,MAAA,aAAa,CAAC,KAAd;AACD;;AAED,WAAO,IAAP;AACD,GAdiB,EAelB,CAAC,YAAD,EAAe,aAAf,EAA8B,QAA9B,CAfkB,CAApB;AAkBA;;AAEG;;AACH,MAAM,YAAY,GAAG,KAAK,CAAC,WAAN,CACnB,UAAC,EAAD,EAAwC;AACtC,QAAM,cAAc,GAAG,wBAAvB;;AAEA,QAAI,CAAC,YAAD,IAAiB,CAAC,cAAlB,IAAoC,CAAC,aAAa,CAAC,gBAAnD,IAAuE,QAA3E,EAAqF;AACnF;AACD,KALqC,CAOtC;;;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAT,CAA0B,cAA1B,CAAjB,CARsC,CAUtC;;AACA,SAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,QAAQ,CAAC,MAArC,EAA6C,KAAK,IAAI,CAAtD,EAAyD;AACvD,UAAI,QAAQ,CAAC,KAAD,CAAR,CAAgB,QAAhB,CAAyB,EAAE,CAAC,aAA5B,CAAJ,EAAgD;AAC9C;;;;AAIG;AACH,YAAK,QAAQ,CAAC,KAAD,CAAR,CAAwB,SAA7B,EAAwC;AACtC,cAAI;AACD,YAAA,QAAQ,CAAC,KAAD,CAAR,CAAwB,SAAxB;AACF,WAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACD;AACF,SAND,MAMO;AACJ,UAAA,QAAQ,CAAC,KAAD,CAAR,CAAgC,KAAhC;AACF;;AAED;AACD;AACF;AACF,GAhCkB,EAiCnB,CAAC,QAAD,EAAW,YAAX,EAAyB,aAAzB,EAAwC,wBAAxC,CAjCmB,CAArB;AAoCA;;;AAGG;;AACH,MAAM,iBAAiB,GAAG,KAAK,CAAC,WAAN,CACxB,UAAC,IAAD,EAAuB;AACrB,QAAI,aAAJ,EAAmB;AACjB,aAAO,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,EAAN,EAAU,IAAI,CAAC,KAAf,CAAhB,GAAwC,aAAa,EAAhE;AACD;AACF,GALuB,EAMxB,CAAC,aAAD,CANwB,CAA1B;AASA;;AAEG;;AACH,MAAM,iBAAiB,GAAG,KAAK,CAAC,WAAN,CACxB,UAAC,IAAD,EAAuB;AACrB,QAAI,aAAJ,EAAmB;AACjB,UAAI,IAAJ,EAAU;AACR,QAAA,aAAa,CAAC,WAAd,GAA4B,IAA5B;AACA,eAAO,aAAa,CAAC,IAAI,CAAC,EAAN,EAAU,IAAI,CAAC,KAAf,CAApB;AACD,OAHD,MAGO;AACL,QAAA,aAAa,CAAC,WAAd,GAA4B,KAA5B;AACA,eAAO,aAAa,EAApB;AACD;AACF;AACF,GAXuB,EAYxB,CAAC,aAAD,EAAgB,aAAhB,CAZwB,CAA1B;AAeA;;AAEG;;AACH,MAAM,WAAW,GAAG,KAAK,CAAC,WAAN,CAClB,UAAC,IAAD,EAAsB;AACpB,QAAI,QAAJ,EAAc;AACZ;AACD;;AAED,QAAI,IAAI,CAAC,EAAL,KAAY,UAAhB,EAA4B;AAC1B,UAAI,aAAa,IAAI,aAAa,CAAC,WAAnC,EAAgD;AAC9C,QAAA,aAAa,CAAC,WAAd,GAA4B,KAA5B;AACA,QAAA,aAAa;AACd;;AACD,MAAA,aAAa,CAAC,IAAI,CAAC,EAAN,CAAb;AACD;AACF,GAbiB,EAclB,CAAC,QAAD,EAAW,aAAX,EAA0B,aAA1B,EAAyC,UAAzC,EAAqD,aAArD,CAdkB,CAApB;AAiBA;;;AAGG;;AACH,MAAM,oBAAoB,GAAG,KAAK,CAAC,WAAN,CAAkB,YAAA;AAC7C,QAAI,CAAC,aAAa,CAAC,gBAAf,IAAmC,aAAa,CAAC,uBAAd,KAA0C,SAAjF,EAA4F;AAC1F,MAAA,YAAY,CAAC,aAAa,CAAC,uBAAf,CAAZ;AACA,MAAA,aAAa,CAAC,uBAAd,GAAwC,SAAxC;AACD,KAHD,MAGO;AACL,MAAA,aAAa,CAAC,gBAAd,GAAiC,KAAjC;AACD;;AAED,IAAA,aAAa,CAAC,uBAAd,GAAwC,UAAU,CAAC,YAAA;AACjD,MAAA,aAAa,CAAC,gBAAd,GAAiC,IAAjC;AACD,KAFiD,EAE/C,aAAa,CAAC,mBAFiC,CAAlD;AAGD,GAX4B,EAW1B,CAAC,YAAD,EAAe,aAAf,EAA8B,UAA9B,CAX0B,CAA7B;AAaA;;AAEG;;AACH,MAAM,SAAS,GAAG,KAAK,CAAC,WAAN,CAChB,UAAC,EAAD,EAA2C;AACzC,SACE;AACA,IAAA,EAAE,CAAC,KAAH,KAAa,QAAQ,CAAC,EAAtB,IACA;AACA,IAAA,EAAE,CAAC,KAAH,KAAa,QAAQ,CAAC,IAFtB,IAGA;AACA,IAAA,EAAE,CAAC,KAAH,KAAa,QAAQ,CAAC,IAJtB,IAKA;AACA,IAAA,EAAE,CAAC,KAAH,KAAa,QAAQ,CAAC,KARxB,EASE;AACA,MAAA,oBAAoB;AACrB;AACF,GAde,EAehB,CAAC,oBAAD,CAfgB,CAAlB;AAkBA;;;;AAIG;;AACH,MAAM,YAAY,GAAG,UAAC,IAAD,EAAsB;AACzC,WACE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAClB,MAAA,IAAI,EAAE,IADY;AAElB,MAAA,QAAQ,EAAE,EAFQ;AAGlB,MAAA,KAAK,EAAE,IAAI,CAAC,KAHM;AAIlB,MAAA,MAAM,EAAE,sBAJU;AAKlB,MAAA,QAAQ,EAAE,QALQ;AAMlB,MAAA,OAAO,EAAE,WANS;AAOlB,MAAA,OAAO,EAAE,iBAPS;AAQlB,MAAA,OAAO,EAAE,iBARS;AASlB,MAAA,QAAQ,EAAE,UAAU,KAAK,IAAI,CAAC,EATZ;AAUlB,MAAA,MAAM,EAAE,SAAS,KAAK,QAVJ;AAWlB,MAAA,KAAK,EAAE,IAAI,CAAC,KAXM;AAYlB,MAAA,YAAY,EAAE,YAZI;AAalB,MAAA,WAAW,EAAE,WAbK;AAclB,MAAA,YAAY,EAAE,YAdI;AAelB,MAAA,OAAO,EAAE,oBAfS;AAgBlB,MAAA,SAAS,EAAE,SAhBO;AAiBlB,MAAA,MAAM,EAAE,UAjBU;AAkBlB,MAAA,KAAK,EAAE,SAlBW;AAmBlB,MAAA,WAAW,EAAE;AAnBK,KAApB,CADF;AAuBD,GAxBD;;AA0BA,MAAI,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,WAAW,GAAG,CAA3C,EAA8C;AAC5C,WAAO,IAAP;AACD;;AACD,MAAM,YAAY,GAAG,UAAC,IAAD,EAAwB,KAAxB,EAAqC;AAChD,QAAA,EAAA,GAAqC,KAAK,CAAV,iBAAhC;AAAA,QAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,YAAH,GAAe,EAAhC;AACR,WAAO,iBAAiB,CAAC,IAAD,EAAO,YAAP,CAAxB;AACD,GAHD;;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,QAAA,CAAA,EAAA,EACH,KADG,EACmC;AAC5C,IAAA,GAAG,EAAE,GADuC;AAE5C,IAAA,EAAE,EAAE,EAFwC;AAG5C,IAAA,KAAK,EAAE,cAHqC;AAI5C,IAAA,WAAW,EAAE,WAJ+B;AAK5C;AACA,IAAA,YAAY,EAAE,YAN8B;AAO5C,IAAA,2BAA2B,EAAE,2BAPe;AAQ5C,IAAA,2BAA2B,EAAE,2BARe;AAS5C,IAAA,MAAM,EAAE,uBAToC;AAU5C,IAAA,KAAK,EAAE,KAAK,CAAC,KAV+B;AAW5C,IAAA,MAAM,EAAE;AAXoC,GADnC,CAAX,CADF;AAgBD,CAjTsF,CAAhF;AAmTP,qBAAqB,CAAC,WAAtB,GAAoC,cAApC","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, KeyCodes } from '../../Utilities';\nimport {\n  ISwatchColorPickerProps,\n  ISwatchColorPickerStyleProps,\n  ISwatchColorPickerStyles,\n} from './SwatchColorPicker.types';\nimport { ButtonGrid } from '../../utilities/ButtonGrid/ButtonGrid';\nimport { IColorCellProps } from './ColorPickerGridCell.types';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nimport { useId, useConst, useSetTimeout, useControllableValue, useWarnings } from '@fluentui/react-hooks';\nimport { IButtonGridProps } from '../../utilities/ButtonGrid/ButtonGrid.types';\n\ninterface ISwatchColorPickerInternalState {\n  isNavigationIdle: boolean;\n  cellFocused: boolean;\n  navigationIdleTimeoutId: number | undefined;\n  navigationIdleDelay: number;\n}\n\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\n\nconst COMPONENT_NAME = 'SwatchColorPicker';\n\nfunction useDebugWarnings(props: ISwatchColorPickerProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: { focusOnHover: 'onHover', selectedId: 'defaultSelectedId' },\n      deprecations: { isControlled: \"selectedId' or 'defaultSelectedId\", onColorChanged: 'onChange' },\n    });\n  }\n}\n\nexport const SwatchColorPickerBase: React.FunctionComponent<ISwatchColorPickerProps> = React.forwardRef<\n  HTMLElement,\n  ISwatchColorPickerProps\n>((props, ref) => {\n  const defaultId = useId('swatchColorPicker');\n  const id = props.id || defaultId;\n\n  const internalState = useConst<ISwatchColorPickerInternalState>({\n    isNavigationIdle: true,\n    cellFocused: false,\n    navigationIdleTimeoutId: undefined,\n    navigationIdleDelay: 250,\n  });\n\n  const { setTimeout, clearTimeout } = useSetTimeout();\n\n  useDebugWarnings(props);\n\n  const {\n    colorCells,\n    cellShape = 'circle',\n    columnCount,\n    shouldFocusCircularNavigate = true,\n    className,\n    disabled = false,\n    doNotContainWithinFocusZone,\n    styles,\n    cellMargin = 10,\n    defaultSelectedId,\n    focusOnHover,\n    mouseLeaveParentSelector,\n    onChange,\n    // eslint-disable-next-line deprecation/deprecation\n    onColorChanged,\n    onCellHovered,\n    onCellFocused,\n    getColorGridCellStyles,\n    cellHeight,\n    cellWidth,\n    cellBorderWidth,\n  } = props;\n\n  /**\n   *  Add an index to each color cells. Memoizes this so that color cells do not re-render on every update.\n   */\n  const itemsWithIndex = React.useMemo(() => {\n    return colorCells.map((item, index) => {\n      return { ...item, index: index };\n    });\n  }, [colorCells]);\n\n  const mergedOnChange = React.useCallback(\n    (ev: React.FormEvent<HTMLElement>, newSelectedId: string | undefined) => {\n      // Call both new and old change handlers, and add the extra `color` parameter\n      const newColor = colorCells.filter(c => c.id === newSelectedId)[0]?.color;\n      onChange?.(ev, newSelectedId, newColor);\n      onColorChanged?.(newSelectedId, newColor);\n    },\n    [onChange, onColorChanged, colorCells],\n  );\n\n  const [selectedId, setSelectedId] = useControllableValue(props.selectedId, defaultSelectedId, mergedOnChange);\n\n  const classNames = getClassNames(styles!, {\n    theme: props.theme!,\n    className,\n    cellMargin,\n  });\n\n  const gridStyles = {\n    root: classNames.root,\n    tableCell: classNames.tableCell,\n    focusedContainer: classNames.focusedContainer,\n  };\n\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n  const onSwatchColorPickerBlur = React.useCallback((): void => {\n    if (onCellFocused) {\n      internalState.cellFocused = false;\n      onCellFocused();\n    }\n  }, [internalState, onCellFocused]);\n\n  /**\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n   */\n  const onMouseEnter = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n      if (!focusOnHover) {\n        return !internalState.isNavigationIdle || !!disabled;\n      }\n      if (internalState.isNavigationIdle && !disabled) {\n        ev.currentTarget.focus();\n      }\n      return true;\n    },\n    [focusOnHover, internalState, disabled],\n  );\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  const onMouseMove = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n      if (!focusOnHover) {\n        return !internalState.isNavigationIdle || !!disabled;\n      }\n\n      const targetElement = ev.currentTarget as HTMLElement;\n\n      // If navigation is idle and the targetElement is the focused element bail out\n      if (internalState.isNavigationIdle && !(document && targetElement === (document.activeElement as HTMLElement))) {\n        targetElement.focus();\n      }\n\n      return true;\n    },\n    [focusOnHover, internalState, disabled],\n  );\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  const onMouseLeave = React.useCallback(\n    (ev: React.MouseEvent<HTMLButtonElement>): void => {\n      const parentSelector = mouseLeaveParentSelector;\n\n      if (!focusOnHover || !parentSelector || !internalState.isNavigationIdle || disabled) {\n        return;\n      }\n\n      // Get the elements that math the given selector\n      const elements = document.querySelectorAll(parentSelector);\n\n      // iterate over the elements return to make sure it is a parent of the target and focus it\n      for (let index = 0; index < elements.length; index += 1) {\n        if (elements[index].contains(ev.currentTarget)) {\n          /**\n           * IE11 focus() method forces parents to scroll to top of element.\n           * Edge and IE expose a setActive() function for focusable divs that\n           * sets the page focus but does not scroll the parent element.\n           */\n          if ((elements[index] as any).setActive) {\n            try {\n              (elements[index] as any).setActive();\n            } catch (e) {\n              /* no-op */\n            }\n          } else {\n            (elements[index] as HTMLElement).focus();\n          }\n\n          break;\n        }\n      }\n    },\n    [disabled, focusOnHover, internalState, mouseLeaveParentSelector],\n  );\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\n   */\n  const onGridCellHovered = React.useCallback(\n    (item?: IColorCellProps): void => {\n      if (onCellHovered) {\n        return item ? onCellHovered(item.id, item.color) : onCellHovered();\n      }\n    },\n    [onCellHovered],\n  );\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n  const onGridCellFocused = React.useCallback(\n    (item?: IColorCellProps): void => {\n      if (onCellFocused) {\n        if (item) {\n          internalState.cellFocused = true;\n          return onCellFocused(item.id, item.color);\n        } else {\n          internalState.cellFocused = false;\n          return onCellFocused();\n        }\n      }\n    },\n    [internalState, onCellFocused],\n  );\n\n  /**\n   * Handle the click on a cell\n   */\n  const onCellClick = React.useCallback(\n    (item: IColorCellProps): void => {\n      if (disabled) {\n        return;\n      }\n\n      if (item.id !== selectedId) {\n        if (onCellFocused && internalState.cellFocused) {\n          internalState.cellFocused = false;\n          onCellFocused();\n        }\n        setSelectedId(item.id);\n      }\n    },\n    [disabled, internalState, onCellFocused, selectedId, setSelectedId],\n  );\n\n  /**\n   * Sets a timeout so we won't process any mouse \"hover\" events\n   * while navigating (via mouseWheel or arrowKeys)\n   */\n  const setNavigationTimeout = React.useCallback(() => {\n    if (!internalState.isNavigationIdle && internalState.navigationIdleTimeoutId !== undefined) {\n      clearTimeout(internalState.navigationIdleTimeoutId);\n      internalState.navigationIdleTimeoutId = undefined;\n    } else {\n      internalState.isNavigationIdle = false;\n    }\n\n    internalState.navigationIdleTimeoutId = setTimeout(() => {\n      internalState.isNavigationIdle = true;\n    }, internalState.navigationIdleDelay);\n  }, [clearTimeout, internalState, setTimeout]);\n\n  /**\n   * Callback used to handle KeyCode events\n   */\n  const onKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLButtonElement>): void => {\n      if (\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.up ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.down ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.left ||\n        // eslint-disable-next-line deprecation/deprecation\n        ev.which === KeyCodes.right\n      ) {\n        setNavigationTimeout();\n      }\n    },\n    [setNavigationTimeout],\n  );\n\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns - Element representing the item\n   */\n  const renderOption = (item: IColorCellProps): JSX.Element => {\n    return (\n      <ColorPickerGridCell\n        item={item}\n        idPrefix={id}\n        color={item.color}\n        styles={getColorGridCellStyles}\n        disabled={disabled}\n        onClick={onCellClick}\n        onHover={onGridCellHovered}\n        onFocus={onGridCellFocused}\n        selected={selectedId === item.id}\n        circle={cellShape === 'circle'}\n        label={item.label}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={setNavigationTimeout}\n        onKeyDown={onKeyDown}\n        height={cellHeight}\n        width={cellWidth}\n        borderWidth={cellBorderWidth}\n      />\n    );\n  };\n\n  if (colorCells.length < 1 || columnCount < 1) {\n    return null;\n  }\n  const onRenderItem = (item: IColorCellProps, index: number): JSX.Element => {\n    const { onRenderColorCell = renderOption } = props;\n    return onRenderColorCell(item, renderOption) as JSX.Element;\n  };\n  return (\n    <ButtonGrid\n      {...((props as unknown) as IButtonGridProps)}\n      ref={ref}\n      id={id}\n      items={itemsWithIndex}\n      columnCount={columnCount}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderItem}\n      shouldFocusCircularNavigate={shouldFocusCircularNavigate}\n      doNotContainWithinFocusZone={doNotContainWithinFocusZone}\n      onBlur={onSwatchColorPickerBlur}\n      theme={props.theme!}\n      styles={gridStyles}\n    />\n  );\n});\n\nSwatchColorPickerBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}