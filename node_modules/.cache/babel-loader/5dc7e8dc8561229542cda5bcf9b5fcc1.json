{"ast":null,"code":"/**\n * {@docCategory Pivot}\n * @deprecated Use strings 'links' or 'tabs' instead of this enum\n */\nexport var PivotLinkFormat;\n\n(function (PivotLinkFormat) {\n  /**\n   * Display Pivot Links as links\n   */\n  PivotLinkFormat[\"links\"] = \"links\";\n  /**\n   * Display Pivot Links as Tabs\n   */\n\n  PivotLinkFormat[\"tabs\"] = \"tabs\";\n})(PivotLinkFormat || (PivotLinkFormat = {}));\n/**\n * {@docCategory Pivot}\n * @deprecated Use strings 'normal' or 'large' instead of this enum\n */\n\n\nexport var PivotLinkSize;\n\n(function (PivotLinkSize) {\n  /**\n   * Display Link using normal font size\n   */\n  PivotLinkSize[\"normal\"] = \"normal\";\n  /**\n   * Display links using large font size\n   */\n\n  PivotLinkSize[\"large\"] = \"large\";\n})(PivotLinkSize || (PivotLinkSize = {}));","map":{"version":3,"sources":["components/Pivot/Pivot.types.ts"],"names":[],"mappings":"AAoIA;;;AAGG;AACH,OAAA,IAAkB,eAAlB;;AAAA,CAAA,UAAkB,eAAlB,EAAiC;AAC/B;;AAEG;AACH,EAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AAEA;;AAEG;;AACH,EAAA,eAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CAVD,EAAkB,eAAe,KAAf,eAAe,GAAA,EAAA,CAAjC;AAYA;;;AAGG;;;AACH,OAAA,IAAkB,aAAlB;;AAAA,CAAA,UAAkB,aAAlB,EAA+B;AAC7B;;AAEG;AACH,EAAA,aAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AAEA;;AAEG;;AACH,EAAA,aAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAVD,EAAkB,aAAa,KAAb,aAAa,GAAA,EAAA,CAA/B","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '@fluentui/style-utilities';\nimport { IStyleFunctionOrObject } from '@fluentui/utilities';\nimport { PivotItem } from './PivotItem';\n\n/**\n * {@docCategory Pivot}\n */\nexport interface IPivot {\n  /**\n   * Sets focus to the first pivot tab.\n   */\n  focus(): void;\n}\n\n/**\n * {@docCategory Pivot}\n */\nexport interface IPivotProps extends React.HTMLAttributes<HTMLDivElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IPivot interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: React.RefObject<IPivot>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Pivot\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Default selected key for the pivot. Only provide this if the pivot is an uncontrolled component;\n   * otherwise, use the `selectedKey` property.\n   */\n  defaultSelectedKey?: string;\n\n  /**\n   * Key of the selected pivot item. Updating this will override the Pivot's selected item state.\n   * Only provide this if the pivot is a controlled component where you are maintaining the\n   * current state; otherwise, use `defaultSelectedKey`.\n   */\n  selectedKey?: string | null;\n\n  /**\n   * Callback for when the selected pivot item is changed.\n   */\n  onLinkClick?: (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Link size (normal, large)\n   */\n  linkSize?: PivotLinkSizeType;\n\n  /**\n   * Link format (links, tabs)\n   */\n  linkFormat?: PivotLinkFormatType;\n\n  /**\n   * Overflow behavior when there is not enough room to display all of the links/tabs\n   * * none: Pivot links will overflow the container and may not be visible\n   * * menu: Display an overflow menu that contains the tabs that don't fit\n   *\n   * @default none\n   */\n  overflowBehavior?: 'none' | 'menu';\n\n  /**\n   * Whether to skip rendering the tabpanel with the content of the selected tab.\n   * Use this prop if you plan to separately render the tab content\n   * and don't want to leave an empty tabpanel in the page that may confuse Screen Readers.\n   */\n  headersOnly?: boolean;\n\n  /**\n   * Callback to customize how IDs are generated for each tab header.\n   * Useful if you're rendering content outside and need to connect aria-labelledby.\n   */\n  getTabId?: (itemKey: string, index: number) => string;\n}\n\n/**\n * {@docCategory Pivot}\n */\nexport type IPivotStyleProps = Required<Pick<IPivotProps, 'theme'>> &\n  Pick<IPivotProps, 'className'> & {\n    linkSize?: PivotLinkSizeType;\n    linkFormat?: PivotLinkFormatType;\n  };\n\n/**\n * {@docCategory Pivot}\n */\nexport interface IPivotStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n  link: IStyle;\n  linkIsSelected: IStyle;\n  linkContent: IStyle;\n  text: IStyle;\n  count: IStyle;\n  icon: IStyle;\n  linkInMenu: IStyle;\n  overflowMenuButton: IStyle;\n  itemContainer?: IStyle;\n}\n\n/**\n * {@docCategory Pivot}\n * Display mode for the pivot links/tabs\n */\nexport type PivotLinkFormatType = 'links' | 'tabs';\n\n/**\n * {@docCategory Pivot}\n * Size of the pivot links/tabs\n */\nexport type PivotLinkSizeType = 'normal' | 'large';\n\n/**\n * {@docCategory Pivot}\n * @deprecated Use strings 'links' or 'tabs' instead of this enum\n */\nexport const enum PivotLinkFormat {\n  /**\n   * Display Pivot Links as links\n   */\n  links = 'links',\n\n  /**\n   * Display Pivot Links as Tabs\n   */\n  tabs = 'tabs',\n}\n\n/**\n * {@docCategory Pivot}\n * @deprecated Use strings 'normal' or 'large' instead of this enum\n */\nexport const enum PivotLinkSize {\n  /**\n   * Display Link using normal font size\n   */\n  normal = 'normal',\n\n  /**\n   * Display links using large font size\n   */\n  large = 'large',\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}