{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PaulSeremu\\\\Downloads\\\\react_flowcomponent\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Component } from \"react\";\nimport FlowContent from \"./flowcontent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.continueFlow = (data, token, id) => {\n      //var data1 = JSON.parse(\"{ \\\"\" + outputKey + \"\\\" : \\\"\" + val + \"\\\" }\");\n      console.log(\"continueFlow  running\");\n      console.log(data);\n\n      if (data !== \"\") {\n        data = JSON.parse(data);\n      }\n\n      fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/' + id + '/continue?debug=true', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(r => r.json()).then(res => {\n        console.log(res);\n        this.setState({\n          loading: false,\n          token: token,\n          data: res\n        });\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    };\n\n    this.continueFlow_old = (outputKey, val, token, id, data) => {\n      var data1 = JSON.parse(\"{ \\\"\" + outputKey + \"\\\" : \\\"\" + val + \"\\\" }\");\n      console.log(data1);\n      fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/' + id + '/continue?debug=true', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data1)\n      }).then(r => r.json()).then(res => {\n        console.log(res);\n        this.setState({\n          loading: false,\n          token: token,\n          data: res\n        });\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    };\n\n    this.state = {\n      loading: true,\n      login: false,\n      token: '-',\n      data: {}\n    };\n  }\n\n  updateData(text) {\n    this.setState({\n      data: text\n    });\n  }\n  /* login to access flows */\n\n\n  login() {\n    const loginData = {\n      loginName: 'Eline.de.Groot@woonplezier.nu',\n      password: 'Woonplezier123'\n    };\n    console.log(\"login running\");\n    fetch('https://teambp-test.azurewebsites.net/api/iris/auth', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    }).then(r => r.json()).then(res => {\n      /* Initiate the flow */\n      this.initFlow({\n        token: res.token\n      });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  componentDidMount() {\n    return this.login();\n  }\n\n  initFlow(props) {\n    fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/BeeindigenHuurContract/init', {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + props.token\n      },\n      body: JSON.stringify()\n    }).then(r => r.json()).then(res => {\n      this.setState({\n        loading: false,\n        token: props.token,\n        data: res\n      }); //this.continueFlow({token:props.token});        \n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    //const s = this.state.loading? \"loading\": \"loaded\"\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FlowContent, {\n        data: this.state.data,\n        token: this.state.token,\n        continueFlow: this.continueFlow\n      }, this.state.token, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, \"main\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/PaulSeremu/Downloads/react_flowcomponent/src/App.js"],"names":["React","Component","FlowContent","App","constructor","continueFlow","data","token","id","console","log","JSON","parse","fetch","method","headers","body","stringify","then","r","json","res","setState","loading","catch","error","continueFlow_old","outputKey","val","data1","state","login","updateData","text","loginData","loginName","password","initFlow","componentDidMount","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Component } from \"react\";\nimport FlowContent from \"./flowcontent\";\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      loading: true,\n      login: false,\n      token: '-',\n      data:{}\n    }\n  }\n\n  updateData(text) {\n    this.setState({ data: text })\n  }\n \n  /* login to access flows */\n  login() {\n    const loginData =    {\n        loginName: 'Eline.de.Groot@woonplezier.nu',\n        password: 'Woonplezier123'\n      };\n      console.log(\"login running\");    \n    fetch('https://teambp-test.azurewebsites.net/api/iris/auth', {\n        method: 'POST',\n        headers: {'Content-type':'application/json'},\n        body:JSON.stringify(loginData) \n      })\n      .then(r=>r.json()).then (res=>{\n        /* Initiate the flow */\n         this.initFlow({token: res.token});        \n      })\n      .catch((error) => {\n        console.error('Error:', error)\n      })\n  }\n\n  continueFlow = (data, token, id) => {\n    //var data1 = JSON.parse(\"{ \\\"\" + outputKey + \"\\\" : \\\"\" + val + \"\\\" }\");\n    console.log(\"continueFlow  running\");\n    console.log(data);\n    if(data !== \"\"){\n          data = JSON.parse(data);\n    }\n\n    fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/'+id+'/continue?debug=true', {\n      method: 'POST',\n      headers: {'Authorization':'Bearer ' + token, 'Content-Type': 'application/json'},\n      body:JSON.stringify(data) \n    })\n    .then(r=>r.json()).then (res=>{\n        console.log(res);\n        this.setState({\n          loading: false,\n          token: token,\n          data: res\n        });    \n    })\n    .catch((error) => {\n      console.error('Error:', error)\n    })\n  }\n\n  continueFlow_old = (outputKey, val, token, id, data) => {\n    var data1 = JSON.parse(\"{ \\\"\" + outputKey + \"\\\" : \\\"\" + val + \"\\\" }\");\n    console.log(data1);\n\n    fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/'+id+'/continue?debug=true', {\n      method: 'POST',\n      headers: {'Authorization':'Bearer ' + token, 'Content-Type': 'application/json'},\n      body:JSON.stringify(data1) \n    })\n    .then(r=>r.json()).then (res=>{\n        console.log(res);\n\n        this.setState({\n          loading: false,\n          token: token,\n          data: res\n        });        \n    })\n    .catch((error) => {\n      console.error('Error:', error)\n    })\n  }\n\n  componentDidMount(){\n    return this.login()  \n  }\n\n  initFlow(props) {\n       fetch('https://teambp-test.azurewebsites.net/api/iris/flow/instance/BeeindigenHuurContract/init', {\n      method: 'POST',\n      headers: {'Authorization':'Bearer ' + props.token},\n      body:JSON.stringify() \n    })\n    .then(r=>r.json()).then (res=>{\n        this.setState({\n          loading: false,\n          token: props.token,\n          data: res\n        });\n        //this.continueFlow({token:props.token});        \n    })\n    .catch((error) => {\n      console.error('Error:', error)\n    })\n    \n  }\n\n\n  render() { \n    //const s = this.state.loading? \"loading\": \"loaded\"\n    return (\n        <div key=\"main\">\n          <FlowContent data={this.state.data} token={this.state.token} continueFlow = {this.continueFlow} key={this.state.token} />       \n        </div>     \n      )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}