{"ast":null,"code":"var _a;\n\nimport { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nvar ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = classNamesFunction();\n\nvar getAnnouncementPriority = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n\n  return 'polite';\n};\n\nvar getRole = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n\n  return 'status';\n};\n\nexport var MessageBarBase = React.forwardRef(function (props, ref) {\n  var _a = useBoolean(false),\n      expandSingleLine = _a[0],\n      toggleExpandSingleLine = _a[1].toggle;\n\n  var labelId = useId('MessageBar');\n  var actions = props.actions,\n      className = props.className,\n      children = props.children,\n      overflowButtonAriaLabel = props.overflowButtonAriaLabel,\n      dismissIconProps = props.dismissIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      _b = props.messageBarType,\n      messageBarType = _b === void 0 ? MessageBarType.info : _b,\n      _c = props.onDismiss,\n      onDismiss = _c === void 0 ? undefined : _c,\n      _d = props.isMultiline,\n      isMultiline = _d === void 0 ? true : _d,\n      truncated = props.truncated,\n      dismissButtonAriaLabel = props.dismissButtonAriaLabel,\n      messageBarIconProps = props.messageBarIconProps,\n      role = props.role;\n  var nativeProps = getNativeProps(props, htmlElementProperties, ['className', 'role']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className: className\n  });\n  var expandIconProps = {\n    iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n  };\n  var regionProps = actions || onDismiss ? {\n    'aria-describedby': labelId,\n    role: 'region'\n  } : {};\n  var actionsDiv = actions ? React.createElement(\"div\", {\n    className: classNames.actions\n  }, actions) : null;\n  var dismissButton = onDismiss ? React.createElement(IconButton, {\n    disabled: false,\n    className: classNames.dismissal,\n    onClick: onDismiss,\n    iconProps: dismissIconProps ? dismissIconProps : {\n      iconName: 'Clear'\n    },\n    title: dismissButtonAriaLabel,\n    ariaLabel: dismissButtonAriaLabel\n  }) : null;\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    className: classNames.root\n  }, regionProps), React.createElement(\"div\", {\n    className: classNames.content\n  }, React.createElement(\"div\", {\n    className: classNames.iconContainer,\n    \"aria-hidden\": true\n  }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n    className: css(classNames.icon, messageBarIconProps.className)\n  })) : React.createElement(Icon, {\n    iconName: ICON_MAP[messageBarType],\n    className: classNames.icon\n  })), React.createElement(\"div\", {\n    className: classNames.text,\n    id: labelId,\n    role: role || getRole(messageBarType),\n    \"aria-live\": getAnnouncementPriority(messageBarType)\n  }, React.createElement(\"span\", __assign({\n    className: classNames.innerText\n  }, nativeProps), React.createElement(DelayedRender, null, React.createElement(\"span\", null, children)))),\n  /* singleline expand/collapse button */\n  !isMultiline && !actionsDiv && truncated && React.createElement(\"div\", {\n    className: classNames.expandSingleLine\n  }, React.createElement(IconButton, {\n    disabled: false,\n    className: classNames.expand,\n    onClick: toggleExpandSingleLine,\n    iconProps: expandIconProps,\n    ariaLabel: overflowButtonAriaLabel,\n    \"aria-expanded\": expandSingleLine\n  })), !isMultiline && actionsDiv,\n  /* singleline dismiss */\n  !isMultiline && dismissButton && React.createElement(\"div\", {\n    className: classNames.dismissSingleLine\n  }, dismissButton), isMultiline && dismissButton), isMultiline && actionsDiv);\n});\nMessageBarBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            <DelayedRender>\n              <span>{children}</span>\n            </DelayedRender>\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}