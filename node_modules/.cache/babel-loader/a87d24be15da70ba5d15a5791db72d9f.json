{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var CalendarDayBase = function (props) {\n  var dayGrid = React.useRef(null);\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        var _a, _b, _c;\n\n        (_c = (_a = dayGrid.current) === null || _a === void 0 ? void 0 : (_b = _a).focus) === null || _c === void 0 ? void 0 : _c.call(_b);\n      }\n    };\n  }, []);\n  var strings = props.strings,\n      navigatedDate = props.navigatedDate,\n      dateTimeFormatter = props.dateTimeFormatter,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      onHeaderSelect = props.onHeaderSelect,\n      showSixWeeksByDefault = props.showSixWeeksByDefault,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      restrictedDates = props.restrictedDates,\n      onNavigateDate = props.onNavigateDate,\n      showWeekNumbers = props.showWeekNumbers,\n      dateRangeType = props.dateRangeType,\n      animationDirection = props.animationDirection;\n  var dayPickerId = useId();\n  var monthAndYearId = useId();\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection\n  });\n  var monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  var HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  var headerAriaLabel = strings.yearPickerHeaderAriaLabel ? format(strings.yearPickerHeaderAriaLabel, monthAndYear) : monthAndYear;\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    id: dayPickerId\n  }, React.createElement(\"div\", {\n    className: classNames.header\n  }, React.createElement(HeaderButtonComponentType // if this component rerenders when text changes, aria-live will not be announced, so make key consistent\n  , {\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    \"aria-label\": onHeaderSelect ? headerAriaLabel : undefined,\n    key: monthAndYear,\n    className: classNames.monthAndYear,\n    onClick: onHeaderSelect,\n    \"data-is-focusable\": !!onHeaderSelect,\n    tabIndex: onHeaderSelect ? 0 : -1,\n    onKeyDown: onButtonKeyDown(onHeaderSelect),\n    type: \"button\"\n  }, React.createElement(\"span\", {\n    id: monthAndYearId\n  }, monthAndYear)), React.createElement(CalendarDayNavigationButtons, __assign({}, props, {\n    classNames: classNames,\n    dayPickerId: dayPickerId\n  }))), React.createElement(CalendarDayGrid, __assign({}, props, {\n    styles: styles,\n    componentRef: dayGrid,\n    strings: strings,\n    navigatedDate: navigatedDate,\n    weeksToShow: showSixWeeksByDefault ? 6 : undefined,\n    dateTimeFormatter: dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates,\n    onNavigateDate: onNavigateDate,\n    labelledBy: monthAndYearId,\n    dateRangeType: dateRangeType\n  })));\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\nvar CalendarDayNavigationButtons = function (props) {\n  var _a, _b;\n\n  var minDate = props.minDate,\n      maxDate = props.maxDate,\n      navigatedDate = props.navigatedDate,\n      allFocusable = props.allFocusable,\n      strings = props.strings,\n      navigationIcons = props.navigationIcons,\n      showCloseButton = props.showCloseButton,\n      classNames = props.classNames,\n      dayPickerId = props.dayPickerId,\n      onNavigateDate = props.onNavigateDate,\n      onDismiss = props.onDismiss;\n\n  var onSelectNextMonth = function () {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  var onSelectPrevMonth = function () {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n\n  var leftNavigationIcon = navigationIcons.leftNavigation;\n  var rightNavigationIcon = navigationIcons.rightNavigation;\n  var closeNavigationIcon = navigationIcons.closeIcon; // determine if previous/next months are in bounds\n\n  var prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  var nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true; // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n\n  return React.createElement(\"div\", {\n    className: classNames.monthComponents\n  }, React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_a = {}, _a[classNames.disabledStyle] = !prevMonthInBounds, _a)),\n    tabIndex: prevMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !prevMonthInBounds,\n    onClick: prevMonthInBounds ? onSelectPrevMonth : undefined,\n    onKeyDown: prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined,\n    \"aria-controls\": dayPickerId,\n    title: strings.prevMonthAriaLabel ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: leftNavigationIcon\n  })), React.createElement(\"button\", {\n    className: css(classNames.headerIconButton, (_b = {}, _b[classNames.disabledStyle] = !nextMonthInBounds, _b)),\n    tabIndex: nextMonthInBounds ? undefined : allFocusable ? 0 : -1,\n    \"aria-disabled\": !nextMonthInBounds,\n    onClick: nextMonthInBounds ? onSelectNextMonth : undefined,\n    onKeyDown: nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined,\n    \"aria-controls\": dayPickerId,\n    title: strings.nextMonthAriaLabel ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()] : undefined,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: rightNavigationIcon\n  })), showCloseButton && React.createElement(\"button\", {\n    className: css(classNames.headerIconButton),\n    onClick: onDismiss,\n    onKeyDown: onButtonKeyDown(onDismiss),\n    title: strings.closeButtonAriaLabel,\n    type: \"button\"\n  }, React.createElement(Icon, {\n    iconName: closeNavigationIcon\n  })));\n};\n\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nvar onButtonKeyDown = function (callback) {\n  return function (ev) {\n    var _a; // eslint-disable-next-line deprecation/deprecation\n\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        (_a = callback) === null || _a === void 0 ? void 0 : _a();\n        break;\n    }\n  };\n};","map":{"version":3,"sources":["components/Calendar/CalendarDay/CalendarDay.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, classNamesFunction, format } from '@fluentui/utilities';\nimport { Icon } from '../../../Icon';\nimport { addMonths, compareDatePart, getMonthStart, getMonthEnd } from '@fluentui/date-time-utilities';\nimport { ICalendarDayProps, ICalendarDayStyleProps, ICalendarDayStyles } from './CalendarDay.types';\nimport { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport { CalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid';\nimport { ICalendarDayGrid } from '../../CalendarDayGrid/CalendarDayGrid.types';\nimport { useId } from '@fluentui/react-hooks';\n\nconst getClassNames = classNamesFunction<ICalendarDayStyleProps, ICalendarDayStyles>();\n\nexport const CalendarDayBase: React.FunctionComponent<ICalendarDayProps> = props => {\n  const dayGrid = React.useRef<ICalendarDayGrid>(null);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        dayGrid.current?.focus?.();\n      },\n    }),\n    [],\n  );\n\n  const {\n    strings,\n    navigatedDate,\n    dateTimeFormatter,\n    styles,\n    theme,\n    className,\n    onHeaderSelect,\n    showSixWeeksByDefault,\n    minDate,\n    maxDate,\n    restrictedDates,\n    onNavigateDate,\n    showWeekNumbers,\n    dateRangeType,\n    animationDirection,\n  } = props;\n  const dayPickerId = useId();\n  const monthAndYearId = useId();\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    className: className,\n    headerIsClickable: !!onHeaderSelect,\n    showWeekNumbers: showWeekNumbers,\n    animationDirection: animationDirection,\n  });\n\n  const monthAndYear = dateTimeFormatter.formatMonthYear(navigatedDate, strings);\n  const HeaderButtonComponentType = onHeaderSelect ? 'button' : 'div';\n  const headerAriaLabel = strings.yearPickerHeaderAriaLabel\n    ? format(strings.yearPickerHeaderAriaLabel, monthAndYear)\n    : monthAndYear;\n\n  return (\n    <div className={classNames.root} id={dayPickerId}>\n      <div className={classNames.header}>\n        <HeaderButtonComponentType\n          // if this component rerenders when text changes, aria-live will not be announced, so make key consistent\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n          aria-label={onHeaderSelect ? headerAriaLabel : undefined}\n          key={monthAndYear}\n          className={classNames.monthAndYear}\n          onClick={onHeaderSelect}\n          data-is-focusable={!!onHeaderSelect}\n          tabIndex={onHeaderSelect ? 0 : -1} // prevent focus if there's no action for the button\n          onKeyDown={onButtonKeyDown(onHeaderSelect)}\n          type=\"button\"\n        >\n          <span id={monthAndYearId}>{monthAndYear}</span>\n        </HeaderButtonComponentType>\n        <CalendarDayNavigationButtons {...props} classNames={classNames} dayPickerId={dayPickerId} />\n      </div>\n      <CalendarDayGrid\n        {...props}\n        styles={styles}\n        componentRef={dayGrid}\n        strings={strings}\n        navigatedDate={navigatedDate!}\n        weeksToShow={showSixWeeksByDefault ? 6 : undefined}\n        dateTimeFormatter={dateTimeFormatter!}\n        minDate={minDate}\n        maxDate={maxDate}\n        restrictedDates={restrictedDates}\n        onNavigateDate={onNavigateDate}\n        labelledBy={monthAndYearId}\n        dateRangeType={dateRangeType}\n      />\n    </div>\n  );\n};\nCalendarDayBase.displayName = 'CalendarDayBase';\n\ninterface ICalendarDayNavigationButtonsProps extends ICalendarDayProps {\n  classNames: IProcessedStyleSet<ICalendarDayStyles>;\n  dayPickerId: string;\n}\n\nconst CalendarDayNavigationButtons = (props: ICalendarDayNavigationButtonsProps): JSX.Element => {\n  const {\n    minDate,\n    maxDate,\n    navigatedDate,\n    allFocusable,\n    strings,\n    navigationIcons,\n    showCloseButton,\n    classNames,\n    dayPickerId,\n    onNavigateDate,\n    onDismiss,\n  } = props;\n\n  const onSelectNextMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, 1), false);\n  };\n\n  const onSelectPrevMonth = (): void => {\n    onNavigateDate(addMonths(navigatedDate, -1), false);\n  };\n  const leftNavigationIcon = navigationIcons.leftNavigation;\n  const rightNavigationIcon = navigationIcons.rightNavigation;\n  const closeNavigationIcon = navigationIcons.closeIcon;\n\n  // determine if previous/next months are in bounds\n  const prevMonthInBounds = minDate ? compareDatePart(minDate, getMonthStart(navigatedDate)) < 0 : true;\n  const nextMonthInBounds = maxDate ? compareDatePart(getMonthEnd(navigatedDate), maxDate) < 0 : true;\n\n  // use aria-disabled instead of disabled so focus is not lost\n  // when a prev/next button becomes disabled after being clicked\n  return (\n    <div className={classNames.monthComponents}>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !prevMonthInBounds,\n        })}\n        tabIndex={prevMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!prevMonthInBounds}\n        onClick={prevMonthInBounds ? onSelectPrevMonth : undefined}\n        onKeyDown={prevMonthInBounds ? onButtonKeyDown(onSelectPrevMonth) : undefined}\n        aria-controls={dayPickerId}\n        title={\n          strings.prevMonthAriaLabel\n            ? strings.prevMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, -1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={leftNavigationIcon} />\n      </button>\n      <button\n        className={css(classNames.headerIconButton, {\n          [classNames.disabledStyle]: !nextMonthInBounds,\n        })}\n        tabIndex={nextMonthInBounds ? undefined : allFocusable ? 0 : -1}\n        aria-disabled={!nextMonthInBounds}\n        onClick={nextMonthInBounds ? onSelectNextMonth : undefined}\n        onKeyDown={nextMonthInBounds ? onButtonKeyDown(onSelectNextMonth) : undefined}\n        aria-controls={dayPickerId}\n        title={\n          strings.nextMonthAriaLabel\n            ? strings.nextMonthAriaLabel + ' ' + strings.months[addMonths(navigatedDate, 1).getMonth()]\n            : undefined\n        }\n        type=\"button\"\n      >\n        <Icon iconName={rightNavigationIcon} />\n      </button>\n      {showCloseButton && (\n        <button\n          className={css(classNames.headerIconButton)}\n          onClick={onDismiss}\n          onKeyDown={onButtonKeyDown(onDismiss)}\n          title={strings.closeButtonAriaLabel}\n          type=\"button\"\n        >\n          <Icon iconName={closeNavigationIcon} />\n        </button>\n      )}\n    </div>\n  );\n};\nCalendarDayNavigationButtons.displayName = 'CalendarDayNavigationButtons';\n\nconst onButtonKeyDown = (\n  callback?: () => void,\n): ((ev: React.KeyboardEvent<HTMLButtonElement | HTMLDivElement>) => void) => (\n  ev: React.KeyboardEvent<HTMLButtonElement>,\n) => {\n  // eslint-disable-next-line deprecation/deprecation\n  switch (ev.which) {\n    case KeyCodes.enter:\n      callback?.();\n      break;\n  }\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}