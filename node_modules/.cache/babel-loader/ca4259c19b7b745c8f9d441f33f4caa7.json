{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which asynchronously executes a callback once the component has been mounted.\n *\n * @param callback - Function to call before mount.\n */\n\nexport var useMount = function (callback) {\n  var mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  React.useEffect(function () {\n    var _a, _b;\n\n    (_b = (_a = mountRef).current) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }, []);\n};","map":{"version":3,"sources":["useMount.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA;;;;AAIG;;AACH,OAAO,IAAM,QAAQ,GAAG,UAAC,QAAD,EAAqB;AAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,CAAa,QAAb,CAAjB;AACA,EAAA,QAAQ,CAAC,OAAT,GAAmB,QAAnB;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;;;AACd,KAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,EAAS,OAAT,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAA,IAAA,CAAA,EAAA,CAAhB;AACD,GAFD,EAEG,EAFH;AAGD,CANM","sourcesContent":["import * as React from 'react';\n\n/**\n * Hook which asynchronously executes a callback once the component has been mounted.\n *\n * @param callback - Function to call before mount.\n */\nexport const useMount = (callback: () => void) => {\n  const mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  React.useEffect(() => {\n    mountRef.current?.();\n  }, []);\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}