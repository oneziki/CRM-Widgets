{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar COMPONENT_NAME = 'Shimmer';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\n\nexport var ShimmerBase = React.forwardRef(function (props, ref) {\n  var styles = props.styles,\n      shimmerElements = props.shimmerElements,\n      children = props.children,\n      width = props.width,\n      className = props.className,\n      customElementsGroup = props.customElementsGroup,\n      theme = props.theme,\n      ariaLabel = props.ariaLabel,\n      shimmerColors = props.shimmerColors,\n      _a = props.isDataLoaded,\n      isDataLoaded = _a === void 0 ? false : _a;\n  var divProps = getNativeProps(props, divProperties);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    isDataLoaded: isDataLoaded,\n    className: className,\n    transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n    shimmerColor: shimmerColors && shimmerColors.shimmer,\n    shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\n  });\n  var internalState = useConst({\n    lastTimeoutId: 0\n  });\n\n  var _b = useSetTimeout(),\n      setTimeout = _b.setTimeout,\n      clearTimeout = _b.clearTimeout;\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n\n\n  var _c = React.useState(isDataLoaded),\n      contentLoaded = _c[0],\n      setContentLoaded = _c[1];\n\n  var divStyleProp = {\n    width: width ? width : '100%'\n  };\n  React.useEffect(function () {\n    if (isDataLoaded !== contentLoaded) {\n      if (isDataLoaded) {\n        internalState.lastTimeoutId = setTimeout(function () {\n          setContentLoaded(true);\n        }, TRANSITION_ANIMATION_INTERVAL);\n        return function () {\n          return clearTimeout(internalState.lastTimeoutId);\n        };\n      } else {\n        setContentLoaded(false);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n\n  }, [isDataLoaded]);\n  return React.createElement(\"div\", __assign({}, divProps, {\n    className: classNames.root,\n    ref: ref\n  }), !contentLoaded && React.createElement(\"div\", {\n    style: divStyleProp,\n    className: classNames.shimmerWrapper\n  }, React.createElement(\"div\", {\n    className: classNames.shimmerGradient\n  }), customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n    shimmerElements: shimmerElements,\n    backgroundColor: shimmerColors && shimmerColors.background\n  })), children && React.createElement(\"div\", {\n    className: classNames.dataWrapper\n  }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n    className: classNames.screenReaderText\n  }, ariaLabel))));\n});\nShimmerBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nimport { useSetTimeout, useConst } from '@fluentui/react-hooks';\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\nconst COMPONENT_NAME = 'Shimmer';\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerBase: React.FunctionComponent<IShimmerProps> = React.forwardRef<HTMLDivElement, IShimmerProps>(\n  (props, ref) => {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n      isDataLoaded = false,\n    } = props;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames: { [key in keyof IShimmerStyles]: string } = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const internalState = useConst({\n      lastTimeoutId: 0,\n    });\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    /**\n     * Flag for knowing when to remove the shimmerWrapper from the DOM.\n     */\n    const [contentLoaded, setContentLoaded] = React.useState(isDataLoaded);\n\n    const divStyleProp = { width: width ? width : '100%' };\n\n    React.useEffect(() => {\n      if (isDataLoaded !== contentLoaded) {\n        if (isDataLoaded) {\n          internalState.lastTimeoutId = setTimeout(() => {\n            setContentLoaded(true);\n          }, TRANSITION_ANIMATION_INTERVAL);\n\n          return () => clearTimeout(internalState.lastTimeoutId);\n        } else {\n          setContentLoaded(false);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only run when isDataLoaded changes.\n    }, [isDataLoaded]);\n\n    return (\n      <div {...divProps} className={classNames.root} ref={ref}>\n        {!contentLoaded && (\n          <div style={divStyleProp} className={classNames.shimmerWrapper}>\n            <div className={classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nShimmerBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}