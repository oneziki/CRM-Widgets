{"ast":null,"code":"/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport var isContiguous = function (days, isSingleWeek, firstDayOfWeek) {\n  var daySet = new Set(days);\n  var amountOfNoNeighbors = 0;\n\n  for (var _i = 0, days_1 = days; _i < days_1.length; _i++) {\n    var day = days_1[_i];\n    var nextDay = (day + 1) % 7;\n\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  } // In case the full week is provided, then each day has a neighbor\n  //, otherwise the last day does not have a neighbor.\n\n\n  return amountOfNoNeighbors < 2;\n};","map":{"version":3,"sources":["dateGrid/isContiguous.ts"],"names":[],"mappings":"AAEA;;;;;AAKG;AACH,OAAO,IAAM,YAAY,GAAG,UAAC,IAAD,EAAoB,YAApB,EAA2C,cAA3C,EAAoE;AAC9F,MAAM,MAAM,GAAG,IAAI,GAAJ,CAAQ,IAAR,CAAf;AACA,MAAI,mBAAmB,GAAG,CAA1B;;AACA,OAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;AAAnB,QAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;AACH,QAAM,OAAO,GAAG,CAAC,GAAG,GAAG,CAAP,IAAY,CAA5B;;AACA,QAAI,EAAE,MAAM,CAAC,GAAP,CAAW,OAAX,MAAwB,CAAC,YAAD,IAAiB,cAAc,KAAK,OAA5D,CAAF,CAAJ,EAA6E;AAC3E,MAAA,mBAAmB;AACpB;AACF,GAR6F,CAU9F;AACA;;;AACA,SAAO,mBAAmB,GAAG,CAA7B;AACD,CAbM","sourcesContent":["import { DayOfWeek } from '../dateValues/dateValues';\n\n/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport const isContiguous = (days: DayOfWeek[], isSingleWeek: boolean, firstDayOfWeek: DayOfWeek): boolean => {\n  const daySet = new Set(days);\n  let amountOfNoNeighbors = 0;\n  for (const day of days) {\n    const nextDay = (day + 1) % 7;\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  }\n\n  // In case the full week is provided, then each day has a neighbor\n  //, otherwise the last day does not have a neighbor.\n  return amountOfNoNeighbors < 2;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}