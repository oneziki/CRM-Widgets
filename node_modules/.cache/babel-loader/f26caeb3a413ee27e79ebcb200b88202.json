{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nvar getClassNames = classNamesFunction();\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\n\nexport var useLink = function (props, forwardedRef) {\n  var as = props.as,\n      className = props.className,\n      disabled = props.disabled,\n      href = props.href,\n      onClick = props.onClick,\n      styles = props.styles,\n      theme = props.theme,\n      underline = props.underline;\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n  var classNames = getClassNames(styles, {\n    className: className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme\n  });\n\n  var _onClick = function (ev) {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  var rootType = as ? as : href ? 'a' : 'button';\n  var state = {};\n  var slots = {\n    root: rootType\n  };\n  var slotProps = {\n    root: __assign(__assign({}, adjustPropsForRootType(rootType, props)), {\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs\n    })\n  };\n  return {\n    state: state,\n    slots: slots,\n    slotProps: slotProps\n  };\n};\n\nvar useComponentRef = function (props, link) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        if (link.current) {\n          link.current.focus();\n        }\n      }\n    };\n  }, [link]);\n};\n\nvar adjustPropsForRootType = function (RootType, props) {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  var as = props.as,\n      disabled = props.disabled,\n      target = props.target,\n      href = props.href,\n      theme = props.theme,\n      getStyles = props.getStyles,\n      styles = props.styles,\n      componentRef = props.componentRef,\n      underline = props.underline,\n      restProps = __rest(props, [\"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"underline\"]); // RootType will be a string if we're dealing with an html component\n\n\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return __assign({\n        target: target,\n        href: disabled ? undefined : href\n      }, restProps);\n    } // Add the type='button' prop for button elements\n\n\n    if (RootType === 'button') {\n      return __assign({\n        type: 'button',\n        disabled: disabled\n      }, restProps);\n    } // Remove the target and href props for all other non anchor elements\n\n\n    return __assign(__assign({}, restProps), {\n      disabled: disabled\n    });\n  } // Retain all props except 'as' for ReactComponents\n\n\n  return __assign({\n    target: target,\n    href: href,\n    disabled: disabled\n  }, restProps);\n};","map":{"version":3,"sources":["components/Link/useLink.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}