{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nvar getClassNames = classNamesFunction();\nexport var CheckboxBase = React.forwardRef(function (props, forwardedRef) {\n  var disabled = props.disabled,\n      required = props.required,\n      inputProps = props.inputProps,\n      name = props.name,\n      ariaLabel = props.ariaLabel,\n      ariaLabelledBy = props.ariaLabelledBy,\n      ariaDescribedBy = props.ariaDescribedBy,\n      ariaPositionInSet = props.ariaPositionInSet,\n      ariaSetSize = props.ariaSetSize,\n      title = props.title,\n      label = props.label,\n      checkmarkIconProps = props.checkmarkIconProps,\n      styles = props.styles,\n      theme = props.theme,\n      className = props.className,\n      _a = props.boxSide,\n      boxSide = _a === void 0 ? 'start' : _a;\n  var id = useId('checkbox-', props.id);\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  var inputRef = React.useRef(null);\n\n  var _b = useControllableValue(props.checked, props.defaultChecked, props.onChange),\n      isChecked = _b[0],\n      setIsChecked = _b[1];\n\n  var _c = useControllableValue(props.indeterminate, props.defaultIndeterminate),\n      isIndeterminate = _c[0],\n      setIsIndeterminate = _c[1];\n\n  useFocusRects(rootRef);\n  useDebugWarning(props);\n  useComponentRef(props, isChecked, isIndeterminate, inputRef);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    reversed: boxSide !== 'start',\n    isUsingCustomLabelRender: !!props.onRenderLabel\n  });\n\n  var onChange = function (ev) {\n    if (isIndeterminate) {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      setIsChecked(!!isChecked, ev);\n      setIsIndeterminate(false);\n    } else {\n      setIsChecked(!isChecked, ev);\n    }\n  };\n\n  var defaultLabelRenderer = React.useCallback(function (checkboxProps) {\n    if (!checkboxProps) {\n      return null;\n    }\n\n    return checkboxProps.label ? React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      className: classNames.text,\n      title: checkboxProps.title\n    }, checkboxProps.label) : null;\n  }, [classNames.text]);\n  var onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n  var ariaChecked = isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false';\n\n  var mergedInputProps = __assign(__assign({\n    className: classNames.input,\n    type: 'checkbox'\n  }, inputProps), {\n    checked: !!isChecked,\n    disabled: disabled,\n    required: required,\n    name: name,\n    id: id,\n    title: title,\n    onChange: onChange,\n    'aria-disabled': disabled,\n    'aria-label': ariaLabel || label,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-posinset': ariaPositionInSet,\n    'aria-setsize': ariaSetSize,\n    'aria-checked': ariaChecked\n  });\n\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    title: title,\n    ref: mergedRootRefs\n  }, React.createElement(\"input\", __assign({}, mergedInputProps, {\n    ref: inputRef,\n    \"data-ktp-execute-target\": true\n  })), React.createElement(\"label\", {\n    className: classNames.label,\n    htmlFor: id\n  }, React.createElement(\"div\", {\n    className: classNames.checkbox,\n    \"data-ktp-target\": true\n  }, React.createElement(Icon, __assign({\n    iconName: \"CheckMark\"\n  }, checkmarkIconProps, {\n    className: classNames.checkmark\n  }))), onRenderLabel(props, defaultLabelRenderer)));\n});\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props: props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      }\n    });\n  }\n}\n\nfunction useComponentRef(props, isChecked, isIndeterminate, checkBoxRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n\n      focus: function () {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      }\n    };\n  }, [checkBoxRef, isChecked, isIndeterminate]);\n}","map":{"version":3,"sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useMergedRefs, useWarnings } from '@fluentui/react-hooks';\nimport { useFocusRects, classNamesFunction } from '@fluentui/utilities';\nimport { Icon } from '../Icon/Icon';\nimport { ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport const CheckboxBase: React.FunctionComponent<ICheckboxProps> = React.forwardRef<HTMLDivElement, ICheckboxProps>(\n  (props, forwardedRef) => {\n    const {\n      disabled,\n      required,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      label,\n      checkmarkIconProps,\n      styles,\n      theme,\n      className,\n      boxSide = 'start',\n    } = props;\n\n    const id = useId('checkbox-', props.id);\n\n    const rootRef = React.useRef<HTMLDivElement | null>(null);\n    const mergedRootRefs: React.Ref<HTMLDivElement> = useMergedRefs(rootRef, forwardedRef);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    const [isChecked, setIsChecked] = useControllableValue(props.checked, props.defaultChecked, props.onChange);\n    const [isIndeterminate, setIsIndeterminate] = useControllableValue(props.indeterminate, props.defaultIndeterminate);\n\n    useFocusRects(rootRef);\n    useDebugWarning(props);\n    useComponentRef(props, isChecked, isIndeterminate, inputRef);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: !!props.onRenderLabel,\n    });\n\n    const onChange = (ev: React.ChangeEvent<HTMLElement>): void => {\n      if (isIndeterminate) {\n        // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n        // controlled, lets the consumer know to change it by calling onChange). It doesn't\n        // change the checked state.\n        setIsChecked(!!isChecked, ev);\n        setIsIndeterminate(false);\n      } else {\n        setIsChecked(!isChecked, ev);\n      }\n    };\n\n    const defaultLabelRenderer = React.useCallback(\n      (checkboxProps?: ICheckboxProps): JSX.Element | null => {\n        if (!checkboxProps) {\n          return null;\n        }\n        return checkboxProps.label ? (\n          <span aria-hidden=\"true\" className={classNames.text} title={checkboxProps.title}>\n            {checkboxProps.label}\n          </span>\n        ) : null;\n      },\n      [classNames.text],\n    );\n\n    const onRenderLabel = props.onRenderLabel || defaultLabelRenderer;\n\n    const ariaChecked: React.InputHTMLAttributes<HTMLInputElement>['aria-checked'] = isIndeterminate\n      ? 'mixed'\n      : isChecked\n      ? 'true'\n      : 'false';\n\n    const mergedInputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      className: classNames.input,\n      type: 'checkbox' as React.InputHTMLAttributes<HTMLInputElement>['type'],\n      ...inputProps,\n      checked: !!isChecked,\n      disabled,\n      required,\n      name,\n      id,\n      title,\n      onChange,\n      'aria-disabled': disabled,\n      'aria-label': ariaLabel || label,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedBy,\n      'aria-posinset': ariaPositionInSet,\n      'aria-setsize': ariaSetSize,\n      'aria-checked': ariaChecked,\n    };\n\n    return (\n      <div className={classNames.root} title={title} ref={mergedRootRefs}>\n        <input {...mergedInputProps} ref={inputRef} data-ktp-execute-target={true} />\n        <label className={classNames.label} htmlFor={id}>\n          <div className={classNames.checkbox} data-ktp-target={true}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={classNames.checkmark} />\n          </div>\n          {onRenderLabel(props, defaultLabelRenderer)}\n        </label>\n      </div>\n    );\n  },\n);\n\nCheckboxBase.displayName = 'CheckboxBase';\n\nfunction useDebugWarning(props: ICheckboxProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Checkbox',\n      props,\n      mutuallyExclusive: {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      },\n    });\n  }\n}\n\nfunction useComponentRef(\n  props: ICheckboxProps,\n  isChecked: boolean | undefined,\n  isIndeterminate: boolean | undefined,\n  checkBoxRef: React.RefObject<HTMLInputElement>,\n) {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      get indeterminate() {\n        return !!isIndeterminate;\n      },\n      focus() {\n        if (checkBoxRef.current) {\n          checkBoxRef.current.focus();\n        }\n      },\n    }),\n    [checkBoxRef, isChecked, isIndeterminate],\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}