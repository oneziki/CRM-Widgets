{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, divProperties, elementContains, getNativeProps, focusFirstChild } from '../../Utilities';\nimport { OverflowButton } from './OverflowButton';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'OverflowSet';\n\nvar useComponentRef = function (props, divContainer) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        var focusSucceeded = false;\n\n        if (divContainer.current) {\n          focusSucceeded = focusFirstChild(divContainer.current);\n        }\n\n        return focusSucceeded;\n      },\n      focusElement: function (childElement) {\n        var focusSucceeded = false;\n\n        if (!childElement) {\n          return false;\n        }\n\n        if (divContainer.current && elementContains(divContainer.current, childElement)) {\n          childElement.focus();\n          focusSucceeded = document.activeElement === childElement;\n        }\n\n        return focusSucceeded;\n      }\n    };\n  }, [divContainer]);\n};\n\nexport var OverflowSetBase = React.forwardRef(function (props, forwardedRef) {\n  var divContainer = React.useRef(null);\n  var mergedRef = useMergedRefs(divContainer, forwardedRef);\n  useComponentRef(props, divContainer);\n  var items = props.items,\n      overflowItems = props.overflowItems,\n      className = props.className,\n      styles = props.styles,\n      vertical = props.vertical,\n      role = props.role,\n      _a = props.overflowSide,\n      overflowSide = _a === void 0 ? 'end' : _a,\n      onRenderItem = props.onRenderItem;\n  var classNames = getClassNames(styles, {\n    className: className,\n    vertical: vertical\n  });\n  var showOverflow = !!overflowItems && overflowItems.length > 0;\n  return React.createElement(\"div\", __assign({}, getNativeProps(props, divProperties), {\n    role: role || 'group',\n    \"aria-orientation\": role === 'menubar' ? vertical === true ? 'vertical' : 'horizontal' : undefined,\n    className: classNames.root,\n    ref: mergedRef\n  }), overflowSide === 'start' && showOverflow && React.createElement(OverflowButton, __assign({}, props, {\n    className: classNames.overflowButton\n  })), items && items.map(function (item, i) {\n    return React.createElement(\"div\", {\n      className: classNames.item,\n      key: item.key\n    }, onRenderItem(item));\n  }), overflowSide === 'end' && showOverflow && React.createElement(OverflowButton, __assign({}, props, {\n    className: classNames.overflowButton\n  })));\n});\nOverflowSetBase.displayName = COMPONENT_NAME;","map":{"version":3,"sources":["components/OverflowSet/OverflowSet.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { IOverflowSetProps, IOverflowSetStyles, IOverflowSetStyleProps, IOverflowSet } from './OverflowSet.types';\nimport { classNamesFunction, divProperties, elementContains, getNativeProps, focusFirstChild } from '../../Utilities';\nimport { OverflowButton } from './OverflowButton';\n\nconst getClassNames = classNamesFunction<IOverflowSetStyleProps, IOverflowSetStyles>();\nconst COMPONENT_NAME = 'OverflowSet';\n\nconst useComponentRef = (props: IOverflowSetProps, divContainer: React.RefObject<HTMLDivElement>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    (): IOverflowSet => ({\n      focus: (): boolean => {\n        let focusSucceeded = false;\n        if (divContainer.current) {\n          focusSucceeded = focusFirstChild(divContainer.current);\n        }\n        return focusSucceeded;\n      },\n      focusElement: (childElement?: HTMLElement) => {\n        let focusSucceeded = false;\n        if (!childElement) {\n          return false;\n        }\n        if (divContainer.current && elementContains(divContainer.current, childElement)) {\n          childElement.focus();\n          focusSucceeded = document.activeElement === childElement;\n        }\n        return focusSucceeded;\n      },\n    }),\n    [divContainer],\n  );\n};\n\nexport const OverflowSetBase: React.FunctionComponent<IOverflowSetProps> = React.forwardRef<\n  HTMLDivElement,\n  IOverflowSetProps\n>((props, forwardedRef) => {\n  const divContainer = React.useRef<HTMLDivElement>(null);\n  const mergedRef = useMergedRefs(divContainer, forwardedRef);\n  useComponentRef(props, divContainer);\n\n  const { items, overflowItems, className, styles, vertical, role, overflowSide = 'end', onRenderItem } = props;\n\n  const classNames: IProcessedStyleSet<IOverflowSetStyles> = getClassNames(styles, { className, vertical });\n\n  const showOverflow = !!overflowItems && overflowItems.length > 0;\n\n  return (\n    <div\n      {...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties)}\n      role={role || 'group'}\n      aria-orientation={role === 'menubar' ? (vertical === true ? 'vertical' : 'horizontal') : undefined}\n      className={classNames.root}\n      ref={mergedRef}\n    >\n      {overflowSide === 'start' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n      {items &&\n        items.map((item, i) => (\n          <div className={classNames.item} key={item.key}>\n            {onRenderItem(item)}\n          </div>\n        ))}\n      {overflowSide === 'end' && showOverflow && <OverflowButton {...props} className={classNames.overflowButton} />}\n    </div>\n  );\n});\nOverflowSetBase.displayName = COMPONENT_NAME;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}