{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { classNamesFunction, find, getNativeProps, divProperties, setFocusVisibility } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nimport { useId, useControllableValue, useWarnings } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\n\nvar getOptionId = function (option, id) {\n  return id + \"-\" + option.key;\n};\n\nvar findOption = function (options, key) {\n  return key === undefined ? undefined : find(options, function (value) {\n    return value.key === key;\n  });\n};\n\nvar useComponentRef = function (options, keyChecked, id, componentRef) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get checkedOption() {\n        return findOption(options, keyChecked);\n      },\n\n      focus: function () {\n        var optionToFocus = findOption(options, keyChecked) || options.filter(function (option) {\n          return !option.disabled;\n        })[0];\n        var elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));\n\n        if (elementToFocus) {\n          elementToFocus.focus();\n          setFocusVisibility(true, elementToFocus);\n        }\n      }\n    };\n  }, [options, keyChecked, id]);\n};\n\nvar COMPONENT_NAME = 'ChoiceGroup';\nexport var ChoiceGroupBase = React.forwardRef(function (props, forwardedRef) {\n  var className = props.className,\n      theme = props.theme,\n      styles = props.styles,\n      _a = props.options,\n      options = _a === void 0 ? [] : _a,\n      label = props.label,\n      required = props.required,\n      disabled = props.disabled,\n      name = props.name,\n      defaultSelectedKey = props.defaultSelectedKey,\n      componentRef = props.componentRef,\n      onChange = props.onChange;\n  var id = useId('ChoiceGroup');\n  var labelId = useId('ChoiceGroupLabel');\n  var divProps = getNativeProps(props, divProperties, ['onChange', 'className', 'required']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    optionsContainIconOrImage: options.some(function (option) {\n      return !!(option.iconProps || option.imageSrc);\n    })\n  });\n  var ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);\n\n  var _b = useControllableValue(props.selectedKey, defaultSelectedKey),\n      keyChecked = _b[0],\n      setKeyChecked = _b[1];\n\n  var _c = React.useState(),\n      keyFocused = _c[0],\n      setKeyFocused = _c[1];\n\n  useDebugWarnings(props);\n  useComponentRef(options, keyChecked, id, componentRef);\n  var onFocus = React.useCallback(function (ev, option) {\n    var _a, _b;\n\n    if (option) {\n      setKeyFocused(option.itemKey);\n      (_b = (_a = option).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, ev);\n    }\n  }, []);\n  var onBlur = React.useCallback(function (ev, option) {\n    var _a, _b, _c;\n\n    setKeyFocused(undefined);\n    (_c = (_a = option) === null || _a === void 0 ? void 0 : (_b = _a).onBlur) === null || _c === void 0 ? void 0 : _c.call(_b, ev);\n  }, []);\n  var onOptionChange = React.useCallback(function (evt, option) {\n    var _a, _b, _c;\n\n    if (!option) {\n      return;\n    }\n\n    setKeyChecked(option.itemKey);\n    (_b = (_a = option).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, evt);\n    (_c = onChange) === null || _c === void 0 ? void 0 : _c(evt, findOption(options, option.itemKey));\n  }, [onChange, options, setKeyChecked]);\n  return React.createElement(\"div\", __assign({\n    className: classNames.root\n  }, divProps, {\n    ref: forwardedRef\n  }), React.createElement(\"div\", __assign({\n    role: \"radiogroup\"\n  }, ariaLabelledBy && {\n    'aria-labelledby': ariaLabelledBy\n  }), label && React.createElement(Label, {\n    className: classNames.label,\n    required: required,\n    id: labelId,\n    disabled: disabled\n  }, label), React.createElement(\"div\", {\n    className: classNames.flexContainer\n  }, options.map(function (option) {\n    return React.createElement(ChoiceGroupOption, __assign({\n      key: option.key,\n      itemKey: option.key\n    }, option, {\n      onBlur: onBlur,\n      onFocus: onFocus,\n      onChange: onOptionChange,\n      focused: option.key === keyFocused,\n      checked: option.key === keyChecked,\n      disabled: option.disabled || disabled,\n      id: getOptionId(option, id),\n      labelId: option.labelId || labelId + \"-\" + option.key,\n      name: name || id,\n      required: required\n    }));\n  }))));\n});\nChoiceGroupBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarnings(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      mutuallyExclusive: {\n        selectedKey: 'defaultSelectedKey'\n      }\n    });\n  }\n}","map":{"version":3,"sources":["components/ChoiceGroup/ChoiceGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport {\n  classNamesFunction,\n  find,\n  getNativeProps,\n  divProperties,\n  IRefObject,\n  setFocusVisibility,\n} from '../../Utilities';\nimport {\n  IChoiceGroupOption,\n  IChoiceGroupProps,\n  IChoiceGroupStyleProps,\n  IChoiceGroupStyles,\n  IChoiceGroup,\n} from './ChoiceGroup.types';\nimport { IChoiceGroupOptionProps } from './ChoiceGroupOption/ChoiceGroupOption.types';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nimport { useId, useControllableValue, useWarnings } from '@fluentui/react-hooks';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nconst getOptionId = (option: IChoiceGroupOption, id: string): string => {\n  return `${id}-${option.key}`;\n};\n\nconst findOption = (options: IChoiceGroupOption[], key: string | number | undefined) => {\n  return key === undefined ? undefined : find(options, value => value.key === key);\n};\n\nconst useComponentRef = (\n  options: IChoiceGroupOption[],\n  keyChecked: string | number | undefined,\n  id: string,\n  componentRef?: IRefObject<IChoiceGroup>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      get checkedOption() {\n        return findOption(options, keyChecked);\n      },\n      focus() {\n        const optionToFocus = findOption(options, keyChecked) || options.filter(option => !option.disabled)[0];\n        const elementToFocus = optionToFocus && document.getElementById(getOptionId(optionToFocus, id));\n\n        if (elementToFocus) {\n          elementToFocus.focus();\n          setFocusVisibility(true, elementToFocus as Element);\n        }\n      },\n    }),\n    [options, keyChecked, id],\n  );\n};\n\nconst COMPONENT_NAME = 'ChoiceGroup';\n\nexport const ChoiceGroupBase: React.FunctionComponent<IChoiceGroupProps> = React.forwardRef<\n  HTMLDivElement,\n  IChoiceGroupProps\n>((props, forwardedRef) => {\n  const {\n    className,\n    theme,\n    styles,\n    options = [],\n    label,\n    required,\n    disabled,\n    name,\n    defaultSelectedKey,\n    componentRef,\n    onChange,\n  } = props;\n  const id = useId('ChoiceGroup');\n  const labelId = useId('ChoiceGroupLabel');\n\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n    'onChange',\n    'className',\n    'required',\n  ]);\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    className,\n    optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc)),\n  });\n\n  const ariaLabelledBy = props.ariaLabelledBy || (label ? labelId : props['aria-labelledby']);\n\n  const [keyChecked, setKeyChecked] = useControllableValue(props.selectedKey, defaultSelectedKey);\n  const [keyFocused, setKeyFocused] = React.useState<string | number>();\n\n  useDebugWarnings(props);\n  useComponentRef(options, keyChecked, id, componentRef);\n\n  const onFocus = React.useCallback((ev?: React.FocusEvent<HTMLElement>, option?: IChoiceGroupOptionProps) => {\n    if (option) {\n      setKeyFocused(option.itemKey);\n      option.onFocus?.(ev);\n    }\n  }, []);\n\n  const onBlur = React.useCallback((ev: React.FocusEvent<HTMLElement>, option?: IChoiceGroupOptionProps) => {\n    setKeyFocused(undefined);\n    option?.onBlur?.(ev);\n  }, []);\n\n  const onOptionChange = React.useCallback(\n    (evt?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOptionProps) => {\n      if (!option) {\n        return;\n      }\n      setKeyChecked(option.itemKey);\n\n      option.onChange?.(evt);\n      onChange?.(evt, findOption(options, option.itemKey));\n    },\n    [onChange, options, setKeyChecked],\n  );\n\n  return (\n    <div className={classNames.root} {...divProps} ref={forwardedRef}>\n      <div role=\"radiogroup\" {...(ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy })}>\n        {label && (\n          <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n            {label}\n          </Label>\n        )}\n        <div className={classNames.flexContainer}>\n          {options.map((option: IChoiceGroupOption) => {\n            return (\n              <ChoiceGroupOption\n                key={option.key}\n                itemKey={option.key}\n                {...option}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                onChange={onOptionChange}\n                focused={option.key === keyFocused}\n                checked={option.key === keyChecked}\n                disabled={option.disabled || disabled}\n                id={getOptionId(option, id)}\n                labelId={option.labelId || `${labelId}-${option.key}`}\n                name={name || id}\n                required={required}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\nChoiceGroupBase.displayName = COMPONENT_NAME;\n\nfunction useDebugWarnings(props: IChoiceGroupProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: {\n        selectedKey: 'defaultSelectedKey',\n      },\n    });\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}