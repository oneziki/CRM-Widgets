{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n\n      if (!ev.defaultPrevented) {\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme); // eslint-disable-next-line deprecation/deprecation\n\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n          onToggleSelectGroup = _a.onToggleSelectGroup,\n          group = _a.group;\n\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick,\n          onToggleSelectGroup = _a.onToggleSelectGroup;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group,\n          ariaColSpan = props.ariaColSpan;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        role: \"gridcell\",\n        \"aria-colspan\": ariaColSpan\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n\n    return previousState;\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        _b = _a.groupLevel,\n        groupLevel = _b === void 0 ? 0 : _b,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // eslint-disable-next-line deprecation/deprecation\n    _c = _a.isSelected,\n        // eslint-disable-next-line deprecation/deprecation\n    isSelected = _c === void 0 ? false : _c,\n        _d = _a.selected,\n        selected = _d === void 0 ? false : _d,\n        indentWidth = _a.indentWidth,\n        _e = _a.onRenderTitle,\n        onRenderTitle = _e === void 0 ? this._onRenderTitle : _e,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _f = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _f === void 0 ? true : _f,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        compact = _a.compact,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        ariaRowIndex = _a.ariaRowIndex,\n        useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _g = this.state,\n        isCollapsed = _g.isCollapsed,\n        isLoadingVisible = _g.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      role: \"row\",\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-rowindex\": ariaRowIndex,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"aria-level\": groupLevel + 1\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      id: this._id + \"-check\",\n      \"aria-checked\": currentlySelected,\n      \"aria-labelledby\": this._id + \"-check \" + this._id,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) : // To make the group header align properly with the column headers, this spacer\n    // needs to be the same width as the check cell in the column header.\n    selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: CHECK_CELL_WIDTH,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}