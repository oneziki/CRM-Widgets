{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\n\nexport var useUnmount = function (callback) {\n  var unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(function () {\n    return function () {\n      var _a;\n\n      (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);\n    };\n  }, []);\n};","map":{"version":3,"sources":["useUnmount.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA;;;;AAIG;;AACH,OAAO,IAAM,UAAU,GAAG,UAAC,QAAD,EAAqB;AAC7C,MAAM,UAAU,GAAG,KAAK,CAAC,MAAN,CAAa,QAAb,CAAnB;AACA,EAAA,UAAU,CAAC,OAAX,GAAqB,QAArB;AACA,EAAA,KAAK,CAAC,SAAN,CACE,YAAA;AAAM,WAAA,YAAA;;;AACJ,OAAA,EAAA,GAAA,UAAU,CAAC,OAAX,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAA,IAAA,CAAlB,UAAkB,CAAlB;AADI,KAAA;AAEL,GAHH,EAIE,EAJF;AAMD,CATM","sourcesContent":["import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}