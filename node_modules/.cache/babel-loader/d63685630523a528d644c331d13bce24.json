{"ast":null,"code":"import { Stylesheet, mergeCssSets, fontFace as mergeFontFace, keyframes as mergeKeyframes } from '@fluentui/merge-styles';\nvar _seed = 0;\nexport var mergeStylesRenderer = {\n  reset: function () {\n    // If the stylesheet reset call is made, invalidate the cache keys.\n    Stylesheet.getInstance().onReset(function () {\n      return _seed++;\n    });\n  },\n  getId: function () {\n    return _seed;\n  },\n  renderStyles: function (styleSet, options) {\n    return mergeCssSets(Array.isArray(styleSet) ? styleSet : [styleSet], options);\n  },\n  renderFontFace: function (fontFace, options) {\n    return mergeFontFace(fontFace);\n  },\n  renderKeyframes: function (keyframes) {\n    return mergeKeyframes(keyframes);\n  }\n};","map":{"version":3,"sources":["utilities/ThemeProvider/styleRenderers/mergeStylesRenderer.tsx"],"names":[],"mappings":"AACA,SACE,UADF,EAEE,YAFF,EAGE,QAAQ,IAAI,aAHd,EAIE,SAAS,IAAI,cAJf,QAKO,wBALP;AAOA,IAAI,KAAK,GAAG,CAAZ;AAEA,OAAO,IAAM,mBAAmB,GAAkB;AAChD,EAAA,KAAK,EAAE,YAAA;AACL;AACA,IAAA,UAAU,CAAC,WAAX,GAAyB,OAAzB,CAAiC,YAAA;AAAM,aAAA,KAAA,EAAA;AAAO,KAA9C;AACD,GAJ+C;AAMhD,EAAA,KAAK,EAAE,YAAA;AAAM,WAAA,KAAA;AAAK,GAN8B;AAQhD,EAAA,YAAY,EAAE,UAAC,QAAD,EAAW,OAAX,EAAkB;AAC9B,WAAO,YAAY,CAAE,KAAK,CAAC,OAAN,CAAc,QAAd,IAA0B,QAA1B,GAAqC,CAAC,QAAD,CAAvC,EAA2D,OAA3D,CAAnB;AACD,GAV+C;AAYhD,EAAA,cAAc,EAAE,UAAC,QAAD,EAAW,OAAX,EAAkB;AAChC,WAAO,aAAa,CAAC,QAAD,CAApB;AACD,GAd+C;AAgBhD,EAAA,eAAe,EAAE,UAAA,SAAA,EAAS;AACxB,WAAO,cAAc,CAAC,SAAD,CAArB;AACD;AAlB+C,CAA3C","sourcesContent":["import { StyleRenderer } from './types';\nimport {\n  Stylesheet,\n  mergeCssSets,\n  fontFace as mergeFontFace,\n  keyframes as mergeKeyframes,\n} from '@fluentui/merge-styles';\n\nlet _seed = 0;\n\nexport const mergeStylesRenderer: StyleRenderer = {\n  reset: () => {\n    // If the stylesheet reset call is made, invalidate the cache keys.\n    Stylesheet.getInstance().onReset(() => _seed++);\n  },\n\n  getId: () => _seed,\n\n  renderStyles: (styleSet, options) => {\n    return mergeCssSets((Array.isArray(styleSet) ? styleSet : [styleSet]) as any, options) as any;\n  },\n\n  renderFontFace: (fontFace, options) => {\n    return mergeFontFace(fontFace);\n  },\n\n  renderKeyframes: keyframes => {\n    return mergeKeyframes(keyframes as any);\n  },\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}