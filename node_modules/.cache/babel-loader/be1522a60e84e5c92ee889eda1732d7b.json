{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { Image } from '../Image/Image';\nimport { css, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { classNames, MS_ICON } from './Icon.styles';\n/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\n\nexport var ImageIcon = function (props) {\n  var className = props.className,\n      imageProps = props.imageProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties, ['aria-label', 'aria-labelledby', 'title', 'aria-describedby']);\n  var altText = imageProps.alt || props['aria-label'];\n  var hasName = altText || props['aria-labelledby'] || props.title || imageProps['aria-label'] || imageProps['aria-labelledby'] || imageProps.title; // move naming or describing attributes from the container (where they are invalid) to the image\n\n  var imageNameProps = {\n    'aria-labelledby': props['aria-labelledby'],\n    'aria-describedby': props['aria-describedby'],\n    title: props.title\n  };\n  var containerProps = hasName ? {} : {\n    'aria-hidden': true\n  };\n  return React.createElement(\"div\", __assign({}, containerProps, nativeProps, {\n    className: css(MS_ICON, classNames.root, classNames.image, className)\n  }), React.createElement(Image, __assign({}, imageNameProps, imageProps, {\n    alt: hasName ? altText : ''\n  })));\n};","map":{"version":3,"sources":["components/Icon/ImageIcon.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAS,KAAT,QAAsB,gBAAtB;AACA,SAAS,GAAT,EAAc,cAAd,EAA8B,qBAA9B,QAA2D,iBAA3D;AACA,SAAS,UAAT,EAAqB,OAArB,QAAoC,eAApC;AAEA;;;;AAIG;;AACH,OAAO,IAAM,SAAS,GAA6C,UAAA,KAAA,EAAK;AAC9D,MAAA,SAAA,GAAA,KAAA,CAAA,SAAA;AAAA,MAAW,UAAA,GAAA,KAAA,CAAA,UAAX;AAER,MAAM,WAAW,GAAG,cAAc,CAAuC,KAAvC,EAA8C,qBAA9C,EAAqE,CACrG,YADqG,EAErG,iBAFqG,EAGrG,OAHqG,EAIrG,kBAJqG,CAArE,CAAlC;AAMA,MAAM,OAAO,GAAG,UAAU,CAAC,GAAX,IAAkB,KAAK,CAAC,YAAD,CAAvC;AACA,MAAM,OAAO,GACX,OAAO,IACP,KAAK,CAAC,iBAAD,CADL,IAEA,KAAK,CAAC,KAFN,IAGA,UAAU,CAAC,YAAD,CAHV,IAIA,UAAU,CAAC,iBAAD,CAJV,IAKA,UAAU,CAAC,KANb,CAVsE,CAkBtE;;AACA,MAAM,cAAc,GAAG;AACrB,uBAAmB,KAAK,CAAC,iBAAD,CADH;AAErB,wBAAoB,KAAK,CAAC,kBAAD,CAFJ;AAGrB,IAAA,KAAK,EAAE,KAAK,CAAC;AAHQ,GAAvB;AAMA,MAAM,cAAc,GAAG,OAAO,GAC1B,EAD0B,GAE1B;AACE,mBAAe;AADjB,GAFJ;AAMA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAS,cAAT,EAA6B,WAA7B,EAAwC;AAAE,IAAA,SAAS,EAAE,GAAG,CAAC,OAAD,EAAU,UAAU,CAAC,IAArB,EAA2B,UAAU,CAAC,KAAtC,EAA6C,SAA7C;AAAhB,GAAxC,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM,QAAA,CAAA,EAAA,EAAK,cAAL,EAAyB,UAAzB,EAAmC;AAAE,IAAA,GAAG,EAAE,OAAO,GAAG,OAAH,GAAa;AAA3B,GAAnC,CAAN,CADF,CADF;AAKD,CApCM","sourcesContent":["import * as React from 'react';\n\nimport { IImageIconProps } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { css, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { classNames, MS_ICON } from './Icon.styles';\n\n/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const ImageIcon: React.FunctionComponent<IImageIconProps> = props => {\n  const { className, imageProps } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, htmlElementProperties, [\n    'aria-label',\n    'aria-labelledby',\n    'title',\n    'aria-describedby',\n  ]);\n  const altText = imageProps.alt || props['aria-label'];\n  const hasName =\n    altText ||\n    props['aria-labelledby'] ||\n    props.title ||\n    imageProps['aria-label'] ||\n    imageProps['aria-labelledby'] ||\n    imageProps.title;\n\n  // move naming or describing attributes from the container (where they are invalid) to the image\n  const imageNameProps = {\n    'aria-labelledby': props['aria-labelledby'],\n    'aria-describedby': props['aria-describedby'],\n    title: props.title,\n  };\n\n  const containerProps = hasName\n    ? {}\n    : {\n        'aria-hidden': true,\n      };\n\n  return (\n    <div {...containerProps} {...nativeProps} className={css(MS_ICON, classNames.root, classNames.image, className)}>\n      <Image {...imageNameProps} {...imageProps} alt={hasName ? altText : ''} />\n    </div>\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}