{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, classNamesFunction, divProperties, findIndex, getDocument, getFirstFocusable, getId, getLastFocusable, getNativeProps, initializeComponentRef, isIOS, isMac, mergeAriaAttributeValues, safeRequestAnimationFrame, warn, warnDeprecations, warnMutuallyExclusive } from '../../Utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { CommandButton } from '../../Button';\nimport { DropdownMenuItemType } from './Dropdown.types';\nimport { DropdownSizePosCache } from './utilities/DropdownSizePosCache';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { Label } from '../../Label';\nimport { Panel } from '../../Panel';\nimport { ResponsiveMode, useResponsiveMode } from '../../ResponsiveMode';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../SelectableOption'; // import and use V7 Checkbox to ensure no breaking changes.\n\nimport { Checkbox } from '../../Checkbox';\nimport { getPropsWithDefaults } from '@fluentui/utilities';\nimport { useMergedRefs, usePrevious } from '@fluentui/react-hooks';\nvar COMPONENT_NAME = 'Dropdown';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_PROPS = {\n  options: []\n};\n\nfunction useSelectedItemsState(_a) {\n  var defaultSelectedKeys = _a.defaultSelectedKeys,\n      selectedKeys = _a.selectedKeys,\n      defaultSelectedKey = _a.defaultSelectedKey,\n      selectedKey = _a.selectedKey,\n      options = _a.options,\n      multiSelect = _a.multiSelect;\n  var oldOptions = usePrevious(options);\n\n  var _b = React.useState([]),\n      selectedIndices = _b[0],\n      setSelectedIndices = _b[1]; // In controlled component usage where selectedKey is provided, update the selectedIndex\n  // state if the key or options change.\n\n\n  var selectedKeyPropToUse; // this does a shallow compare (assumes options are pure), for the purposes of determining whether\n  // defaultSelectedKey/defaultSelectedKeys are respected.\n\n  var didOptionsChange = options !== oldOptions;\n\n  if (multiSelect) {\n    if (didOptionsChange && defaultSelectedKeys !== undefined) {\n      selectedKeyPropToUse = defaultSelectedKeys;\n    } else {\n      selectedKeyPropToUse = selectedKeys;\n    }\n  } else {\n    if (didOptionsChange && defaultSelectedKey !== undefined) {\n      selectedKeyPropToUse = defaultSelectedKey;\n    } else {\n      selectedKeyPropToUse = selectedKey;\n    }\n  }\n\n  var oldSelectedKeyProp = usePrevious(selectedKeyPropToUse);\n  React.useEffect(function () {\n    /** Get all selected indexes for multi-select mode */\n    var getSelectedIndexes = function () {\n      if (selectedKeyPropToUse === undefined) {\n        if (multiSelect) {\n          return getAllSelectedIndices();\n        }\n\n        var selectedIndex = getSelectedIndex(null);\n        return selectedIndex !== -1 ? [selectedIndex] : [];\n      } else if (!Array.isArray(selectedKeyPropToUse)) {\n        var selectedIndex = getSelectedIndex(selectedKeyPropToUse);\n        return selectedIndex !== -1 ? [selectedIndex] : [];\n      }\n\n      var returnValue = [];\n\n      for (var _i = 0, selectedKeyPropToUse_1 = selectedKeyPropToUse; _i < selectedKeyPropToUse_1.length; _i++) {\n        var key = selectedKeyPropToUse_1[_i];\n        var selectedIndex = getSelectedIndex(key);\n        selectedIndex !== -1 && returnValue.push(selectedIndex);\n      }\n\n      return returnValue;\n    };\n\n    var getAllSelectedIndices = function () {\n      return options.map(function (option, index) {\n        return option.selected ? index : -1;\n      }).filter(function (index) {\n        return index !== -1;\n      });\n    };\n\n    var getSelectedIndex = function (searchKey) {\n      return findIndex(options, function (option) {\n        // eslint-disable-next-line eqeqeq\n        if (searchKey != null) {\n          return option.key === searchKey;\n        } else {\n          // eslint-disable-next-line deprecation/deprecation\n          return !!option.selected || !!option.isSelected;\n        }\n      });\n    };\n\n    if ((selectedKeyPropToUse !== undefined || !oldOptions) && (selectedKeyPropToUse !== oldSelectedKeyProp || didOptionsChange)) {\n      setSelectedIndices(getSelectedIndexes());\n    }\n  }, [didOptionsChange, multiSelect, oldOptions, oldSelectedKeyProp, options, selectedKeyPropToUse]);\n  return [selectedIndices, setSelectedIndices];\n}\n\nexport var DropdownBase = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  var rootRef = React.useRef(null);\n  var mergedRootRef = useMergedRefs(forwardedRef, rootRef);\n  var responsiveMode = useResponsiveMode(rootRef);\n\n  var _a = useSelectedItemsState(props),\n      selectedIndices = _a[0],\n      setSelectedIndices = _a[1];\n\n  return React.createElement(DropdownInternal, __assign({}, props, {\n    responsiveMode: responsiveMode,\n    hoisted: {\n      rootRef: mergedRootRef,\n      selectedIndices: selectedIndices,\n      setSelectedIndices: setSelectedIndices\n    }\n  }));\n});\nDropdownBase.displayName = 'DropdownBase';\n\nvar DropdownInternal =\n/** @class */\nfunction (_super) {\n  __extends(DropdownInternal, _super);\n\n  function DropdownInternal(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._host = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._dropDown = React.createRef();\n    _this._scrollIdleDelay = 250\n    /* ms */\n    ;\n    _this._sizePosCache = new DropdownSizePosCache();\n    _this._requestAnimationFrame = safeRequestAnimationFrame(_this);\n\n    _this._onChange = function (event, options, index, checked, multiSelect) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          onChange = _a.onChange,\n          onChanged = _a.onChanged;\n\n      if (onChange || onChanged) {\n        // for single-select, option passed in will always be selected.\n        // for multi-select, flip the checked value\n        var changedOpt = multiSelect ? __assign(__assign({}, options[index]), {\n          selected: !checked\n        }) : options[index];\n        onChange && onChange(__assign(__assign({}, event), {\n          target: _this._dropDown.current\n        }), changedOpt, index);\n        onChanged && onChanged(changedOpt, index);\n      }\n    };\n    /** Get either props.placeholder (new name) or props.placeHolder (old name) */\n\n\n    _this._getPlaceholder = function () {\n      // eslint-disable-next-line deprecation/deprecation\n      return _this.props.placeholder || _this.props.placeHolder;\n    };\n    /** Get text in dropdown input as a string */\n\n\n    _this._getTitle = function (items, _unused) {\n      var _a = _this.props.multiSelectDelimiter,\n          multiSelectDelimiter = _a === void 0 ? ', ' : _a;\n      return items.map(function (i) {\n        return i.text;\n      }).join(multiSelectDelimiter);\n    };\n    /** Render text in dropdown input */\n\n\n    _this._onRenderTitle = function (items) {\n      return React.createElement(React.Fragment, null, _this._getTitle(items));\n    };\n    /** Render placeholder text in dropdown input */\n\n\n    _this._onRenderPlaceholder = function (props) {\n      if (!_this._getPlaceholder()) {\n        return null;\n      }\n\n      return React.createElement(React.Fragment, null, _this._getPlaceholder());\n    };\n    /** Render Callout or Panel container and pass in list */\n\n\n    _this._onRenderContainer = function (props) {\n      var calloutProps = props.calloutProps,\n          panelProps = props.panelProps;\n      var _a = _this.props,\n          responsiveMode = _a.responsiveMode,\n          dropdownWidth = _a.dropdownWidth;\n      var isSmall = responsiveMode <= ResponsiveMode.medium;\n      var panelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.panel : undefined;\n      var calloutWidth = undefined;\n      var calloutMinWidth = undefined;\n\n      if (dropdownWidth === 'auto') {\n        calloutMinWidth = _this._dropDown.current ? _this._dropDown.current.clientWidth : 0;\n      } else {\n        calloutWidth = dropdownWidth || (_this._dropDown.current ? _this._dropDown.current.clientWidth : 0);\n      }\n\n      return isSmall ? React.createElement(Panel, __assign({\n        isOpen: true,\n        isLightDismiss: true,\n        onDismiss: _this._onDismiss,\n        hasCloseButton: false,\n        styles: panelStyles\n      }, panelProps), _this._renderFocusableList(props)) : React.createElement(Callout, __assign({\n        isBeakVisible: false,\n        gapSpace: 0,\n        doNotLayer: false,\n        directionalHintFixed: false,\n        directionalHint: DirectionalHint.bottomLeftEdge,\n        calloutWidth: calloutWidth,\n        calloutMinWidth: calloutMinWidth\n      }, calloutProps, {\n        className: _this._classNames.callout,\n        target: _this._dropDown.current,\n        onDismiss: _this._onDismiss,\n        onScroll: _this._onScroll,\n        onPositioned: _this._onPositioned\n      }), _this._renderFocusableList(props));\n    };\n    /** Render Caret Down Icon */\n\n\n    _this._onRenderCaretDown = function (props) {\n      return React.createElement(Icon, {\n        className: _this._classNames.caretDown,\n        iconName: \"ChevronDown\",\n        \"aria-hidden\": true\n      });\n    };\n    /** Render List of items */\n\n\n    _this._onRenderList = function (props) {\n      var _a = props.onRenderItem,\n          onRenderItem = _a === void 0 ? _this._onRenderItem : _a;\n      var queue = {\n        items: []\n      };\n      var renderedList = [];\n\n      var emptyQueue = function () {\n        var newGroup = queue.id ? [React.createElement(\"div\", {\n          role: \"group\",\n          key: queue.id,\n          \"aria-labelledby\": queue.id\n        }, queue.items)] : queue.items;\n        renderedList = __spreadArrays(renderedList, newGroup); // Flush items and id\n\n        queue = {\n          items: []\n        };\n      };\n\n      var placeRenderedOptionIntoQueue = function (item, index) {\n        /*\n          Case Header\n            empty queue if it's not already empty\n            ensure unique ID for header and set queue ID\n            push header into queue\n          Case Divider\n            push divider into queue if not first item\n            empty queue if not already empty\n          Default\n            push item into queue\n        */\n        switch (item.itemType) {\n          case SelectableOptionMenuItemType.Header:\n            queue.items.length > 0 && emptyQueue();\n            var id = _this._id + item.key;\n            queue.items.push(onRenderItem(__assign(__assign({\n              id: id\n            }, item), {\n              index: index\n            }), _this._onRenderItem));\n            queue.id = id;\n            break;\n\n          case SelectableOptionMenuItemType.Divider:\n            index > 0 && queue.items.push(onRenderItem(__assign(__assign({}, item), {\n              index: index\n            }), _this._onRenderItem));\n            queue.items.length > 0 && emptyQueue();\n            break;\n\n          default:\n            queue.items.push(onRenderItem(__assign(__assign({}, item), {\n              index: index\n            }), _this._onRenderItem));\n        }\n      }; // Place options into the queue. Queue will be emptied anytime a Header or Divider is encountered\n\n\n      props.options.forEach(function (item, index) {\n        placeRenderedOptionIntoQueue(item, index);\n      }); // Push remaining items into all renderedList\n\n      queue.items.length > 0 && emptyQueue();\n      return React.createElement(React.Fragment, null, renderedList);\n    };\n\n    _this._onRenderItem = function (item) {\n      switch (item.itemType) {\n        case SelectableOptionMenuItemType.Divider:\n          return _this._renderSeparator(item);\n\n        case SelectableOptionMenuItemType.Header:\n          return _this._renderHeader(item);\n\n        default:\n          return _this._renderOption(item);\n      }\n    };\n\n    _this._renderOption = function (item) {\n      var _a = _this.props,\n          _b = _a.onRenderOption,\n          onRenderOption = _b === void 0 ? _this._onRenderOption : _b,\n          _c = _a.hoisted.selectedIndices,\n          selectedIndices = _c === void 0 ? [] : _c;\n      var isItemSelected = item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false; // select the right className based on the combination of selected/disabled\n\n      var itemClassName = item.hidden // predicate: item hidden\n      ? _this._classNames.dropdownItemHidden : isItemSelected && item.disabled === true // predicate: both selected and disabled\n      ? _this._classNames.dropdownItemSelectedAndDisabled : isItemSelected // predicate: selected only\n      ? _this._classNames.dropdownItemSelected : item.disabled === true // predicate: disabled only\n      ? _this._classNames.dropdownItemDisabled : _this._classNames.dropdownItem;\n      var _d = item.title,\n          title = _d === void 0 ? item.text : _d;\n      var multiSelectItemStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.multiSelectItem : undefined;\n      return !_this.props.multiSelect ? React.createElement(CommandButton, {\n        id: _this._listId + item.index,\n        key: item.key,\n        \"data-index\": item.index,\n        \"data-is-focusable\": !item.disabled,\n        disabled: item.disabled,\n        className: itemClassName,\n        onClick: _this._onItemClick(item),\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseEnter: _this._onItemMouseEnter.bind(_this, item),\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseLeave: _this._onMouseItemLeave.bind(_this, item),\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseMove: _this._onItemMouseMove.bind(_this, item),\n        role: \"option\",\n        \"aria-selected\": isItemSelected ? 'true' : 'false',\n        ariaLabel: item.ariaLabel,\n        title: title,\n        \"aria-posinset\": _this._sizePosCache.positionInSet(item.index),\n        \"aria-setsize\": _this._sizePosCache.optionSetSize\n      }, onRenderOption(item, _this._onRenderOption)) : React.createElement(Checkbox, {\n        id: _this._listId + item.index,\n        key: item.key,\n        disabled: item.disabled,\n        onChange: _this._onItemClick(item),\n        inputProps: __assign({\n          'aria-selected': isItemSelected,\n          onMouseEnter: _this._onItemMouseEnter.bind(_this, item),\n          onMouseLeave: _this._onMouseItemLeave.bind(_this, item),\n          onMouseMove: _this._onItemMouseMove.bind(_this, item),\n          role: 'option'\n        }, {\n          'data-index': item.index,\n          'data-is-focusable': !item.disabled\n        }),\n        label: item.text,\n        title: title,\n        // eslint-disable-next-line react/jsx-no-bind\n        onRenderLabel: _this._onRenderItemLabel.bind(_this, item),\n        className: itemClassName,\n        checked: isItemSelected,\n        styles: multiSelectItemStyles,\n        ariaPositionInSet: _this._sizePosCache.positionInSet(item.index),\n        ariaSetSize: _this._sizePosCache.optionSetSize\n      });\n    };\n    /** Render content of item (i.e. text/icon inside of button) */\n\n\n    _this._onRenderOption = function (item) {\n      return React.createElement(\"span\", {\n        className: _this._classNames.dropdownOptionText\n      }, item.text);\n    };\n    /** Render custom label for drop down item */\n\n\n    _this._onRenderItemLabel = function (item) {\n      var _a = _this.props.onRenderOption,\n          onRenderOption = _a === void 0 ? _this._onRenderOption : _a;\n      return onRenderOption(item, _this._onRenderOption);\n    };\n\n    _this._onPositioned = function (positions) {\n      if (_this._focusZone.current) {\n        // Focusing an element can trigger a reflow. Making this wait until there is an animation\n        // frame can improve perf significantly.\n        _this._requestAnimationFrame(function () {\n          var selectedIndices = _this.props.hoisted.selectedIndices;\n\n          if (_this._focusZone.current) {\n            if (selectedIndices && selectedIndices[0] && !_this.props.options[selectedIndices[0]].disabled) {\n              var element = getDocument().getElementById(_this._id + \"-list\" + selectedIndices[0]);\n\n              if (element) {\n                _this._focusZone.current.focusElement(element);\n              }\n            } else {\n              _this._focusZone.current.focus();\n            }\n          }\n        });\n      }\n\n      if (!_this.state.calloutRenderEdge || _this.state.calloutRenderEdge !== positions.targetEdge) {\n        _this.setState({\n          calloutRenderEdge: positions.targetEdge\n        });\n      }\n    };\n\n    _this._onItemClick = function (item) {\n      return function (event) {\n        if (!item.disabled) {\n          _this.setSelectedIndex(event, item.index);\n\n          if (!_this.props.multiSelect) {\n            // only close the callout when it's in single-select mode\n            _this.setState({\n              isOpen: false\n            });\n          }\n        }\n      };\n    };\n    /**\n     * Scroll handler for the callout to make sure the mouse events\n     * for updating focus are not interacting during scroll\n     */\n\n\n    _this._onScroll = function () {\n      if (!_this._isScrollIdle && _this._scrollIdleTimeoutId !== undefined) {\n        clearTimeout(_this._scrollIdleTimeoutId);\n        _this._scrollIdleTimeoutId = undefined;\n      } else {\n        _this._isScrollIdle = false;\n      }\n\n      _this._scrollIdleTimeoutId = window.setTimeout(function () {\n        _this._isScrollIdle = true;\n      }, _this._scrollIdleDelay);\n    };\n\n    _this._onMouseItemLeave = function (item, ev) {\n      if (_this._shouldIgnoreMouseEvent()) {\n        return;\n      }\n      /**\n       * IE11 focus() method forces parents to scroll to top of element.\n       * Edge and IE expose a setActive() function for focusable divs that\n       * sets the page focus but does not scroll the parent element.\n       */\n\n\n      if (_this._host.current) {\n        if (_this._host.current.setActive) {\n          try {\n            _this._host.current.setActive();\n          } catch (e) {\n            /* no-op */\n          }\n        } else {\n          _this._host.current.focus();\n        }\n      }\n    };\n\n    _this._onDismiss = function () {\n      _this.setState({\n        isOpen: false\n      });\n    };\n\n    _this._onDropdownBlur = function (ev) {\n      // If Dropdown disabled do not proceed with this logic.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      } // hasFocus tracks whether the root element has focus so always update the state.\n\n\n      _this.setState({\n        hasFocus: false\n      });\n\n      if (_this.state.isOpen) {\n        // Do not onBlur when the callout is opened\n        return;\n      }\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n    };\n\n    _this._onDropdownKeyDown = function (ev) {\n      // If Dropdown disabled do not process any keyboard events.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      } // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _shouldHandleKeyUp for reasoning.\n\n\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(ev);\n\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n\n      var newIndex;\n      var selectedIndex = _this.props.hoisted.selectedIndices.length ? _this.props.hoisted.selectedIndices[0] : -1;\n      var containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n      var isOpen = _this.state.isOpen; // eslint-disable-next-line deprecation/deprecation\n\n      switch (ev.which) {\n        case KeyCodes.enter:\n          _this.setState({\n            isOpen: !isOpen\n          });\n\n          break;\n\n        case KeyCodes.escape:\n          if (!isOpen) {\n            return;\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n\n          break;\n\n        case KeyCodes.up:\n          if (containsExpandCollapseModifier) {\n            if (isOpen) {\n              _this.setState({\n                isOpen: false\n              });\n\n              break;\n            }\n\n            return;\n          }\n\n          if (_this.props.multiSelect) {\n            _this.setState({\n              isOpen: true\n            });\n          } else if (!_this._isDisabled()) {\n            newIndex = _this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);\n          }\n\n          break;\n\n        case KeyCodes.down:\n          if (containsExpandCollapseModifier) {\n            ev.stopPropagation();\n            ev.preventDefault();\n          }\n\n          if (containsExpandCollapseModifier && !isOpen || _this.props.multiSelect) {\n            _this.setState({\n              isOpen: true\n            });\n          } else if (!_this._isDisabled()) {\n            newIndex = _this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);\n          }\n\n          break;\n\n        case KeyCodes.home:\n          if (!_this.props.multiSelect) {\n            newIndex = _this._moveIndex(ev, 1, 0, selectedIndex);\n          }\n\n          break;\n\n        case KeyCodes.end:\n          if (!_this.props.multiSelect) {\n            newIndex = _this._moveIndex(ev, -1, _this.props.options.length - 1, selectedIndex);\n          }\n\n          break;\n\n        case KeyCodes.space:\n          // event handled in _onDropdownKeyUp\n          break;\n\n        default:\n          return;\n      }\n\n      if (newIndex !== selectedIndex) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    };\n\n    _this._onDropdownKeyUp = function (ev) {\n      // If Dropdown disabled do not process any keyboard events.\n      var disabled = _this._isDisabled();\n\n      if (disabled) {\n        return;\n      }\n\n      var shouldHandleKey = _this._shouldHandleKeyUp(ev);\n\n      var isOpen = _this.state.isOpen;\n\n      if (_this.props.onKeyUp) {\n        _this.props.onKeyUp(ev);\n\n        if (ev.defaultPrevented) {\n          return;\n        }\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      switch (ev.which) {\n        case KeyCodes.space:\n          _this.setState({\n            isOpen: !isOpen\n          });\n\n          break;\n\n        default:\n          if (shouldHandleKey && isOpen) {\n            _this.setState({\n              isOpen: false\n            });\n          }\n\n          return;\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onZoneKeyDown = function (ev) {\n      var elementToFocus; // Take note if we are processing an alt (option) or meta (command) keydown.\n      // See comment in _shouldHandleKeyUp for reasoning.\n\n      _this._lastKeyDownWasAltOrMeta = _this._isAltOrMeta(ev);\n      var containsExpandCollapseModifier = ev.altKey || ev.metaKey; // eslint-disable-next-line deprecation/deprecation\n\n      switch (ev.which) {\n        case KeyCodes.up:\n          if (containsExpandCollapseModifier) {\n            _this.setState({\n              isOpen: false\n            });\n          } else {\n            if (_this._host.current) {\n              elementToFocus = getLastFocusable(_this._host.current, _this._host.current.lastChild, true);\n            }\n          }\n\n          break;\n        // All directional keystrokes should be canceled when the zone is rendered.\n        // This avoids the body scroll from reacting and thus dismissing the dropdown.\n\n        case KeyCodes.home:\n        case KeyCodes.end:\n        case KeyCodes.pageUp:\n        case KeyCodes.pageDown:\n          break;\n\n        case KeyCodes.down:\n          if (!containsExpandCollapseModifier && _this._host.current) {\n            elementToFocus = getFirstFocusable(_this._host.current, _this._host.current.firstChild, true);\n          }\n\n          break;\n\n        case KeyCodes.escape:\n          _this.setState({\n            isOpen: false\n          });\n\n          break;\n\n        case KeyCodes.tab:\n          _this.setState({\n            isOpen: false\n          });\n\n          return;\n\n        default:\n          return;\n      }\n\n      if (elementToFocus) {\n        elementToFocus.focus();\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onZoneKeyUp = function (ev) {\n      var shouldHandleKey = _this._shouldHandleKeyUp(ev);\n\n      if (shouldHandleKey && _this.state.isOpen) {\n        _this.setState({\n          isOpen: false\n        });\n\n        ev.preventDefault();\n      }\n    };\n\n    _this._onDropdownClick = function (ev) {\n      if (_this.props.onClick) {\n        _this.props.onClick(ev);\n\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n\n      var isOpen = _this.state.isOpen;\n\n      var disabled = _this._isDisabled();\n\n      if (!disabled && !_this._shouldOpenOnFocus()) {\n        _this.setState({\n          isOpen: !isOpen\n        });\n      }\n\n      _this._isFocusedByClick = false; // reset\n    };\n\n    _this._onDropdownMouseDown = function () {\n      _this._isFocusedByClick = true;\n    };\n\n    _this._onFocus = function (ev) {\n      var disabled = _this._isDisabled();\n\n      if (!disabled) {\n        if (_this.props.onFocus) {\n          _this.props.onFocus(ev);\n        }\n\n        var state = {\n          hasFocus: true\n        };\n\n        if (_this._shouldOpenOnFocus()) {\n          state.isOpen = true;\n        }\n\n        _this.setState(state);\n      }\n    };\n    /**\n     * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\n     * This helper method avoids all the repetition.\n     */\n\n\n    _this._isDisabled = function () {\n      var disabled = _this.props.disabled; // eslint-disable-next-line deprecation/deprecation\n\n      var isDisabled = _this.props.isDisabled; // Remove this deprecation workaround at 1.0.0\n\n      if (disabled === undefined) {\n        disabled = isDisabled;\n      }\n\n      return disabled;\n    };\n\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n          required = props.required,\n          disabled = props.disabled;\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n      return label ? React.createElement(Label, {\n        className: _this._classNames.label,\n        id: _this._labelId,\n        required: required,\n        styles: labelStyles,\n        disabled: disabled\n      }, label) : null;\n    };\n\n    initializeComponentRef(_this);\n    var multiSelect = props.multiSelect,\n        selectedKey = props.selectedKey,\n        selectedKeys = props.selectedKeys,\n        defaultSelectedKey = props.defaultSelectedKey,\n        defaultSelectedKeys = props.defaultSelectedKeys,\n        options = props.options;\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(COMPONENT_NAME, props, {\n        isDisabled: 'disabled',\n        onChanged: 'onChange',\n        placeHolder: 'placeholder',\n        onRenderPlaceHolder: 'onRenderPlaceholder'\n      });\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        defaultSelectedKey: 'selectedKey',\n        defaultSelectedKeys: 'selectedKeys',\n        selectedKeys: 'selectedKey'\n      });\n\n      if (multiSelect) {\n        var warnMultiSelect = function (prop) {\n          return warn(\"Dropdown property '\" + prop + \"' cannot be used when 'multiSelect' is true. Use '\" + prop + \"s' instead.\");\n        };\n\n        if (selectedKey !== undefined) {\n          warnMultiSelect('selectedKey');\n        }\n\n        if (defaultSelectedKey !== undefined) {\n          warnMultiSelect('defaultSelectedKey');\n        }\n      } else {\n        var warnNotMultiSelect = function (prop) {\n          return warn(\"Dropdown property '\" + prop + \"s' cannot be used when 'multiSelect' is false/unset. Use '\" + prop + \"' instead.\");\n        };\n\n        if (selectedKeys !== undefined) {\n          warnNotMultiSelect('selectedKey');\n        }\n\n        if (defaultSelectedKeys !== undefined) {\n          warnNotMultiSelect('defaultSelectedKey');\n        }\n      }\n    }\n\n    _this._id = props.id || getId('Dropdown');\n    _this._labelId = _this._id + '-label';\n    _this._listId = _this._id + '-list';\n    _this._optionId = _this._id + '-option';\n    _this._isScrollIdle = true;\n\n    _this._sizePosCache.updateOptions(options);\n\n    _this.state = {\n      isOpen: false,\n      hasFocus: false,\n      calloutRenderEdge: undefined\n    };\n    return _this;\n  }\n\n  Object.defineProperty(DropdownInternal.prototype, \"selectedOptions\", {\n    /**\n     * All selected options\n     */\n    get: function () {\n      var _a = this.props,\n          options = _a.options,\n          selectedIndices = _a.hoisted.selectedIndices;\n      return getAllSelectedOptions(options, selectedIndices);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DropdownInternal.prototype.componentWillUnmount = function () {\n    clearTimeout(this._scrollIdleTimeoutId);\n  };\n\n  DropdownInternal.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (prevState.isOpen === true && this.state.isOpen === false) {\n      this._gotMouseMove = false;\n\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    }\n  };\n\n  DropdownInternal.prototype.render = function () {\n    var id = this._id;\n    var props = this.props;\n    var className = props.className,\n        label = props.label,\n        options = props.options,\n        ariaLabel = props.ariaLabel,\n        required = props.required,\n        errorMessage = props.errorMessage,\n        propStyles = props.styles,\n        theme = props.theme,\n        panelProps = props.panelProps,\n        calloutProps = props.calloutProps,\n        _a = props.onRenderTitle,\n        onRenderTitle = _a === void 0 ? this._getTitle : _a,\n        _b = props.onRenderContainer,\n        onRenderContainer = _b === void 0 ? this._onRenderContainer : _b,\n        _c = props.onRenderCaretDown,\n        onRenderCaretDown = _c === void 0 ? this._onRenderCaretDown : _c,\n        _d = props.onRenderLabel,\n        onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n        selectedIndices = props.hoisted.selectedIndices;\n    var _e = this.state,\n        isOpen = _e.isOpen,\n        calloutRenderEdge = _e.calloutRenderEdge; // eslint-disable-next-line deprecation/deprecation\n\n    var onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._getPlaceholder; // If our cached options are out of date update our cache\n\n    if (options !== this._sizePosCache.cachedOptions) {\n      this._sizePosCache.updateOptions(options);\n    }\n\n    var selectedOptions = getAllSelectedOptions(options, selectedIndices);\n    var divProps = getNativeProps(props, divProperties);\n\n    var disabled = this._isDisabled();\n\n    var errorMessageId = id + '-errorMessage';\n    var ariaActiveDescendant = disabled ? undefined : isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0 ? this._listId + selectedIndices[0] : undefined;\n    this._classNames = getClassNames(propStyles, {\n      theme: theme,\n      className: className,\n      hasError: !!(errorMessage && errorMessage.length > 0),\n      hasLabel: !!label,\n      isOpen: isOpen,\n      required: required,\n      disabled: disabled,\n      isRenderingPlaceholder: !selectedOptions.length,\n      panelClassName: panelProps ? panelProps.className : undefined,\n      calloutClassName: calloutProps ? calloutProps.className : undefined,\n      calloutRenderEdge: calloutRenderEdge\n    });\n    var hasErrorMessage = !!errorMessage && errorMessage.length > 0;\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      ref: this.props.hoisted.rootRef\n    }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", __assign({\n      \"data-is-focusable\": !disabled,\n      \"data-ktp-target\": true,\n      ref: this._dropDown,\n      id: id,\n      tabIndex: disabled ? -1 : 0,\n      role: \"combobox\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": isOpen ? 'true' : 'false',\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": label && !ariaLabel ? mergeAriaAttributeValues(this._labelId, this._optionId) : undefined,\n      \"aria-describedby\": hasErrorMessage ? this._id + '-errorMessage' : undefined,\n      \"aria-activedescendant\": ariaActiveDescendant,\n      \"aria-required\": required,\n      \"aria-disabled\": disabled,\n      \"aria-controls\": isOpen ? this._listId : undefined\n    }, divProps, {\n      className: this._classNames.dropdown,\n      onBlur: this._onDropdownBlur,\n      onKeyDown: this._onDropdownKeyDown,\n      onKeyUp: this._onDropdownKeyUp,\n      onClick: this._onDropdownClick,\n      onMouseDown: this._onDropdownMouseDown,\n      onFocus: this._onFocus\n    }), React.createElement(\"span\", {\n      id: this._optionId,\n      className: this._classNames.title,\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": true,\n      \"aria-invalid\": hasErrorMessage\n    }, // If option is selected render title, otherwise render the placeholder text\n    selectedOptions.length ? onRenderTitle(selectedOptions, this._onRenderTitle) : onRenderPlaceholder(props, this._onRenderPlaceholder)), React.createElement(\"span\", {\n      className: this._classNames.caretDownWrapper\n    }, onRenderCaretDown(props, this._onRenderCaretDown))), isOpen && onRenderContainer(__assign(__assign({}, props), {\n      onDismiss: this._onDismiss\n    }), this._onRenderContainer), hasErrorMessage && React.createElement(\"div\", {\n      role: \"alert\",\n      id: errorMessageId,\n      className: this._classNames.errorMessage\n    }, errorMessage));\n  };\n\n  DropdownInternal.prototype.focus = function (shouldOpenOnFocus) {\n    if (this._dropDown.current) {\n      this._dropDown.current.focus();\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true\n        });\n      }\n    }\n  };\n\n  DropdownInternal.prototype.setSelectedIndex = function (event, index) {\n    var _a = this.props,\n        options = _a.options,\n        selectedKey = _a.selectedKey,\n        selectedKeys = _a.selectedKeys,\n        multiSelect = _a.multiSelect,\n        notifyOnReselect = _a.notifyOnReselect,\n        _b = _a.hoisted.selectedIndices,\n        selectedIndices = _b === void 0 ? [] : _b;\n    var checked = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;\n    var newIndexes = [];\n    index = Math.max(0, Math.min(options.length - 1, index)); // If this is a controlled component then no state change should take place.\n\n    if (selectedKey !== undefined || selectedKeys !== undefined) {\n      this._onChange(event, options, index, checked, multiSelect);\n\n      return;\n    }\n\n    if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {\n      return;\n    } else if (multiSelect) {\n      newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];\n\n      if (checked) {\n        var position = newIndexes.indexOf(index);\n\n        if (position > -1) {\n          // unchecked the current one\n          newIndexes.splice(position, 1);\n        }\n      } else {\n        // add the new selected index into the existing one\n        newIndexes.push(index);\n      }\n    } else {\n      // Set the selected option if this is an uncontrolled component\n      newIndexes = [index];\n    }\n\n    event.persist(); // Call onChange after state is updated\n\n    this.props.hoisted.setSelectedIndices(newIndexes);\n\n    this._onChange(event, options, index, checked, multiSelect);\n  };\n\n  DropdownInternal.prototype._copyArray = function (array) {\n    var newArray = [];\n\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n      var element = array_1[_i];\n      newArray.push(element);\n    }\n\n    return newArray;\n  };\n  /**\n   * Finds the next valid Dropdown option and sets the selected index to it.\n   * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\n   * @param index - Index of where the search should start\n   * @param selectedIndex - The selectedIndex Dropdown's state\n   * @returns The next valid dropdown option's index\n   */\n\n\n  DropdownInternal.prototype._moveIndex = function (event, stepValue, index, selectedIndex) {\n    var options = this.props.options; // Return selectedIndex if nothing has changed or options is empty\n\n    if (selectedIndex === index || options.length === 0) {\n      return selectedIndex;\n    } // If the user is pressing the up or down key we want to make\n    // sure that the dropdown cycles through the options without\n    // causing the screen to scroll. In _onDropdownKeyDown\n    // at the very end is a check to see if newIndex !== selectedIndex.\n    // If the index is less than 0 and we set it back to 0, then\n    // newIndex will equal selectedIndex and not stop the action\n    // of the key press happening and vice versa for indexes greater\n    // than or equal to the options length.\n\n\n    if (index >= options.length) {\n      index = 0;\n    } else if (index < 0) {\n      index = options.length - 1;\n    }\n\n    var stepCounter = 0; // If current index is a header or divider, or disabled, increment by step\n\n    while (options[index].itemType === DropdownMenuItemType.Header || options[index].itemType === DropdownMenuItemType.Divider || options[index].disabled) {\n      // If stepCounter exceeds length of options, then return selectedIndex (-1)\n      if (stepCounter >= options.length) {\n        return selectedIndex;\n      } // If index + stepValue is out of bounds, wrap around\n\n\n      if (index + stepValue < 0) {\n        index = options.length;\n      } else if (index + stepValue >= options.length) {\n        index = -1;\n      }\n\n      index = index + stepValue;\n      stepCounter++;\n    }\n\n    this.setSelectedIndex(event, index);\n    return index;\n  };\n  /** Wrap item list in a FocusZone */\n\n\n  DropdownInternal.prototype._renderFocusableList = function (props) {\n    var _a = props.onRenderList,\n        onRenderList = _a === void 0 ? this._onRenderList : _a,\n        label = props.label,\n        ariaLabel = props.ariaLabel,\n        multiSelect = props.multiSelect;\n    return React.createElement(\"div\", {\n      className: this._classNames.dropdownItemsWrapper,\n      onKeyDown: this._onZoneKeyDown,\n      onKeyUp: this._onZoneKeyUp,\n      ref: this._host,\n      tabIndex: 0\n    }, React.createElement(FocusZone, {\n      ref: this._focusZone,\n      direction: FocusZoneDirection.vertical,\n      id: this._listId,\n      className: this._classNames.dropdownItems,\n      role: \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": label && !ariaLabel ? this._labelId : undefined,\n      \"aria-multiselectable\": multiSelect\n    }, onRenderList(props, this._onRenderList)));\n  };\n\n  DropdownInternal.prototype._renderSeparator = function (item) {\n    var index = item.index,\n        key = item.key;\n\n    if (index > 0) {\n      return React.createElement(\"div\", {\n        role: \"separator\",\n        key: key,\n        className: this._classNames.dropdownDivider\n      });\n    }\n\n    return null;\n  };\n\n  DropdownInternal.prototype._renderHeader = function (item) {\n    var _a = this.props.onRenderOption,\n        onRenderOption = _a === void 0 ? this._onRenderOption : _a;\n    var key = item.key,\n        id = item.id;\n    return React.createElement(\"div\", {\n      id: id,\n      key: key,\n      className: this._classNames.dropdownItemHeader\n    }, onRenderOption(item, this._onRenderOption));\n  };\n\n  DropdownInternal.prototype._onItemMouseEnter = function (item, ev) {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    var targetElement = ev.currentTarget;\n    targetElement.focus();\n  };\n\n  DropdownInternal.prototype._onItemMouseMove = function (item, ev) {\n    var targetElement = ev.currentTarget;\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || document.activeElement === targetElement) {\n      return;\n    }\n\n    targetElement.focus();\n  };\n\n  DropdownInternal.prototype._shouldIgnoreMouseEvent = function () {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  };\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n\n\n  DropdownInternal.prototype._isAltOrMeta = function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  };\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n\n\n  DropdownInternal.prototype._shouldHandleKeyUp = function (ev) {\n    var keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n\n    this._lastKeyDownWasAltOrMeta = false;\n    return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n  };\n  /**\n   * Returns true if dropdown should set to open on focus.\n   * Otherwise, isOpen state should be toggled on click\n   */\n\n\n  DropdownInternal.prototype._shouldOpenOnFocus = function () {\n    var hasFocus = this.state.hasFocus;\n    var openOnKeyboardFocus = this.props.openOnKeyboardFocus;\n    return !this._isFocusedByClick && openOnKeyboardFocus === true && !hasFocus;\n  };\n\n  DropdownInternal.defaultProps = {\n    options: []\n  };\n  return DropdownInternal;\n}(React.Component);","map":{"version":3,"sources":["components/Dropdown/Dropdown.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  IStyleFunctionOrObject,\n  KeyCodes,\n  classNamesFunction,\n  divProperties,\n  findIndex,\n  getDocument,\n  getFirstFocusable,\n  getId,\n  getLastFocusable,\n  getNativeProps,\n  initializeComponentRef,\n  isIOS,\n  isMac,\n  mergeAriaAttributeValues,\n  safeRequestAnimationFrame,\n  warn,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { Callout, DirectionalHint } from '../../Callout';\nimport { CommandButton } from '../../Button';\nimport {\n  DropdownMenuItemType,\n  IDropdownOption,\n  IDropdownProps,\n  IDropdownStyleProps,\n  IDropdownStyles,\n  IDropdown,\n} from './Dropdown.types';\nimport { DropdownSizePosCache } from './utilities/DropdownSizePosCache';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { ICalloutPositionedInfo, RectangleEdge } from '../../Positioning';\nimport { Icon } from '../../Icon';\nimport { ILabelStyleProps, ILabelStyles, Label } from '../../Label';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { Panel, IPanelStyleProps, IPanelStyles } from '../../Panel';\nimport { ResponsiveMode, IWithResponsiveModeState, useResponsiveMode } from '../../ResponsiveMode';\nimport {\n  SelectableOptionMenuItemType,\n  getAllSelectedOptions,\n  ISelectableDroppableTextProps,\n} from '../../SelectableOption';\n// import and use V7 Checkbox to ensure no breaking changes.\nimport { Checkbox, ICheckboxStyleProps, ICheckboxStyles } from '../../Checkbox';\nimport { getPropsWithDefaults } from '@fluentui/utilities';\nimport { useMergedRefs, usePrevious } from '@fluentui/react-hooks';\n\nconst COMPONENT_NAME = 'Dropdown';\nconst getClassNames = classNamesFunction<IDropdownStyleProps, IDropdownStyles>();\n\n/** Internal only props interface to support mixing in responsive mode */\n// eslint-disable-next-line deprecation/deprecation\ninterface IDropdownInternalProps extends Omit<IDropdownProps, 'ref'>, IWithResponsiveModeState {\n  hoisted: {\n    rootRef: React.Ref<HTMLDivElement>;\n    selectedIndices: number[];\n    setSelectedIndices: React.Dispatch<React.SetStateAction<number[]>>;\n  };\n}\n\ninterface IDropdownState {\n  isOpen: boolean;\n  /** Whether the root dropdown element has focus. */\n  hasFocus: boolean;\n  calloutRenderEdge?: RectangleEdge;\n}\n\nconst DEFAULT_PROPS: Partial<IDropdownProps> = {\n  options: [],\n};\n\nfunction useSelectedItemsState({\n  defaultSelectedKeys,\n  selectedKeys,\n  defaultSelectedKey,\n  selectedKey,\n  options,\n  multiSelect,\n}: IDropdownProps) {\n  const oldOptions = usePrevious(options);\n  const [selectedIndices, setSelectedIndices] = React.useState<number[]>([]);\n\n  // In controlled component usage where selectedKey is provided, update the selectedIndex\n  // state if the key or options change.\n  let selectedKeyPropToUse: string | number | string[] | number[] | null | undefined;\n\n  // this does a shallow compare (assumes options are pure), for the purposes of determining whether\n  // defaultSelectedKey/defaultSelectedKeys are respected.\n  const didOptionsChange = options !== oldOptions;\n\n  if (multiSelect) {\n    if (didOptionsChange && defaultSelectedKeys !== undefined) {\n      selectedKeyPropToUse = defaultSelectedKeys;\n    } else {\n      selectedKeyPropToUse = selectedKeys;\n    }\n  } else {\n    if (didOptionsChange && defaultSelectedKey !== undefined) {\n      selectedKeyPropToUse = defaultSelectedKey;\n    } else {\n      selectedKeyPropToUse = selectedKey;\n    }\n  }\n\n  const oldSelectedKeyProp = usePrevious(selectedKeyPropToUse);\n\n  React.useEffect(() => {\n    /** Get all selected indexes for multi-select mode */\n    const getSelectedIndexes = (): number[] => {\n      if (selectedKeyPropToUse === undefined) {\n        if (multiSelect) {\n          return getAllSelectedIndices();\n        }\n        const selectedIndex = getSelectedIndex(null);\n        return selectedIndex !== -1 ? [selectedIndex] : [];\n      } else if (!Array.isArray(selectedKeyPropToUse)) {\n        const selectedIndex = getSelectedIndex(selectedKeyPropToUse);\n        return selectedIndex !== -1 ? [selectedIndex] : [];\n      }\n\n      const returnValue: number[] = [];\n      for (const key of selectedKeyPropToUse) {\n        const selectedIndex = getSelectedIndex(key);\n        selectedIndex !== -1 && returnValue.push(selectedIndex);\n      }\n      return returnValue;\n    };\n\n    const getAllSelectedIndices = (): number[] => {\n      return options\n        .map((option: IDropdownOption, index: number) => (option.selected ? index : -1))\n        .filter(index => index !== -1);\n    };\n\n    const getSelectedIndex = (searchKey: string | number | null | undefined): number => {\n      return findIndex(options, option => {\n        // eslint-disable-next-line eqeqeq\n        if (searchKey != null) {\n          return option.key === searchKey;\n        } else {\n          // eslint-disable-next-line deprecation/deprecation\n          return !!option.selected || !!option.isSelected;\n        }\n      });\n    };\n\n    if (\n      (selectedKeyPropToUse !== undefined || !oldOptions) &&\n      (selectedKeyPropToUse !== oldSelectedKeyProp || didOptionsChange)\n    ) {\n      setSelectedIndices(getSelectedIndexes());\n    }\n  }, [didOptionsChange, multiSelect, oldOptions, oldSelectedKeyProp, options, selectedKeyPropToUse]);\n\n  return [selectedIndices, setSelectedIndices] as const;\n}\n\nexport const DropdownBase: React.FunctionComponent<IDropdownProps> = React.forwardRef<HTMLDivElement, IDropdownProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n    const rootRef = React.useRef<HTMLDivElement>(null);\n    const mergedRootRef = useMergedRefs(forwardedRef, rootRef);\n\n    const responsiveMode = useResponsiveMode(rootRef);\n    const [selectedIndices, setSelectedIndices] = useSelectedItemsState(props);\n\n    return (\n      <DropdownInternal\n        {...(props as Omit<IDropdownProps, 'ref'>)}\n        responsiveMode={responsiveMode}\n        hoisted={{ rootRef: mergedRootRef, selectedIndices, setSelectedIndices }}\n      />\n    );\n  },\n);\nDropdownBase.displayName = 'DropdownBase';\n\nclass DropdownInternal extends React.Component<IDropdownInternalProps, IDropdownState> implements IDropdown {\n  public static defaultProps = {\n    options: [] as IDropdownOption[],\n  };\n\n  private _host = React.createRef<HTMLDivElement>();\n  private _focusZone = React.createRef<FocusZone>();\n  private _dropDown = React.createRef<HTMLDivElement>();\n  private _id: string;\n  private _labelId: string;\n  private _listId: string;\n  private _optionId: string;\n  private _isScrollIdle: boolean;\n  private readonly _scrollIdleDelay: number = 250 /* ms */;\n  private _scrollIdleTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n  private _sizePosCache: DropdownSizePosCache = new DropdownSizePosCache();\n  private _classNames: IProcessedStyleSet<IDropdownStyles>;\n  private _requestAnimationFrame = safeRequestAnimationFrame(this);\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n  /** Flag for tracking whether focus is triggered by click (alternatively triggered by keyboard nav) */\n  private _isFocusedByClick: boolean;\n\n  constructor(props: IDropdownInternalProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const { multiSelect, selectedKey, selectedKeys, defaultSelectedKey, defaultSelectedKeys, options } = props;\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations(COMPONENT_NAME, props, {\n        isDisabled: 'disabled',\n        onChanged: 'onChange',\n        placeHolder: 'placeholder',\n        onRenderPlaceHolder: 'onRenderPlaceholder',\n      });\n\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        defaultSelectedKey: 'selectedKey',\n        defaultSelectedKeys: 'selectedKeys',\n        selectedKeys: 'selectedKey',\n      });\n\n      if (multiSelect) {\n        const warnMultiSelect = (prop: keyof IDropdownProps) =>\n          warn(`Dropdown property '${prop}' cannot be used when 'multiSelect' is true. Use '${prop}s' instead.`);\n        if (selectedKey !== undefined) {\n          warnMultiSelect('selectedKey');\n        }\n        if (defaultSelectedKey !== undefined) {\n          warnMultiSelect('defaultSelectedKey');\n        }\n      } else {\n        const warnNotMultiSelect = (prop: keyof IDropdownProps) =>\n          warn(`Dropdown property '${prop}s' cannot be used when 'multiSelect' is false/unset. Use '${prop}' instead.`);\n        if (selectedKeys !== undefined) {\n          warnNotMultiSelect('selectedKey');\n        }\n        if (defaultSelectedKeys !== undefined) {\n          warnNotMultiSelect('defaultSelectedKey');\n        }\n      }\n    }\n\n    this._id = props.id || getId('Dropdown');\n    this._labelId = this._id + '-label';\n    this._listId = this._id + '-list';\n    this._optionId = this._id + '-option';\n    this._isScrollIdle = true;\n\n    this._sizePosCache.updateOptions(options);\n\n    this.state = {\n      isOpen: false,\n      hasFocus: false,\n      calloutRenderEdge: undefined,\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IDropdownOption[] {\n    const {\n      options,\n      hoisted: { selectedIndices },\n    } = this.props;\n\n    return getAllSelectedOptions(options, selectedIndices);\n  }\n\n  public componentWillUnmount() {\n    clearTimeout(this._scrollIdleTimeoutId);\n  }\n\n  public componentDidUpdate(prevProps: IDropdownProps, prevState: IDropdownState) {\n    if (prevState.isOpen === true && this.state.isOpen === false) {\n      this._gotMouseMove = false;\n\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const id = this._id;\n\n    const props = this.props;\n    const {\n      className,\n      label,\n      options,\n      ariaLabel,\n      required,\n      errorMessage,\n      styles: propStyles,\n      theme,\n      panelProps,\n      calloutProps,\n      onRenderTitle = this._getTitle,\n      onRenderContainer = this._onRenderContainer,\n      onRenderCaretDown = this._onRenderCaretDown,\n      onRenderLabel = this._onRenderLabel,\n      hoisted: { selectedIndices },\n    } = props;\n    const { isOpen, calloutRenderEdge } = this.state;\n    // eslint-disable-next-line deprecation/deprecation\n    const onRenderPlaceholder = props.onRenderPlaceholder || props.onRenderPlaceHolder || this._getPlaceholder;\n\n    // If our cached options are out of date update our cache\n    if (options !== this._sizePosCache.cachedOptions) {\n      this._sizePosCache.updateOptions(options);\n    }\n\n    const selectedOptions = getAllSelectedOptions(options, selectedIndices);\n    const divProps = getNativeProps(props, divProperties);\n\n    const disabled = this._isDisabled();\n\n    const errorMessageId = id + '-errorMessage';\n    const ariaActiveDescendant = disabled\n      ? undefined\n      : isOpen && selectedIndices.length === 1 && selectedIndices[0] >= 0\n      ? this._listId + selectedIndices[0]\n      : undefined;\n\n    this._classNames = getClassNames(propStyles, {\n      theme,\n      className,\n      hasError: !!(errorMessage && errorMessage.length > 0),\n      hasLabel: !!label,\n      isOpen,\n      required,\n      disabled,\n      isRenderingPlaceholder: !selectedOptions.length,\n      panelClassName: panelProps ? panelProps.className : undefined,\n      calloutClassName: calloutProps ? calloutProps.className : undefined,\n      calloutRenderEdge: calloutRenderEdge,\n    });\n\n    const hasErrorMessage: boolean = !!errorMessage && errorMessage.length > 0;\n\n    return (\n      <div className={this._classNames.root} ref={this.props.hoisted.rootRef}>\n        {onRenderLabel(this.props, this._onRenderLabel)}\n        <div\n          data-is-focusable={!disabled}\n          data-ktp-target={true}\n          ref={this._dropDown}\n          id={id}\n          tabIndex={disabled ? -1 : 0}\n          role=\"combobox\"\n          aria-haspopup=\"listbox\"\n          aria-expanded={isOpen ? 'true' : 'false'}\n          aria-label={ariaLabel}\n          aria-labelledby={label && !ariaLabel ? mergeAriaAttributeValues(this._labelId, this._optionId) : undefined}\n          aria-describedby={hasErrorMessage ? this._id + '-errorMessage' : undefined}\n          aria-activedescendant={ariaActiveDescendant}\n          aria-required={required}\n          aria-disabled={disabled}\n          aria-controls={isOpen ? this._listId : undefined}\n          {...divProps}\n          className={this._classNames.dropdown}\n          onBlur={this._onDropdownBlur}\n          onKeyDown={this._onDropdownKeyDown}\n          onKeyUp={this._onDropdownKeyUp}\n          onClick={this._onDropdownClick}\n          onMouseDown={this._onDropdownMouseDown}\n          onFocus={this._onFocus}\n        >\n          <span\n            id={this._optionId}\n            className={this._classNames.title}\n            aria-live=\"polite\"\n            aria-atomic={true}\n            aria-invalid={hasErrorMessage}\n          >\n            {\n              // If option is selected render title, otherwise render the placeholder text\n              selectedOptions.length\n                ? onRenderTitle(selectedOptions, this._onRenderTitle)\n                : onRenderPlaceholder(props, this._onRenderPlaceholder)\n            }\n          </span>\n          <span className={this._classNames.caretDownWrapper}>{onRenderCaretDown(props, this._onRenderCaretDown)}</span>\n        </div>\n        {isOpen && onRenderContainer({ ...props, onDismiss: this._onDismiss }, this._onRenderContainer)}\n        {hasErrorMessage && (\n          <div role=\"alert\" id={errorMessageId} className={this._classNames.errorMessage}>\n            {errorMessage}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public focus(shouldOpenOnFocus?: boolean): void {\n    if (this._dropDown.current) {\n      this._dropDown.current.focus();\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true,\n        });\n      }\n    }\n  }\n\n  public setSelectedIndex(event: React.FormEvent<HTMLDivElement>, index: number): void {\n    const {\n      options,\n      selectedKey,\n      selectedKeys,\n      multiSelect,\n      notifyOnReselect,\n      hoisted: { selectedIndices = [] },\n    } = this.props;\n    const checked: boolean = selectedIndices ? selectedIndices.indexOf(index) > -1 : false;\n    let newIndexes: number[] = [];\n\n    index = Math.max(0, Math.min(options.length - 1, index));\n\n    // If this is a controlled component then no state change should take place.\n    if (selectedKey !== undefined || selectedKeys !== undefined) {\n      this._onChange(event, options, index, checked, multiSelect);\n      return;\n    }\n\n    if (!multiSelect && !notifyOnReselect && index === selectedIndices[0]) {\n      return;\n    } else if (multiSelect) {\n      newIndexes = selectedIndices ? this._copyArray(selectedIndices) : [];\n      if (checked) {\n        const position = newIndexes.indexOf(index);\n        if (position > -1) {\n          // unchecked the current one\n          newIndexes.splice(position, 1);\n        }\n      } else {\n        // add the new selected index into the existing one\n        newIndexes.push(index);\n      }\n    } else {\n      // Set the selected option if this is an uncontrolled component\n      newIndexes = [index];\n    }\n\n    event.persist();\n    // Call onChange after state is updated\n    this.props.hoisted.setSelectedIndices(newIndexes);\n    this._onChange(event, options, index, checked, multiSelect);\n  }\n\n  private _onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    options: IDropdownOption[],\n    index: number,\n    checked?: boolean,\n    multiSelect?: boolean,\n  ) => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { onChange, onChanged } = this.props;\n    if (onChange || onChanged) {\n      // for single-select, option passed in will always be selected.\n      // for multi-select, flip the checked value\n      const changedOpt = multiSelect ? { ...options[index], selected: !checked } : options[index];\n\n      onChange && onChange({ ...event, target: this._dropDown.current as EventTarget }, changedOpt, index);\n      onChanged && onChanged(changedOpt, index);\n    }\n  };\n\n  /** Get either props.placeholder (new name) or props.placeHolder (old name) */\n  private _getPlaceholder = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.props.placeholder || this.props.placeHolder;\n  };\n\n  private _copyArray(array: any[]): any[] {\n    const newArray = [];\n    for (const element of array) {\n      newArray.push(element);\n    }\n    return newArray;\n  }\n\n  /**\n   * Finds the next valid Dropdown option and sets the selected index to it.\n   * @param stepValue - Value of how many items the function should traverse.  Should be -1 or 1.\n   * @param index - Index of where the search should start\n   * @param selectedIndex - The selectedIndex Dropdown's state\n   * @returns The next valid dropdown option's index\n   */\n  private _moveIndex(\n    event: React.FormEvent<HTMLDivElement>,\n    stepValue: number,\n    index: number,\n    selectedIndex: number,\n  ): number {\n    const { options } = this.props;\n    // Return selectedIndex if nothing has changed or options is empty\n    if (selectedIndex === index || options.length === 0) {\n      return selectedIndex;\n    }\n\n    // If the user is pressing the up or down key we want to make\n    // sure that the dropdown cycles through the options without\n    // causing the screen to scroll. In _onDropdownKeyDown\n    // at the very end is a check to see if newIndex !== selectedIndex.\n    // If the index is less than 0 and we set it back to 0, then\n    // newIndex will equal selectedIndex and not stop the action\n    // of the key press happening and vice versa for indexes greater\n    // than or equal to the options length.\n    if (index >= options.length) {\n      index = 0;\n    } else if (index < 0) {\n      index = options.length - 1;\n    }\n\n    let stepCounter = 0;\n    // If current index is a header or divider, or disabled, increment by step\n    while (\n      options[index].itemType === DropdownMenuItemType.Header ||\n      options[index].itemType === DropdownMenuItemType.Divider ||\n      options[index].disabled\n    ) {\n      // If stepCounter exceeds length of options, then return selectedIndex (-1)\n      if (stepCounter >= options.length) {\n        return selectedIndex;\n      }\n      // If index + stepValue is out of bounds, wrap around\n      if (index + stepValue < 0) {\n        index = options.length;\n      } else if (index + stepValue >= options.length) {\n        index = -1;\n      }\n\n      index = index + stepValue;\n      stepCounter++;\n    }\n\n    this.setSelectedIndex(event, index);\n    return index;\n  }\n\n  /** Get text in dropdown input as a string */\n  private _getTitle = (items: IDropdownOption[], _unused?: unknown): string => {\n    const { multiSelectDelimiter = ', ' } = this.props;\n    return items.map(i => i.text).join(multiSelectDelimiter);\n  };\n\n  /** Render text in dropdown input */\n  private _onRenderTitle = (items: IDropdownOption[]): JSX.Element => {\n    return <>{this._getTitle(items)}</>;\n  };\n\n  /** Render placeholder text in dropdown input */\n  private _onRenderPlaceholder = (props: IDropdownProps): JSX.Element | null => {\n    if (!this._getPlaceholder()) {\n      return null;\n    }\n    return <>{this._getPlaceholder()}</>;\n  };\n\n  /** Render Callout or Panel container and pass in list */\n  private _onRenderContainer = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { calloutProps, panelProps } = props;\n    const { responsiveMode, dropdownWidth } = this.props;\n\n    const isSmall = responsiveMode! <= ResponsiveMode.medium;\n\n    const panelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.panel as IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>)\n      : undefined;\n\n    let calloutWidth = undefined;\n    let calloutMinWidth = undefined;\n    if (dropdownWidth === 'auto') {\n      calloutMinWidth = this._dropDown.current ? this._dropDown.current.clientWidth : 0;\n    } else {\n      calloutWidth = dropdownWidth || (this._dropDown.current ? this._dropDown.current.clientWidth : 0);\n    }\n\n    return isSmall ? (\n      <Panel\n        isOpen={true}\n        isLightDismiss={true}\n        onDismiss={this._onDismiss}\n        hasCloseButton={false}\n        styles={panelStyles}\n        {...panelProps}\n      >\n        {this._renderFocusableList(props)}\n      </Panel>\n    ) : (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHintFixed={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        calloutWidth={calloutWidth}\n        calloutMinWidth={calloutMinWidth}\n        {...calloutProps}\n        className={this._classNames.callout}\n        target={this._dropDown.current}\n        onDismiss={this._onDismiss}\n        onScroll={this._onScroll}\n        onPositioned={this._onPositioned}\n      >\n        {this._renderFocusableList(props)}\n      </Callout>\n    );\n  };\n\n  /** Render Caret Down Icon */\n  private _onRenderCaretDown = (props: IDropdownProps): JSX.Element => {\n    return <Icon className={this._classNames.caretDown} iconName=\"ChevronDown\" aria-hidden={true} />;\n  };\n\n  /** Wrap item list in a FocusZone */\n  private _renderFocusableList(props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element {\n    const { onRenderList = this._onRenderList, label, ariaLabel, multiSelect } = props;\n\n    return (\n      <div\n        className={this._classNames.dropdownItemsWrapper}\n        onKeyDown={this._onZoneKeyDown}\n        onKeyUp={this._onZoneKeyUp}\n        ref={this._host}\n        tabIndex={0}\n      >\n        <FocusZone\n          ref={this._focusZone}\n          direction={FocusZoneDirection.vertical}\n          id={this._listId}\n          className={this._classNames.dropdownItems}\n          role=\"listbox\"\n          aria-label={ariaLabel}\n          aria-labelledby={label && !ariaLabel ? this._labelId : undefined}\n          aria-multiselectable={multiSelect}\n        >\n          {onRenderList(props, this._onRenderList)}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  /** Render List of items */\n  private _onRenderList = (props: ISelectableDroppableTextProps<IDropdown, HTMLDivElement>): JSX.Element => {\n    const { onRenderItem = this._onRenderItem } = props;\n\n    let queue: { id?: string; items: JSX.Element[] } = { items: [] };\n    let renderedList: JSX.Element[] = [];\n\n    const emptyQueue = (): void => {\n      const newGroup = queue.id\n        ? [\n            <div role=\"group\" key={queue.id} aria-labelledby={queue.id}>\n              {queue.items}\n            </div>,\n          ]\n        : queue.items;\n\n      renderedList = [...renderedList, ...newGroup];\n      // Flush items and id\n      queue = { items: [] };\n    };\n\n    const placeRenderedOptionIntoQueue = (item: IDropdownOption, index: number) => {\n      /*\n        Case Header\n          empty queue if it's not already empty\n          ensure unique ID for header and set queue ID\n          push header into queue\n        Case Divider\n          push divider into queue if not first item\n          empty queue if not already empty\n        Default\n          push item into queue\n      */\n      switch (item.itemType) {\n        case SelectableOptionMenuItemType.Header:\n          queue.items.length > 0 && emptyQueue();\n\n          const id = this._id + item.key;\n          queue.items.push(onRenderItem({ id, ...item, index }, this._onRenderItem)!);\n          queue.id = id;\n          break;\n        case SelectableOptionMenuItemType.Divider:\n          index > 0 && queue.items.push(onRenderItem({ ...item, index }, this._onRenderItem)!);\n\n          queue.items.length > 0 && emptyQueue();\n          break;\n        default:\n          queue.items.push(onRenderItem({ ...item, index }, this._onRenderItem)!);\n      }\n    };\n\n    // Place options into the queue. Queue will be emptied anytime a Header or Divider is encountered\n    props.options.forEach((item: IDropdownOption, index: number) => {\n      placeRenderedOptionIntoQueue(item, index);\n    });\n\n    // Push remaining items into all renderedList\n    queue.items.length > 0 && emptyQueue();\n\n    return <>{renderedList}</>;\n  };\n\n  private _onRenderItem = (item: IDropdownOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  private _renderSeparator(item: IDropdownOption): JSX.Element | null {\n    const { index, key } = item;\n    if (index! > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.dropdownDivider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IDropdownOption): JSX.Element {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    const { key, id } = item;\n    return (\n      <div id={id} key={key} className={this._classNames.dropdownItemHeader}>\n        {onRenderOption(item, this._onRenderOption)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IDropdownOption): JSX.Element => {\n    const {\n      onRenderOption = this._onRenderOption,\n      hoisted: { selectedIndices = [] },\n    } = this.props;\n    const isItemSelected =\n      item.index !== undefined && selectedIndices ? selectedIndices.indexOf(item.index) > -1 : false;\n\n    // select the right className based on the combination of selected/disabled\n    const itemClassName = item.hidden // predicate: item hidden\n      ? this._classNames.dropdownItemHidden\n      : isItemSelected && item.disabled === true // predicate: both selected and disabled\n      ? this._classNames.dropdownItemSelectedAndDisabled\n      : isItemSelected // predicate: selected only\n      ? this._classNames.dropdownItemSelected\n      : item.disabled === true // predicate: disabled only\n      ? this._classNames.dropdownItemDisabled\n      : this._classNames.dropdownItem;\n\n    const { title = item.text } = item;\n\n    const multiSelectItemStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.multiSelectItem as IStyleFunctionOrObject<\n          ICheckboxStyleProps,\n          ICheckboxStyles\n        >)\n      : undefined;\n\n    return !this.props.multiSelect ? (\n      <CommandButton\n        id={this._listId + item.index}\n        key={item.key}\n        data-index={item.index}\n        data-is-focusable={!item.disabled}\n        disabled={item.disabled}\n        className={itemClassName}\n        onClick={this._onItemClick(item)}\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseEnter={this._onItemMouseEnter.bind(this, item)}\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseLeave={this._onMouseItemLeave.bind(this, item)}\n        // eslint-disable-next-line react/jsx-no-bind\n        onMouseMove={this._onItemMouseMove.bind(this, item)}\n        role=\"option\"\n        aria-selected={isItemSelected ? 'true' : 'false'}\n        ariaLabel={item.ariaLabel}\n        title={title}\n        aria-posinset={this._sizePosCache.positionInSet(item.index)}\n        aria-setsize={this._sizePosCache.optionSetSize}\n      >\n        {onRenderOption(item, this._onRenderOption)}\n      </CommandButton>\n    ) : (\n      <Checkbox\n        id={this._listId + item.index}\n        key={item.key}\n        disabled={item.disabled}\n        onChange={this._onItemClick(item)}\n        inputProps={{\n          'aria-selected': isItemSelected,\n          onMouseEnter: this._onItemMouseEnter.bind(this, item),\n          onMouseLeave: this._onMouseItemLeave.bind(this, item),\n          onMouseMove: this._onItemMouseMove.bind(this, item),\n          role: 'option',\n          ...({\n            'data-index': item.index,\n            'data-is-focusable': !item.disabled,\n          } as any),\n        }}\n        label={item.text}\n        title={title}\n        // eslint-disable-next-line react/jsx-no-bind\n        onRenderLabel={this._onRenderItemLabel.bind(this, item)}\n        className={itemClassName}\n        checked={isItemSelected}\n        styles={multiSelectItemStyles}\n        ariaPositionInSet={this._sizePosCache.positionInSet(item.index)}\n        ariaSetSize={this._sizePosCache.optionSetSize}\n      />\n    );\n  };\n\n  /** Render content of item (i.e. text/icon inside of button) */\n  private _onRenderOption = (item: IDropdownOption): JSX.Element => {\n    return <span className={this._classNames.dropdownOptionText}>{item.text}</span>;\n  };\n\n  /** Render custom label for drop down item */\n  private _onRenderItemLabel = (item: IDropdownOption): JSX.Element | null => {\n    const { onRenderOption = this._onRenderOption } = this.props;\n    return onRenderOption(item, this._onRenderOption);\n  };\n\n  private _onPositioned = (positions?: ICalloutPositionedInfo): void => {\n    if (this._focusZone.current) {\n      // Focusing an element can trigger a reflow. Making this wait until there is an animation\n      // frame can improve perf significantly.\n      this._requestAnimationFrame(() => {\n        const selectedIndices = this.props.hoisted.selectedIndices;\n        if (this._focusZone.current) {\n          if (selectedIndices && selectedIndices[0] && !this.props.options[selectedIndices[0]].disabled) {\n            const element: HTMLElement | null = getDocument()!.getElementById(`${this._id}-list${selectedIndices[0]}`);\n            if (element) {\n              this._focusZone.current.focusElement(element);\n            }\n          } else {\n            this._focusZone.current.focus();\n          }\n        }\n      });\n    }\n\n    if (!this.state.calloutRenderEdge || this.state.calloutRenderEdge !== positions!.targetEdge) {\n      this.setState({\n        calloutRenderEdge: positions!.targetEdge,\n      });\n    }\n  };\n\n  private _onItemClick = (item: IDropdownOption): ((event: React.MouseEvent<HTMLDivElement>) => void) => {\n    return (event: React.MouseEvent<HTMLDivElement>): void => {\n      if (!item.disabled) {\n        this.setSelectedIndex(event, item.index!);\n        if (!this.props.multiSelect) {\n          // only close the callout when it's in single-select mode\n          this.setState({\n            isOpen: false,\n          });\n        }\n      }\n    };\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = (): void => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = window.setTimeout(() => {\n      this._isScrollIdle = true;\n    }, this._scrollIdleDelay);\n  };\n\n  private _onItemMouseEnter(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    const targetElement = ev.currentTarget as HTMLElement;\n    targetElement.focus();\n  }\n\n  private _onItemMouseMove(item: any, ev: React.MouseEvent<HTMLElement>): void {\n    const targetElement = ev.currentTarget as HTMLElement;\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || document.activeElement === targetElement) {\n      return;\n    }\n\n    targetElement.focus();\n  }\n\n  private _onMouseItemLeave = (item: any, ev: React.MouseEvent<HTMLElement>): void => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    /**\n     * IE11 focus() method forces parents to scroll to top of element.\n     * Edge and IE expose a setActive() function for focusable divs that\n     * sets the page focus but does not scroll the parent element.\n     */\n    if (this._host.current) {\n      if ((this._host.current as any).setActive) {\n        try {\n          (this._host.current as any).setActive();\n        } catch (e) {\n          /* no-op */\n        }\n      } else {\n        this._host.current.focus();\n      }\n    }\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  private _onDismiss = (): void => {\n    this.setState({ isOpen: false });\n  };\n\n  private _onDropdownBlur = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not proceed with this logic.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // hasFocus tracks whether the root element has focus so always update the state.\n    this.setState({ hasFocus: false });\n\n    if (this.state.isOpen) {\n      // Do not onBlur when the callout is opened\n      return;\n    }\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  };\n\n  private _onDropdownKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n\n    let newIndex: number | undefined;\n    const selectedIndex = this.props.hoisted.selectedIndices.length ? this.props.hoisted.selectedIndices[0] : -1;\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n    const isOpen = this.state.isOpen;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.enter:\n        this.setState({\n          isOpen: !isOpen,\n        });\n        break;\n\n      case KeyCodes.escape:\n        if (!isOpen) {\n          return;\n        }\n\n        this.setState({\n          isOpen: false,\n        });\n        break;\n\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          if (isOpen) {\n            this.setState({ isOpen: false });\n            break;\n          }\n\n          return;\n        }\n        if (this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, -1, selectedIndex - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.down:\n        if (containsExpandCollapseModifier) {\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n        if ((containsExpandCollapseModifier && !isOpen) || this.props.multiSelect) {\n          this.setState({ isOpen: true });\n        } else if (!this._isDisabled()) {\n          newIndex = this._moveIndex(ev, 1, selectedIndex + 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.home:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, 1, 0, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.end:\n        if (!this.props.multiSelect) {\n          newIndex = this._moveIndex(ev, -1, this.props.options.length - 1, selectedIndex);\n        }\n        break;\n\n      case KeyCodes.space:\n        // event handled in _onDropdownKeyUp\n        break;\n\n      default:\n        return;\n    }\n\n    if (newIndex !== selectedIndex) {\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownKeyUp = (ev: React.KeyboardEvent<HTMLDivElement>): void => {\n    // If Dropdown disabled do not process any keyboard events.\n    const disabled = this._isDisabled();\n    if (disabled) {\n      return;\n    }\n\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n    const isOpen = this.state.isOpen;\n\n    if (this.props.onKeyUp) {\n      this.props.onKeyUp(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.space:\n        this.setState({\n          isOpen: !isOpen,\n        });\n        break;\n\n      default:\n        if (shouldHandleKey && isOpen) {\n          this.setState({ isOpen: false });\n        }\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * We close the menu on key up only if ALL of the following are true:\n   * - Most recent key down was alt or meta (command)\n   * - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n   *   expand/collapse the menu)\n   * - We're not on a Mac (or iOS)\n   *\n   * This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n   * closing any open context menus. There is not a similar behavior on Macs.\n   */\n  private _shouldHandleKeyUp(ev: React.KeyboardEvent<HTMLElement>): boolean {\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    return !!keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n  }\n\n  private _onZoneKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    let elementToFocus;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _shouldHandleKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n    const containsExpandCollapseModifier = ev.altKey || ev.metaKey;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.up:\n        if (containsExpandCollapseModifier) {\n          this.setState({ isOpen: false });\n        } else {\n          if (this._host.current) {\n            elementToFocus = getLastFocusable(this._host.current, this._host.current.lastChild as HTMLElement, true);\n          }\n        }\n        break;\n\n      // All directional keystrokes should be canceled when the zone is rendered.\n      // This avoids the body scroll from reacting and thus dismissing the dropdown.\n      case KeyCodes.home:\n      case KeyCodes.end:\n      case KeyCodes.pageUp:\n      case KeyCodes.pageDown:\n        break;\n\n      case KeyCodes.down:\n        if (!containsExpandCollapseModifier && this._host.current) {\n          elementToFocus = getFirstFocusable(this._host.current, this._host.current.firstChild as HTMLElement, true);\n        }\n        break;\n\n      case KeyCodes.escape:\n        this.setState({ isOpen: false });\n        break;\n\n      case KeyCodes.tab:\n        this.setState({ isOpen: false });\n        return;\n\n      default:\n        return;\n    }\n\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onZoneKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const shouldHandleKey = this._shouldHandleKeyUp(ev);\n\n    if (shouldHandleKey && this.state.isOpen) {\n      this.setState({ isOpen: false });\n      ev.preventDefault();\n    }\n  };\n\n  private _onDropdownClick = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    if (this.props.onClick) {\n      this.props.onClick(ev);\n      if (ev.defaultPrevented) {\n        return;\n      }\n    }\n\n    const { isOpen } = this.state;\n    const disabled = this._isDisabled();\n\n    if (!disabled && !this._shouldOpenOnFocus()) {\n      this.setState({\n        isOpen: !isOpen,\n      });\n    }\n\n    this._isFocusedByClick = false; // reset\n  };\n\n  private _onDropdownMouseDown = (): void => {\n    this._isFocusedByClick = true;\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLDivElement>): void => {\n    const disabled = this._isDisabled();\n\n    if (!disabled) {\n      if (this.props.onFocus) {\n        this.props.onFocus(ev);\n      }\n      const state: Pick<IDropdownState, 'hasFocus'> | Pick<IDropdownState, 'hasFocus' | 'isOpen'> = { hasFocus: true };\n      if (this._shouldOpenOnFocus()) {\n        (state as Pick<IDropdownState, 'hasFocus' | 'isOpen'>).isOpen = true;\n      }\n\n      this.setState(state);\n    }\n  };\n\n  /**\n   * Because the isDisabled prop is deprecated, we have had to repeat this logic all over the place.\n   * This helper method avoids all the repetition.\n   */\n  private _isDisabled: () => boolean | undefined = () => {\n    let { disabled } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const { isDisabled } = this.props;\n\n    // Remove this deprecation workaround at 1.0.0\n    if (disabled === undefined) {\n      disabled = isDisabled;\n    }\n\n    return disabled;\n  };\n\n  private _onRenderLabel = (props: IDropdownProps): JSX.Element | null => {\n    const { label, required, disabled } = props;\n\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    return label ? (\n      <Label\n        className={this._classNames.label}\n        id={this._labelId}\n        required={required}\n        styles={labelStyles}\n        disabled={disabled}\n      >\n        {label}\n      </Label>\n    ) : null;\n  };\n\n  /**\n   * Returns true if dropdown should set to open on focus.\n   * Otherwise, isOpen state should be toggled on click\n   */\n  private _shouldOpenOnFocus(): boolean {\n    const { hasFocus } = this.state;\n    const { openOnKeyboardFocus } = this.props;\n    return !this._isFocusedByClick && openOnKeyboardFocus === true && !hasFocus;\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}