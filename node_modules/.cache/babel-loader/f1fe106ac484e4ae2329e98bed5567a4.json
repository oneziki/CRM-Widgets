{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DayOfWeek, FirstWeekOfYear, DateRangeType, addMonths, addYears, DEFAULT_CALENDAR_STRINGS, DEFAULT_DATE_FORMATTING } from '@fluentui/date-time-utilities';\nimport { CalendarDay } from './CalendarDay/CalendarDay';\nimport { CalendarMonth } from './CalendarMonth/CalendarMonth';\nimport { css, KeyCodes, classNamesFunction, focusAsync, format, FocusRects, getPropsWithDefaults } from '@fluentui/utilities';\nimport { useControllableValue } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from './defaults';\nvar getClassNames = classNamesFunction();\nvar defaultWorkWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\nvar DEFAULT_PROPS = {\n  isMonthPickerVisible: true,\n  isDayPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  today: new Date(),\n  firstDayOfWeek: DayOfWeek.Sunday,\n  dateRangeType: DateRangeType.Day,\n  showGoToToday: true,\n  strings: DEFAULT_CALENDAR_STRINGS,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  navigationIcons: defaultCalendarNavigationIcons,\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  showSixWeeksByDefault: false,\n  workWeekDays: defaultWorkWeekDays,\n  showCloseButton: false,\n  allFocusable: false\n};\n\nfunction useDateState(_a) {\n  var value = _a.value,\n      _b = _a.today,\n      today = _b === void 0 ? new Date() : _b,\n      onSelectDate = _a.onSelectDate;\n  /** The currently selected date in the calendar */\n\n  var _c = useControllableValue(value, today),\n      _d = _c[0],\n      selectedDate = _d === void 0 ? today : _d,\n      setSelectedDate = _c[1];\n  /** The currently focused date in the day picker, but not necessarily selected */\n\n\n  var _e = React.useState(value),\n      _f = _e[0],\n      navigatedDay = _f === void 0 ? today : _f,\n      setNavigatedDay = _e[1];\n  /** The currently focused date in the month picker, but not necessarily selected */\n\n\n  var _g = React.useState(value),\n      _h = _g[0],\n      navigatedMonth = _h === void 0 ? today : _h,\n      setNavigatedMonth = _g[1];\n  /** If using a controlled value, when that value changes, navigate to that date */\n\n\n  var _j = React.useState(value),\n      _k = _j[0],\n      lastSelectedDate = _k === void 0 ? today : _k,\n      setLastSelectedDate = _j[1];\n\n  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {\n    setNavigatedDay(value);\n    setNavigatedMonth(value);\n    setLastSelectedDate(value);\n  }\n\n  var navigateMonth = function (date) {\n    setNavigatedMonth(date);\n  };\n\n  var navigateDay = function (date) {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n  };\n\n  var onDateSelected = function (date, selectedDateRangeArray) {\n    var _a;\n\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n    setSelectedDate(date);\n    (_a = onSelectDate) === null || _a === void 0 ? void 0 : _a(date, selectedDateRangeArray);\n  };\n\n  return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth];\n}\n\nfunction useVisibilityState(props) {\n  /** State used to show/hide month picker */\n  var _a = useControllableValue(props.showMonthPickerAsOverlay ? undefined : props.isMonthPickerVisible, false),\n      _b = _a[0],\n      isMonthPickerVisible = _b === void 0 ? true : _b,\n      setIsMonthPickerVisible = _a[1];\n  /** State used to show/hide day picker */\n\n\n  var _c = useControllableValue(props.showMonthPickerAsOverlay ? undefined : props.isDayPickerVisible, true),\n      _d = _c[0],\n      isDayPickerVisible = _d === void 0 ? true : _d,\n      setIsDayPickerVisible = _c[1];\n\n  var toggleDayMonthPickerVisibility = function () {\n    setIsMonthPickerVisible(!isMonthPickerVisible);\n    setIsDayPickerVisible(!isDayPickerVisible);\n  };\n\n  return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility];\n}\n\nfunction useFocusLogic(_a, isDayPickerVisible, isMonthPickerVisible) {\n  var componentRef = _a.componentRef;\n  var dayPicker = React.useRef(null);\n  var monthPicker = React.useRef(null);\n  var focusOnUpdate = React.useRef(false);\n  var focus = React.useCallback(function () {\n    if (isDayPickerVisible && dayPicker.current) {\n      focusAsync(dayPicker.current);\n    } else if (isMonthPickerVisible && monthPicker.current) {\n      focusAsync(monthPicker.current);\n    }\n  }, [isDayPickerVisible, isMonthPickerVisible]);\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      focus: focus\n    };\n  }, [focus]);\n  React.useEffect(function () {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  var focusOnNextUpdate = function () {\n    focusOnUpdate.current = true;\n  };\n\n  return [dayPicker, monthPicker, focusOnNextUpdate];\n}\n\nexport var CalendarBase = React.forwardRef(function (propsWithoutDefaults, forwardedRef) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n  var _a = useDateState(props),\n      selectedDate = _a[0],\n      navigatedDay = _a[1],\n      navigatedMonth = _a[2],\n      onDateSelected = _a[3],\n      navigateDay = _a[4],\n      navigateMonth = _a[5];\n\n  var _b = useVisibilityState(props),\n      isMonthPickerVisible = _b[0],\n      isDayPickerVisible = _b[1],\n      toggleDayMonthPickerVisibility = _b[2];\n\n  var _c = useFocusLogic(props, isDayPickerVisible, isMonthPickerVisible),\n      dayPicker = _c[0],\n      monthPicker = _c[1],\n      focusOnNextUpdate = _c[2];\n\n  var renderGoToTodayButton = function () {\n    var goTodayEnabled = showGoToToday;\n\n    if (goTodayEnabled && today) {\n      goTodayEnabled = navigatedDay.getFullYear() !== today.getFullYear() || navigatedDay.getMonth() !== today.getMonth() || navigatedMonth.getFullYear() !== today.getFullYear() || navigatedMonth.getMonth() !== today.getMonth();\n    }\n\n    return showGoToToday && React.createElement(\"button\", {\n      className: css('js-goToday', classes.goTodayButton),\n      onClick: onGotoToday,\n      onKeyDown: onButtonKeyDown(onGotoToday),\n      type: \"button\",\n      disabled: !goTodayEnabled\n    }, strings.goToToday);\n  };\n\n  var onNavigateDayDate = function (date, focusOnNavigatedDay) {\n    navigateDay(date);\n\n    if (focusOnNavigatedDay) {\n      focusOnNextUpdate();\n    }\n  };\n\n  var onNavigateMonthDate = function (date, focusOnNavigatedDay) {\n    if (focusOnNavigatedDay) {\n      focusOnNextUpdate();\n    }\n\n    if (!focusOnNavigatedDay) {\n      navigateMonth(date);\n      return;\n    }\n\n    if (monthPickerOnly) {\n      onDateSelected(date);\n    }\n\n    navigateDay(date);\n  };\n\n  var onHeaderSelect = props.showMonthPickerAsOverlay ? function () {\n    toggleDayMonthPickerVisibility();\n    focusOnNextUpdate();\n  } : undefined;\n\n  var onGotoToday = function () {\n    navigateDay(today);\n    focusOnNextUpdate();\n  };\n\n  var onButtonKeyDown = function (callback) {\n    return function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n        case KeyCodes.space:\n          callback();\n          break;\n      }\n    };\n  };\n\n  var onDatePickerPopupKeyDown = function (ev) {\n    var _a, _b; // eslint-disable-next-line deprecation/deprecation\n\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.backspace:\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.escape:\n        (_b = (_a = props).onDismiss) === null || _b === void 0 ? void 0 : _b.call(_a);\n        break;\n\n      case KeyCodes.pageUp:\n        if (ev.ctrlKey) {\n          // go to next year\n          navigateDay(addYears(navigatedDay, 1));\n        } else {\n          // go to next month\n          navigateDay(addMonths(navigatedDay, 1));\n        }\n\n        ev.preventDefault();\n        break;\n\n      case KeyCodes.pageDown:\n        if (ev.ctrlKey) {\n          // go to previous year\n          navigateDay(addYears(navigatedDay, -1));\n        } else {\n          // go to previous month\n          navigateDay(addMonths(navigatedDay, -1));\n        }\n\n        ev.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var rootClass = 'ms-DatePicker';\n  var firstDayOfWeek = props.firstDayOfWeek,\n      dateRangeType = props.dateRangeType,\n      strings = props.strings,\n      showMonthPickerAsOverlay = props.showMonthPickerAsOverlay,\n      showGoToToday = props.showGoToToday,\n      highlightCurrentMonth = props.highlightCurrentMonth,\n      highlightSelectedMonth = props.highlightSelectedMonth,\n      navigationIcons = props.navigationIcons,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      restrictedDates = props.restrictedDates,\n      className = props.className,\n      showCloseButton = props.showCloseButton,\n      allFocusable = props.allFocusable,\n      styles = props.styles,\n      showWeekNumbers = props.showWeekNumbers,\n      theme = props.theme,\n      calendarDayProps = props.calendarDayProps,\n      calendarMonthProps = props.calendarMonthProps,\n      dateTimeFormatter = props.dateTimeFormatter,\n      _d = props.today,\n      today = _d === void 0 ? new Date() : _d;\n  var monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n  var overlaidWithButton = showMonthPickerAsOverlay && showGoToToday;\n  var classes = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    isMonthPickerVisible: isMonthPickerVisible,\n    isDayPickerVisible: isDayPickerVisible,\n    monthPickerOnly: monthPickerOnly,\n    showMonthPickerAsOverlay: showMonthPickerAsOverlay,\n    overlaidWithButton: overlaidWithButton,\n    overlayedWithButton: overlaidWithButton,\n    showGoToToday: showGoToToday,\n    showWeekNumbers: showWeekNumbers\n  });\n  var todayDateString = '';\n  var selectedDateString = '';\n\n  if (dateTimeFormatter && strings.todayDateFormatString) {\n    todayDateString = format(strings.todayDateFormatString, dateTimeFormatter.formatMonthDayYear(today, strings));\n  }\n\n  if (dateTimeFormatter && strings.selectedDateFormatString) {\n    selectedDateString = format(strings.selectedDateFormatString, dateTimeFormatter.formatMonthDayYear(selectedDate, strings));\n  }\n\n  var selectionAndTodayString = selectedDateString + ', ' + todayDateString;\n  return React.createElement(\"div\", {\n    ref: forwardedRef,\n    role: \"group\",\n    \"aria-label\": selectionAndTodayString,\n    className: css(rootClass, classes.root, className, 'ms-slideDownIn10'),\n    onKeyDown: onDatePickerPopupKeyDown\n  }, React.createElement(\"div\", {\n    className: classes.liveRegion,\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\"\n  }, React.createElement(\"span\", null, selectedDateString)), isDayPickerVisible && React.createElement(CalendarDay, __assign({\n    selectedDate: selectedDate,\n    navigatedDate: navigatedDay,\n    today: props.today,\n    onSelectDate: onDateSelected,\n    // eslint-disable-next-line react/jsx-no-bind\n    onNavigateDate: onNavigateDayDate,\n    onDismiss: props.onDismiss,\n    firstDayOfWeek: firstDayOfWeek,\n    dateRangeType: dateRangeType,\n    strings: strings,\n    // eslint-disable-next-line react/jsx-no-bind\n    onHeaderSelect: onHeaderSelect,\n    navigationIcons: navigationIcons,\n    showWeekNumbers: props.showWeekNumbers,\n    firstWeekOfYear: props.firstWeekOfYear,\n    dateTimeFormatter: props.dateTimeFormatter,\n    showSixWeeksByDefault: props.showSixWeeksByDefault,\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates,\n    workWeekDays: props.workWeekDays,\n    componentRef: dayPicker,\n    showCloseButton: showCloseButton,\n    allFocusable: allFocusable\n  }, calendarDayProps)), isDayPickerVisible && isMonthPickerVisible && React.createElement(\"div\", {\n    className: classes.divider\n  }), isMonthPickerVisible ? React.createElement(\"div\", {\n    className: classes.monthPickerWrapper\n  }, React.createElement(CalendarMonth, __assign({\n    navigatedDate: navigatedMonth,\n    selectedDate: navigatedDay,\n    strings: strings,\n    // eslint-disable-next-line react/jsx-no-bind\n    onNavigateDate: onNavigateMonthDate,\n    today: props.today,\n    highlightCurrentMonth: highlightCurrentMonth,\n    highlightSelectedMonth: highlightSelectedMonth,\n    // eslint-disable-next-line react/jsx-no-bind\n    onHeaderSelect: onHeaderSelect,\n    navigationIcons: navigationIcons,\n    dateTimeFormatter: props.dateTimeFormatter,\n    minDate: minDate,\n    maxDate: maxDate,\n    componentRef: monthPicker\n  }, calendarMonthProps)), renderGoToTodayButton()) : renderGoToTodayButton(), React.createElement(FocusRects, null));\n});\nCalendarBase.displayName = 'CalendarBase';","map":{"version":3,"sources":["components/Calendar/Calendar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ICalendarProps, ICalendarStyleProps, ICalendarStyles } from './Calendar.types';\nimport {\n  DayOfWeek,\n  FirstWeekOfYear,\n  DateRangeType,\n  addMonths,\n  addYears,\n  DEFAULT_CALENDAR_STRINGS,\n  DEFAULT_DATE_FORMATTING,\n} from '@fluentui/date-time-utilities';\nimport { CalendarDay } from './CalendarDay/CalendarDay';\nimport { CalendarMonth } from './CalendarMonth/CalendarMonth';\nimport { ICalendarDay } from './CalendarDay/CalendarDay.types';\nimport { ICalendarMonth } from './CalendarMonth/CalendarMonth.types';\nimport {\n  css,\n  KeyCodes,\n  classNamesFunction,\n  focusAsync,\n  format,\n  FocusRects,\n  getPropsWithDefaults,\n} from '@fluentui/utilities';\nimport { useControllableValue } from '@fluentui/react-hooks';\nimport { defaultCalendarNavigationIcons } from './defaults';\n\nconst getClassNames = classNamesFunction<ICalendarStyleProps, ICalendarStyles>();\n\nconst defaultWorkWeekDays: DayOfWeek[] = [\n  DayOfWeek.Monday,\n  DayOfWeek.Tuesday,\n  DayOfWeek.Wednesday,\n  DayOfWeek.Thursday,\n  DayOfWeek.Friday,\n];\n\nconst DEFAULT_PROPS: Partial<ICalendarProps> = {\n  isMonthPickerVisible: true,\n  isDayPickerVisible: true,\n  showMonthPickerAsOverlay: false,\n  today: new Date(),\n  firstDayOfWeek: DayOfWeek.Sunday,\n  dateRangeType: DateRangeType.Day,\n  showGoToToday: true,\n  strings: DEFAULT_CALENDAR_STRINGS,\n  highlightCurrentMonth: false,\n  highlightSelectedMonth: false,\n  navigationIcons: defaultCalendarNavigationIcons,\n  showWeekNumbers: false,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateTimeFormatter: DEFAULT_DATE_FORMATTING,\n  showSixWeeksByDefault: false,\n  workWeekDays: defaultWorkWeekDays,\n  showCloseButton: false,\n  allFocusable: false,\n};\n\nfunction useDateState({ value, today = new Date(), onSelectDate }: ICalendarProps) {\n  /** The currently selected date in the calendar */\n  const [selectedDate = today, setSelectedDate] = useControllableValue(value, today);\n\n  /** The currently focused date in the day picker, but not necessarily selected */\n  const [navigatedDay = today, setNavigatedDay] = React.useState(value);\n\n  /** The currently focused date in the month picker, but not necessarily selected */\n  const [navigatedMonth = today, setNavigatedMonth] = React.useState(value);\n\n  /** If using a controlled value, when that value changes, navigate to that date */\n  const [lastSelectedDate = today, setLastSelectedDate] = React.useState(value);\n  if (value && lastSelectedDate.valueOf() !== value.valueOf()) {\n    setNavigatedDay(value);\n    setNavigatedMonth(value);\n    setLastSelectedDate(value);\n  }\n\n  const navigateMonth = (date: Date) => {\n    setNavigatedMonth(date);\n  };\n\n  const navigateDay = (date: Date) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n  };\n\n  const onDateSelected = (date: Date, selectedDateRangeArray?: Date[]) => {\n    setNavigatedMonth(date);\n    setNavigatedDay(date);\n    setSelectedDate(date);\n    onSelectDate?.(date, selectedDateRangeArray);\n  };\n\n  return [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] as const;\n}\n\nfunction useVisibilityState(props: ICalendarProps) {\n  /** State used to show/hide month picker */\n  const [isMonthPickerVisible = true, setIsMonthPickerVisible] = useControllableValue(\n    props.showMonthPickerAsOverlay ? undefined : props.isMonthPickerVisible,\n    false,\n  );\n  /** State used to show/hide day picker */\n  const [isDayPickerVisible = true, setIsDayPickerVisible] = useControllableValue(\n    props.showMonthPickerAsOverlay ? undefined : props.isDayPickerVisible,\n    true,\n  );\n\n  const toggleDayMonthPickerVisibility = () => {\n    setIsMonthPickerVisible(!isMonthPickerVisible);\n    setIsDayPickerVisible(!isDayPickerVisible);\n  };\n\n  return [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] as const;\n}\n\nfunction useFocusLogic({ componentRef }: ICalendarProps, isDayPickerVisible: boolean, isMonthPickerVisible: boolean) {\n  const dayPicker = React.useRef<ICalendarDay>(null);\n  const monthPicker = React.useRef<ICalendarMonth>(null);\n  const focusOnUpdate = React.useRef(false);\n\n  const focus = React.useCallback(() => {\n    if (isDayPickerVisible && dayPicker.current) {\n      focusAsync(dayPicker.current);\n    } else if (isMonthPickerVisible && monthPicker.current) {\n      focusAsync(monthPicker.current);\n    }\n  }, [isDayPickerVisible, isMonthPickerVisible]);\n\n  React.useImperativeHandle(componentRef, () => ({ focus }), [focus]);\n\n  React.useEffect(() => {\n    if (focusOnUpdate.current) {\n      focus();\n      focusOnUpdate.current = false;\n    }\n  });\n\n  const focusOnNextUpdate = () => {\n    focusOnUpdate.current = true;\n  };\n\n  return [dayPicker, monthPicker, focusOnNextUpdate] as const;\n}\n\nexport const CalendarBase: React.FunctionComponent<ICalendarProps> = React.forwardRef<HTMLDivElement, ICalendarProps>(\n  (propsWithoutDefaults, forwardedRef) => {\n    const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n\n    const [selectedDate, navigatedDay, navigatedMonth, onDateSelected, navigateDay, navigateMonth] = useDateState(\n      props,\n    );\n    const [isMonthPickerVisible, isDayPickerVisible, toggleDayMonthPickerVisibility] = useVisibilityState(props);\n    const [dayPicker, monthPicker, focusOnNextUpdate] = useFocusLogic(props, isDayPickerVisible, isMonthPickerVisible);\n\n    const renderGoToTodayButton = () => {\n      let goTodayEnabled = showGoToToday;\n\n      if (goTodayEnabled && today) {\n        goTodayEnabled =\n          navigatedDay.getFullYear() !== today.getFullYear() ||\n          navigatedDay.getMonth() !== today.getMonth() ||\n          navigatedMonth.getFullYear() !== today.getFullYear() ||\n          navigatedMonth.getMonth() !== today.getMonth();\n      }\n\n      return (\n        showGoToToday && (\n          <button\n            className={css('js-goToday', classes.goTodayButton)}\n            onClick={onGotoToday}\n            onKeyDown={onButtonKeyDown(onGotoToday)}\n            type=\"button\"\n            disabled={!goTodayEnabled}\n          >\n            {strings!.goToToday}\n          </button>\n        )\n      );\n    };\n\n    const onNavigateDayDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      navigateDay(date);\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n    };\n\n    const onNavigateMonthDate = (date: Date, focusOnNavigatedDay: boolean): void => {\n      if (focusOnNavigatedDay) {\n        focusOnNextUpdate();\n      }\n\n      if (!focusOnNavigatedDay) {\n        navigateMonth(date);\n        return;\n      }\n\n      if (monthPickerOnly) {\n        onDateSelected(date);\n      }\n\n      navigateDay(date);\n    };\n\n    const onHeaderSelect = props.showMonthPickerAsOverlay\n      ? (): void => {\n          toggleDayMonthPickerVisibility();\n\n          focusOnNextUpdate();\n        }\n      : undefined;\n\n    const onGotoToday = (): void => {\n      navigateDay(today!);\n      focusOnNextUpdate();\n    };\n\n    const onButtonKeyDown = (callback: () => void): ((ev: React.KeyboardEvent<HTMLButtonElement>) => void) => {\n      return (ev: React.KeyboardEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.enter:\n          case KeyCodes.space:\n            callback();\n            break;\n        }\n      };\n    };\n\n    const onDatePickerPopupKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.enter:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.backspace:\n          ev.preventDefault();\n          break;\n\n        case KeyCodes.escape:\n          props.onDismiss?.();\n          break;\n\n        case KeyCodes.pageUp:\n          if (ev.ctrlKey) {\n            // go to next year\n            navigateDay(addYears(navigatedDay, 1));\n          } else {\n            // go to next month\n            navigateDay(addMonths(navigatedDay, 1));\n          }\n          ev.preventDefault();\n          break;\n        case KeyCodes.pageDown:\n          if (ev.ctrlKey) {\n            // go to previous year\n            navigateDay(addYears(navigatedDay, -1));\n          } else {\n            // go to previous month\n            navigateDay(addMonths(navigatedDay, -1));\n          }\n          ev.preventDefault();\n          break;\n        default:\n          break;\n      }\n    };\n    const rootClass = 'ms-DatePicker';\n    const {\n      firstDayOfWeek,\n      dateRangeType,\n      strings,\n      showMonthPickerAsOverlay,\n      showGoToToday,\n      highlightCurrentMonth,\n      highlightSelectedMonth,\n      navigationIcons,\n      minDate,\n      maxDate,\n      restrictedDates,\n      className,\n      showCloseButton,\n      allFocusable,\n      styles,\n      showWeekNumbers,\n      theme,\n      calendarDayProps,\n      calendarMonthProps,\n      dateTimeFormatter,\n      today = new Date(),\n    } = props;\n    const monthPickerOnly = !showMonthPickerAsOverlay && !isDayPickerVisible;\n    const overlaidWithButton = showMonthPickerAsOverlay && showGoToToday;\n\n    const classes = getClassNames(styles, {\n      theme: theme!,\n      className,\n      isMonthPickerVisible: isMonthPickerVisible,\n      isDayPickerVisible: isDayPickerVisible,\n      monthPickerOnly: monthPickerOnly,\n      showMonthPickerAsOverlay: showMonthPickerAsOverlay,\n      overlaidWithButton: overlaidWithButton,\n      overlayedWithButton: overlaidWithButton,\n      showGoToToday: showGoToToday,\n      showWeekNumbers: showWeekNumbers,\n    });\n\n    let todayDateString: string = '';\n    let selectedDateString: string = '';\n    if (dateTimeFormatter && strings!.todayDateFormatString) {\n      todayDateString = format(strings!.todayDateFormatString, dateTimeFormatter.formatMonthDayYear(today, strings!));\n    }\n    if (dateTimeFormatter && strings!.selectedDateFormatString) {\n      selectedDateString = format(\n        strings!.selectedDateFormatString,\n        dateTimeFormatter.formatMonthDayYear(selectedDate, strings!),\n      );\n    }\n    const selectionAndTodayString = selectedDateString + ', ' + todayDateString;\n\n    return (\n      <div\n        ref={forwardedRef}\n        role=\"group\"\n        aria-label={selectionAndTodayString}\n        className={css(rootClass, classes.root, className, 'ms-slideDownIn10')}\n        onKeyDown={onDatePickerPopupKeyDown}\n      >\n        <div className={classes.liveRegion} aria-live=\"polite\" aria-atomic=\"true\">\n          <span>{selectedDateString}</span>\n        </div>\n        {isDayPickerVisible && (\n          <CalendarDay\n            selectedDate={selectedDate!}\n            navigatedDate={navigatedDay!}\n            today={props.today}\n            onSelectDate={onDateSelected}\n            // eslint-disable-next-line react/jsx-no-bind\n            onNavigateDate={onNavigateDayDate}\n            onDismiss={props.onDismiss}\n            firstDayOfWeek={firstDayOfWeek!}\n            dateRangeType={dateRangeType!}\n            strings={strings!}\n            // eslint-disable-next-line react/jsx-no-bind\n            onHeaderSelect={onHeaderSelect}\n            navigationIcons={navigationIcons!}\n            showWeekNumbers={props.showWeekNumbers}\n            firstWeekOfYear={props.firstWeekOfYear!}\n            dateTimeFormatter={props.dateTimeFormatter!}\n            showSixWeeksByDefault={props.showSixWeeksByDefault}\n            minDate={minDate}\n            maxDate={maxDate}\n            restrictedDates={restrictedDates}\n            workWeekDays={props.workWeekDays}\n            componentRef={dayPicker}\n            showCloseButton={showCloseButton}\n            allFocusable={allFocusable}\n            {...calendarDayProps} // at end of list so consumer's custom functions take precedence\n          />\n        )}\n        {isDayPickerVisible && isMonthPickerVisible && <div className={classes.divider} />}\n        {isMonthPickerVisible ? (\n          <div className={classes.monthPickerWrapper}>\n            <CalendarMonth\n              navigatedDate={navigatedMonth}\n              selectedDate={navigatedDay}\n              strings={strings!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onNavigateDate={onNavigateMonthDate}\n              today={props.today}\n              highlightCurrentMonth={highlightCurrentMonth!}\n              highlightSelectedMonth={highlightSelectedMonth!}\n              // eslint-disable-next-line react/jsx-no-bind\n              onHeaderSelect={onHeaderSelect}\n              navigationIcons={navigationIcons!}\n              dateTimeFormatter={props.dateTimeFormatter!}\n              minDate={minDate}\n              maxDate={maxDate}\n              componentRef={monthPicker}\n              {...calendarMonthProps} // at end of list so consumer's custom functions take precedence\n            />\n            {renderGoToTodayButton()}\n          </div>\n        ) : (\n          renderGoToTodayButton()\n        )}\n        <FocusRects />\n      </div>\n    );\n  },\n);\nCalendarBase.displayName = 'CalendarBase';\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}