{"ast":null,"code":"import { useTheme } from './useTheme';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\n\nvar graphGet = function (graphNode, path) {\n  for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n    var key = path_1[_i];\n    graphNode = graphNode.get(key);\n\n    if (!graphNode) {\n      return;\n    }\n  }\n\n  return graphNode;\n};\n\nvar graphSet = function (graphNode, path, value) {\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n    var current = graphNode.get(key);\n\n    if (!current) {\n      current = new Map();\n      graphNode.set(key, current);\n    }\n\n    graphNode = current;\n  }\n\n  graphNode.set(path[path.length - 1], value);\n};\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n */\n\n\nexport function makeStyles(styleOrFunction) {\n  // Create graph of inputs to map to output.\n  var graph = new Map();\n  return function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var theme = options.theme;\n    var win = useWindow();\n    var contextualTheme = useTheme();\n    theme = theme || contextualTheme;\n    var renderer = mergeStylesRenderer;\n    var id = renderer.getId();\n    var isStyleFunction = typeof styleOrFunction === 'function';\n    var path = isStyleFunction ? [id, win, theme] : [id, win];\n    var value = graphGet(graph, path);\n\n    if (!value) {\n      var styles = isStyleFunction ? styleOrFunction(theme) : styleOrFunction;\n      value = mergeStylesRenderer.renderStyles(styles, {\n        targetWindow: win,\n        rtl: !!theme.rtl\n      });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}","map":{"version":3,"sources":["utilities/ThemeProvider/makeStyles.ts"],"names":[],"mappings":"AAEA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,SAAT,QAA0B,iCAA1B;AACA,SAAS,mBAAT,QAAoC,sCAApC;;AAEA,IAAM,QAAQ,GAAG,UAAC,SAAD,EAA2B,IAA3B,EAAsC;AACrD,OAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAlB,EAAkB,EAAA,GAAA,MAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAwB;AAAnB,QAAM,GAAG,GAAA,MAAA,CAAA,EAAA,CAAT;AACH,IAAA,SAAS,GAAG,SAAS,CAAC,GAAV,CAAc,GAAd,CAAZ;;AAEA,QAAI,CAAC,SAAL,EAAgB;AACd;AACD;AACF;;AAED,SAAO,SAAP;AACD,CAVD;;AAYA,IAAM,QAAQ,GAAG,UAAC,SAAD,EAA2B,IAA3B,EAAwC,KAAxC,EAAkD;AACjE,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAAlC,EAAqC,CAAC,EAAtC,EAA0C;AACxC,QAAM,GAAG,GAAG,IAAI,CAAC,CAAD,CAAhB;AAEA,QAAI,OAAO,GAAG,SAAS,CAAC,GAAV,CAAc,GAAd,CAAd;;AAEA,QAAI,CAAC,OAAL,EAAc;AACZ,MAAA,OAAO,GAAG,IAAI,GAAJ,EAAV;AAEA,MAAA,SAAS,CAAC,GAAV,CAAc,GAAd,EAAmB,OAAnB;AACD;;AAED,IAAA,SAAS,GAAG,OAAZ;AACD;;AAED,EAAA,SAAS,CAAC,GAAV,CAAc,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAlB,EAAqC,KAArC;AACD,CAhBD;AAuBA;;;;;AAKG;;;AACH,OAAM,SAAU,UAAV,CACJ,eADI,EACsD;AAE1D;AACA,MAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;AAEA,SAAO,UAAC,OAAD,EAA+B;AAA9B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA8B;;AAC9B,QAAA,KAAK,GAAK,OAAO,CAAZ,KAAL;AACN,QAAM,GAAG,GAAG,SAAS,EAArB;AACA,QAAM,eAAe,GAAG,QAAQ,EAAhC;AAEA,IAAA,KAAK,GAAG,KAAK,IAAI,eAAjB;AACA,QAAM,QAAQ,GAAG,mBAAjB;AAEA,QAAM,EAAE,GAAG,QAAQ,CAAC,KAAT,EAAX;AACA,QAAM,eAAe,GAAG,OAAO,eAAP,KAA2B,UAAnD;AACA,QAAM,IAAI,GAAG,eAAe,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,KAAV,CAAH,GAAsB,CAAC,EAAD,EAAK,GAAL,CAAlD;AACA,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAD,EAAQ,IAAR,CAApB;;AAEA,QAAI,CAAC,KAAL,EAAY;AACV,UAAM,MAAM,GAAG,eAAe,GAAI,eAA+C,CAAC,KAAD,CAAnD,GAA8D,eAA5F;AAEA,MAAA,KAAK,GAAG,mBAAmB,CAAC,YAApB,CAAiC,MAAjC,EAAyC;AAAE,QAAA,YAAY,EAAE,GAAhB;AAAqB,QAAA,GAAG,EAAE,CAAC,CAAC,KAAM,CAAC;AAAnC,OAAzC,CAAR;AACA,MAAA,QAAQ,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,CAAR;AACD;;AAED,WAAO,KAAP;AACD,GArBD;AAsBD","sourcesContent":["import { IStyle } from '@fluentui/style-utilities';\nimport { Theme } from '@fluentui/theme';\nimport { useTheme } from './useTheme';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\n\nconst graphGet = (graphNode: Map<any, any>, path: any[]): any | undefined => {\n  for (const key of path) {\n    graphNode = graphNode.get(key);\n\n    if (!graphNode) {\n      return;\n    }\n  }\n\n  return graphNode;\n};\n\nconst graphSet = (graphNode: Map<any, any>, path: any[], value: any) => {\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n\n    let current = graphNode.get(key);\n\n    if (!current) {\n      current = new Map();\n\n      graphNode.set(key, current);\n    }\n\n    graphNode = current;\n  }\n\n  graphNode.set(path[path.length - 1], value);\n};\n\n/** Options that can be provided to the hook generated by `makeStyles`. */\nexport type UseStylesOptions = {\n  theme?: Theme;\n};\n\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n */\nexport function makeStyles<TStyleSet extends { [key: string]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n): (options?: UseStylesOptions) => { [key in keyof TStyleSet]: string } {\n  // Create graph of inputs to map to output.\n  const graph = new Map();\n\n  return (options: UseStylesOptions = {}) => {\n    let { theme } = options;\n    const win = useWindow();\n    const contextualTheme = useTheme();\n\n    theme = theme || contextualTheme;\n    const renderer = mergeStylesRenderer;\n\n    const id = renderer.getId();\n    const isStyleFunction = typeof styleOrFunction === 'function';\n    const path = isStyleFunction ? [id, win, theme] : [id, win];\n    let value = graphGet(graph, path);\n\n    if (!value) {\n      const styles = isStyleFunction ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!) : styleOrFunction;\n\n      value = mergeStylesRenderer.renderStyles(styles, { targetWindow: win, rtl: !!theme!.rtl });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}