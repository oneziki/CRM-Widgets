{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, format, divProperties, getNativeProps } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { RatingSize } from './Rating.types';\nimport { useId, useWarnings, useControllableValue } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\n\nvar RatingStar = function (props) {\n  return React.createElement(\"div\", {\n    className: props.classNames.ratingStar\n  }, React.createElement(Icon, {\n    className: props.classNames.ratingStarBack,\n    iconName: props.icon\n  }), !props.disabled && React.createElement(Icon, {\n    className: props.classNames.ratingStarFront,\n    iconName: props.icon,\n    style: {\n      width: props.fillPercentage + '%'\n    }\n  }));\n};\n\nvar useComponentRef = function (componentRef, rating) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      rating: rating\n    };\n  }, [rating]);\n};\n\nvar useDebugWarnings = function (props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Rating',\n      props: props,\n      controlledUsage: {\n        valueProp: 'rating',\n        defaultValueProp: 'defaultRating',\n        onChangeProp: 'onChange',\n        readOnlyProp: 'readOnly'\n      }\n    });\n  }\n};\n\nvar getClampedRating = function (rating, min, max) {\n  return Math.min(Math.max(rating !== null && rating !== void 0 ? rating : min, min), max);\n};\n\nvar getFillingPercentage = function (starNum, displayRating) {\n  var ceilValue = Math.ceil(displayRating);\n  var fillPercentage = 100;\n\n  if (starNum === displayRating) {\n    fillPercentage = 100;\n  } else if (starNum === ceilValue) {\n    fillPercentage = 100 * (displayRating % 1);\n  } else if (starNum > ceilValue) {\n    fillPercentage = 0;\n  }\n\n  return fillPercentage;\n};\n\nvar getStarId = function (id, starNum) {\n  return id + \"-star-\" + (starNum - 1);\n};\n\nexport var RatingBase = React.forwardRef(function (props, ref) {\n  var _a;\n\n  var id = useId('Rating');\n  var labelId = useId('RatingLabel');\n  var ariaLabel = props.ariaLabel,\n      ariaLabelFormat = props.ariaLabelFormat,\n      disabled = props.disabled,\n      getAriaLabel = props.getAriaLabel,\n      styles = props.styles,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.min,\n      // eslint-disable-next-line deprecation/deprecation\n  minFromProps = _b === void 0 ? props.allowZeroStars ? 0 : 1 : _b,\n      _c = props.max,\n      max = _c === void 0 ? 5 : _c,\n      readOnly = props.readOnly,\n      size = props.size,\n      theme = props.theme,\n      _d = props.icon,\n      icon = _d === void 0 ? 'FavoriteStarFill' : _d,\n      _e = props.unselectedIcon,\n      unselectedIcon = _e === void 0 ? 'FavoriteStar' : _e,\n      onRenderStar = props.onRenderStar; // Ensure min is >= 0 to avoid issues elsewhere\n\n  var min = Math.max(minFromProps, 0);\n\n  var _f = useControllableValue(props.rating, props.defaultRating, props.onChange),\n      rating = _f[0],\n      setRating = _f[1];\n  /** Rating clamped within valid range. Will be `min` if `rating` is undefined. */\n\n\n  var displayRating = getClampedRating(rating, min, max);\n  useDebugWarnings(props);\n  useComponentRef(props.componentRef, displayRating);\n  var divProps = getNativeProps(props, divProperties);\n  var classNames = getClassNames(styles, {\n    disabled: disabled,\n    readOnly: readOnly,\n    theme: theme\n  });\n  var readOnlyAriaLabel = (_a = getAriaLabel) === null || _a === void 0 ? void 0 : _a(displayRating, max);\n  var normalModeAriaLabel = ariaLabel ? ariaLabel : readOnlyAriaLabel;\n  var stars = [];\n\n  var renderStar = function (starProps, renderer) {\n    return renderer ? renderer(starProps) : React.createElement(RatingStar, __assign({}, starProps));\n  };\n\n  var _loop_1 = function (starNum) {\n    var fillPercentage = getFillingPercentage(starNum, displayRating);\n\n    var onSelectStar = function (ev) {\n      // Use the actual rating (not display value) here, to ensure that we update if the actual\n      // rating is undefined and the user clicks the first star.\n      if (rating === undefined || Math.ceil(rating) !== starNum) {\n        setRating(starNum, ev);\n      }\n    };\n\n    stars.push(React.createElement(\"button\", __assign({\n      className: css(classNames.ratingButton, size === RatingSize.Large ? classNames.ratingStarIsLarge : classNames.ratingStarIsSmall),\n      id: getStarId(id, starNum),\n      key: starNum\n    }, starNum === Math.ceil(displayRating) && {\n      'data-is-current': true\n    }, {\n      onFocus: onSelectStar,\n      onClick: onSelectStar,\n      disabled: !!(disabled || readOnly),\n      role: \"radio\",\n      \"aria-hidden\": readOnly ? 'true' : undefined,\n      type: \"button\",\n      \"aria-checked\": starNum === Math.ceil(displayRating)\n    }), React.createElement(\"span\", {\n      id: labelId + \"-\" + starNum,\n      className: classNames.labelText\n    }, format(ariaLabelFormat || '', starNum, max)), renderStar({\n      fillPercentage: fillPercentage,\n      disabled: disabled,\n      classNames: classNames,\n      icon: fillPercentage > 0 ? icon : unselectedIcon,\n      starNum: starNum\n    }, onRenderStar)));\n  };\n\n  for (var starNum = 1; starNum <= max; starNum++) {\n    _loop_1(starNum);\n  }\n\n  var rootSizeClass = size === RatingSize.Large ? classNames.rootIsLarge : classNames.rootIsSmall;\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    className: css('ms-Rating-star', classNames.root, rootSizeClass),\n    \"aria-label\": !readOnly ? normalModeAriaLabel : undefined,\n    id: id,\n    role: !readOnly ? 'radiogroup' : undefined\n  }, divProps), React.createElement(FocusZone, __assign({\n    direction: FocusZoneDirection.bidirectional,\n    className: css(classNames.ratingFocusZone, rootSizeClass),\n    defaultActiveElement: '#' + getStarId(id, Math.ceil(displayRating))\n  }, readOnly && {\n    allowFocusRoot: true,\n    disabled: true,\n    role: 'textbox',\n    'aria-label': readOnlyAriaLabel,\n    'aria-readonly': true,\n    'data-is-focusable': true,\n    tabIndex: 0\n  }), stars));\n});\nRatingBase.displayName = 'RatingBase';","map":{"version":3,"sources":["components/Rating/Rating.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, css, format, divProperties, getNativeProps } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { IRatingProps, RatingSize, IRatingStyleProps, IRatingStyles, IRating, IRatingStarProps } from './Rating.types';\nimport { useId, useWarnings, useControllableValue } from '@fluentui/react-hooks';\n\nconst getClassNames = classNamesFunction<IRatingStyleProps, IRatingStyles>();\n\nconst RatingStar = (props: IRatingStarProps) => {\n  return (\n    <div className={props.classNames.ratingStar}>\n      <Icon className={props.classNames.ratingStarBack} iconName={props.icon} />\n      {!props.disabled && (\n        <Icon\n          className={props.classNames.ratingStarFront}\n          iconName={props.icon}\n          style={{ width: props.fillPercentage + '%' }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst useComponentRef = (componentRef: React.Ref<IRating> | undefined, rating: number) => {\n  React.useImperativeHandle(\n    componentRef,\n    () => ({\n      rating,\n    }),\n    [rating],\n  );\n};\n\nconst useDebugWarnings = (props: IRatingProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Rating',\n      props,\n      controlledUsage: {\n        valueProp: 'rating',\n        defaultValueProp: 'defaultRating',\n        onChangeProp: 'onChange',\n        readOnlyProp: 'readOnly',\n      },\n    });\n  }\n};\n\nconst getClampedRating = (rating: number | undefined, min: number, max: number): number => {\n  return Math.min(Math.max(rating ?? min, min), max);\n};\n\nconst getFillingPercentage = (starNum: number, displayRating: number): number => {\n  const ceilValue = Math.ceil(displayRating);\n  let fillPercentage = 100;\n\n  if (starNum === displayRating) {\n    fillPercentage = 100;\n  } else if (starNum === ceilValue) {\n    fillPercentage = 100 * (displayRating % 1);\n  } else if (starNum > ceilValue) {\n    fillPercentage = 0;\n  }\n  return fillPercentage;\n};\n\nconst getStarId = (id: string, starNum: number) => {\n  return `${id}-star-${starNum - 1}`;\n};\n\nexport const RatingBase: React.FunctionComponent<IRatingProps> = React.forwardRef<HTMLDivElement, IRatingProps>(\n  (props, ref) => {\n    const id = useId('Rating');\n    const labelId = useId('RatingLabel');\n    const {\n      ariaLabel,\n      ariaLabelFormat,\n      disabled,\n      getAriaLabel,\n      styles,\n      // eslint-disable-next-line deprecation/deprecation\n      min: minFromProps = props.allowZeroStars ? 0 : 1,\n      max = 5,\n      readOnly,\n      size,\n      theme,\n      icon = 'FavoriteStarFill',\n      unselectedIcon = 'FavoriteStar',\n      onRenderStar,\n    } = props;\n\n    // Ensure min is >= 0 to avoid issues elsewhere\n    const min = Math.max(minFromProps, 0);\n\n    const [rating, setRating] = useControllableValue(props.rating, props.defaultRating, props.onChange);\n    /** Rating clamped within valid range. Will be `min` if `rating` is undefined. */\n    const displayRating = getClampedRating(rating, min, max);\n\n    useDebugWarnings(props);\n\n    useComponentRef(props.componentRef, displayRating);\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties);\n\n    const classNames = getClassNames(styles!, {\n      disabled,\n      readOnly,\n      theme: theme!,\n    });\n\n    const readOnlyAriaLabel = getAriaLabel?.(displayRating, max);\n    const normalModeAriaLabel = ariaLabel ? ariaLabel : readOnlyAriaLabel;\n\n    const stars: JSX.Element[] = [];\n\n    const renderStar = (starProps: IRatingStarProps, renderer?: IRatingProps['onRenderStar']) =>\n      renderer ? renderer(starProps) : <RatingStar {...starProps} />;\n\n    for (let starNum = 1; starNum <= max; starNum++) {\n      const fillPercentage = getFillingPercentage(starNum, displayRating);\n\n      const onSelectStar = (ev: React.SyntheticEvent<HTMLElement>): void => {\n        // Use the actual rating (not display value) here, to ensure that we update if the actual\n        // rating is undefined and the user clicks the first star.\n        if (rating === undefined || Math.ceil(rating) !== starNum) {\n          setRating(starNum, ev);\n        }\n      };\n\n      stars.push(\n        <button\n          className={css(\n            classNames.ratingButton,\n            size === RatingSize.Large ? classNames.ratingStarIsLarge : classNames.ratingStarIsSmall,\n          )}\n          id={getStarId(id, starNum)}\n          key={starNum}\n          {...(starNum === Math.ceil(displayRating) && { 'data-is-current': true })}\n          onFocus={onSelectStar}\n          onClick={onSelectStar} // For Safari & Firefox on OSX\n          disabled={!!(disabled || readOnly)}\n          role=\"radio\"\n          aria-hidden={readOnly ? 'true' : undefined}\n          type=\"button\"\n          aria-checked={starNum === Math.ceil(displayRating)}\n        >\n          <span id={`${labelId}-${starNum}`} className={classNames.labelText}>\n            {format(ariaLabelFormat || '', starNum, max)}\n          </span>\n          {renderStar(\n            {\n              fillPercentage,\n              disabled,\n              classNames,\n              icon: fillPercentage > 0 ? icon : unselectedIcon,\n              starNum,\n            },\n            onRenderStar,\n          )}\n        </button>,\n      );\n    }\n\n    const rootSizeClass = size === RatingSize.Large ? classNames.rootIsLarge : classNames.rootIsSmall;\n\n    return (\n      <div\n        ref={ref}\n        className={css('ms-Rating-star', classNames.root, rootSizeClass)}\n        aria-label={!readOnly ? normalModeAriaLabel : undefined}\n        id={id}\n        role={!readOnly ? 'radiogroup' : undefined}\n        {...divProps}\n      >\n        <FocusZone\n          direction={FocusZoneDirection.bidirectional}\n          className={css(classNames.ratingFocusZone, rootSizeClass)}\n          defaultActiveElement={'#' + getStarId(id, Math.ceil(displayRating))}\n          // When in read-only mode, we allow focus (per ARIA standards) and set up ARIA attributes to indicate element\n          // is read-only. https://www.w3.org/TR/wai-aria-1.1/#aria-readonly\n          {...(readOnly && {\n            allowFocusRoot: true,\n            disabled: true,\n            role: 'textbox',\n            'aria-label': readOnlyAriaLabel,\n            'aria-readonly': true,\n            'data-is-focusable': true,\n            tabIndex: 0,\n          })}\n        >\n          {stars}\n        </FocusZone>\n      </div>\n    );\n  },\n);\nRatingBase.displayName = 'RatingBase';\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}