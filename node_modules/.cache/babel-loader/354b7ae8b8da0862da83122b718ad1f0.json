{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isRestrictedDate } from './isRestrictedDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\n\nexport var findAvailableDate = function (options) {\n  var targetDate = options.targetDate,\n      initialDate = options.initialDate,\n      direction = options.direction,\n      restrictedDateOptions = __rest(options, [\"targetDate\", \"initialDate\", \"direction\"]);\n\n  var availableDate = targetDate; // if the target date is available, return it immediately\n\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};","map":{"version":3,"sources":["dateGrid/findAvailableDate.ts"],"names":[],"mappings":";AAEA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA,SAAS,cAAT,QAA+B,kBAA/B;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,eAAT,EAA0B,OAA1B,QAAyC,sBAAzC;AAEA;;;AAGG;;AACH,OAAO,IAAM,iBAAiB,GAAG,UAAC,OAAD,EAA+B;AACtD,MAAA,UAAU,GAAuD,OAAO,CAA9D,UAAV;AAAA,MAAY,WAAW,GAA0C,OAAO,CAAjD,WAAvB;AAAA,MAAyB,SAAS,GAA+B,OAAO,CAAtC,SAAlC;AAAA,MAAuC,qBAAqB,GAAA,MAAA,CAAK,OAAL,EAA9D,CAAA,YAAA,EAAA,aAAA,EAAA,WAAA,CAA8D,CAA5D;;AACR,MAAI,aAAa,GAAG,UAApB,CAF8D,CAG9D;;AACA,MAAI,CAAC,gBAAgB,CAAC,UAAD,EAAa,qBAAb,CAArB,EAA0D;AACxD,WAAO,UAAP;AACD;;AAED,SACE,eAAe,CAAC,WAAD,EAAc,aAAd,CAAf,KAAgD,CAAhD,IACA,gBAAgB,CAAC,aAAD,EAAgB,qBAAhB,CADhB,IAEA,CAAC,cAAc,CAAC,aAAD,EAAgB,qBAAhB,CAFf,IAGA,CAAC,eAAe,CAAC,aAAD,EAAgB,qBAAhB,CAJlB,EAKE;AACA,IAAA,aAAa,GAAG,OAAO,CAAC,aAAD,EAAgB,SAAhB,CAAvB;AACD;;AAED,MAAI,eAAe,CAAC,WAAD,EAAc,aAAd,CAAf,KAAgD,CAAhD,IAAqD,CAAC,gBAAgB,CAAC,aAAD,EAAgB,qBAAhB,CAA1E,EAAkH;AAChH,WAAO,aAAP;AACD;;AAED,SAAO,SAAP;AACD,CAtBM","sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}