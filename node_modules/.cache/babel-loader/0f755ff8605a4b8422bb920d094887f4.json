{"ast":null,"code":"import * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getClassNames = classNamesFunction();\n/** Validate if the cell's color is white or not to apply whiteCell style */\n\nvar isWhiteCell = function (inputColor) {\n  var _a;\n\n  var currentColor = getColorFromString(inputColor);\n  return ((_a = currentColor) === null || _a === void 0 ? void 0 : _a.hex) === 'ffffff';\n};\n\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nexport var ColorPickerGridCellBase = function (props) {\n  var item = props.item,\n      // eslint-disable-next-line deprecation/deprecation\n  _a = props.idPrefix,\n      // eslint-disable-next-line deprecation/deprecation\n  idPrefix = _a === void 0 ? props.id : _a,\n      _b = props.selected,\n      selected = _b === void 0 ? false : _b,\n      _c = props.disabled,\n      disabled = _c === void 0 ? false : _c,\n      styles = props.styles,\n      _d = props.circle,\n      circle = _d === void 0 ? true : _d,\n      color = props.color,\n      onClick = props.onClick,\n      onHover = props.onHover,\n      onFocus = props.onFocus,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onWheel = props.onWheel,\n      onKeyDown = props.onKeyDown,\n      height = props.height,\n      width = props.width,\n      borderWidth = props.borderWidth;\n  var classNames = getClassNames(styles, {\n    theme: props.theme,\n    disabled: disabled,\n    selected: selected,\n    circle: circle,\n    isWhite: isWhiteCell(color),\n    height: height,\n    width: width,\n    borderWidth: borderWidth\n  }); // Render the core of a color cell\n\n  var onRenderColorOption = function (colorOption) {\n    var _a;\n\n    var svgClassName = classNames.svg; // Build an SVG for the cell with the given shape and color properties\n\n    return React.createElement(\"svg\", {\n      className: svgClassName,\n      viewBox: \"0 0 20 20\",\n      fill: (_a = getColorFromString(colorOption.color)) === null || _a === void 0 ? void 0 : _a.str\n    }, circle ? React.createElement(\"circle\", {\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"50%\"\n    }) : React.createElement(\"rect\", {\n      width: \"100%\",\n      height: \"100%\"\n    }));\n  };\n\n  return React.createElement(ButtonGridCell, {\n    item: item,\n    id: idPrefix + \"-\" + item.id + \"-\" + item.index,\n    key: item.id,\n    disabled: disabled,\n    role: 'gridcell',\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderItem: onRenderColorOption,\n    selected: selected,\n    onClick: onClick,\n    onHover: onHover,\n    onFocus: onFocus,\n    label: item.label,\n    className: classNames.colorCell,\n    getClassNames: getColorPickerGridCellButtonClassNames,\n    index: item.index,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onWheel: onWheel,\n    onKeyDown: onKeyDown\n  });\n};","map":{"version":3,"sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets, IProcessedStyleSet } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\n/** Validate if the cell's color is white or not to apply whiteCell style */\nconst isWhiteCell = (inputColor: string): boolean => {\n  const currentColor = getColorFromString(inputColor!);\n  return currentColor?.hex === 'ffffff';\n};\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nexport const ColorPickerGridCellBase: React.FunctionComponent<IColorPickerGridCellProps> = props => {\n  const {\n    item,\n    // eslint-disable-next-line deprecation/deprecation\n    idPrefix = props.id,\n    selected = false,\n    disabled = false,\n    styles,\n    circle = true,\n    color,\n    onClick,\n    onHover,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onWheel,\n    onKeyDown,\n    height,\n    width,\n    borderWidth,\n  } = props;\n\n  const classNames: IProcessedStyleSet<IColorPickerGridCellStyles> = getClassNames(styles!, {\n    theme: props.theme!,\n    disabled,\n    selected,\n    circle,\n    isWhite: isWhiteCell(color!),\n    height,\n    width,\n    borderWidth,\n  });\n\n  // Render the core of a color cell\n  const onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    const svgClassName = classNames.svg;\n\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={svgClassName} viewBox=\"0 0 20 20\" fill={getColorFromString(colorOption.color as string)?.str}>\n        {circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  return (\n    <ButtonGridCell\n      item={item}\n      id={`${idPrefix}-${item.id}-${item.index}`}\n      key={item.id}\n      disabled={disabled}\n      role={'gridcell'}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderColorOption}\n      selected={selected}\n      onClick={onClick}\n      onHover={onHover}\n      onFocus={onFocus}\n      label={item.label}\n      className={classNames.colorCell}\n      getClassNames={getColorPickerGridCellButtonClassNames}\n      index={item.index}\n      onMouseEnter={onMouseEnter}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onWheel={onWheel}\n      onKeyDown={onKeyDown}\n    />\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}