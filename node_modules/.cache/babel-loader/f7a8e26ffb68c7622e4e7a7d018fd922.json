{"ast":null,"code":"import { mergeThemes } from '@fluentui/theme';\nimport * as React from 'react';\nimport { useTheme } from './useTheme';\nimport { getId } from '@fluentui/utilities';\nvar themeToIdMap = new Map();\n\nvar getThemeId = function () {\n  var themes = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    themes[_i] = arguments[_i];\n  }\n\n  var ids = [];\n\n  for (var _a = 0, themes_1 = themes; _a < themes_1.length; _a++) {\n    var theme = themes_1[_a];\n\n    if (theme) {\n      var id = theme.id || themeToIdMap.get(theme);\n\n      if (!id) {\n        id = getId('');\n        themeToIdMap.set(theme, id);\n      }\n\n      ids.push(id);\n    }\n  }\n\n  return ids.join('-');\n};\n\nexport var useThemeProviderState = function (draftState) {\n  var userTheme = draftState.theme; // Pull contextual theme.\n\n  var parentTheme = useTheme(); // Update the incoming theme with a memoized version of the merged theme.\n\n  var theme = draftState.theme = React.useMemo(function () {\n    var mergedTheme = mergeThemes(parentTheme, userTheme);\n    mergedTheme.id = getThemeId(parentTheme, userTheme);\n    return mergedTheme;\n  }, [parentTheme, userTheme]);\n  draftState.customizerContext = React.useMemo(function () {\n    return {\n      customizations: {\n        inCustomizerContext: true,\n        settings: {\n          theme: theme\n        },\n        scopedSettings: theme.components || {}\n      }\n    };\n  }, [theme]);\n\n  if (draftState.theme.rtl !== parentTheme.rtl) {\n    draftState.dir = draftState.theme.rtl ? 'rtl' : 'ltr';\n  }\n};","map":{"version":3,"sources":["utilities/ThemeProvider/useThemeProviderState.tsx"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAAiD,iBAAjD;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,KAAT,QAA0C,qBAA1C;AAEA,IAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;;AAEA,IAAM,UAAU,GAAG,YAAA;AAAC,MAAA,MAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA+C;AAA/C,IAAA,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAClB,MAAM,GAAG,GAAa,EAAtB;;AAEA,OAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,QAAA,GAAA,MAApB,EAAoB,EAAA,GAAA,QAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAA4B;AAAvB,QAAM,KAAK,GAAA,QAAA,CAAA,EAAA,CAAX;;AACH,QAAI,KAAJ,EAAW;AACT,UAAI,EAAE,GAAI,KAAe,CAAC,EAAhB,IAAsB,YAAY,CAAC,GAAb,CAAiB,KAAjB,CAAhC;;AAEA,UAAI,CAAC,EAAL,EAAS;AACP,QAAA,EAAE,GAAG,KAAK,CAAC,EAAD,CAAV;AACA,QAAA,YAAY,CAAC,GAAb,CAAiB,KAAjB,EAAwB,EAAxB;AACD;;AACD,MAAA,GAAG,CAAC,IAAJ,CAAS,EAAT;AACD;AACF;;AAED,SAAO,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAP;AACD,CAhBD;;AAkBA,OAAO,IAAM,qBAAqB,GAAG,UAAC,UAAD,EAA+B;AAClE,MAAM,SAAS,GAAiB,UAAU,CAAC,KAA3C,CADkE,CAGlE;;AACA,MAAM,WAAW,GAAG,QAAQ,EAA5B,CAJkE,CAMlE;;AACA,MAAM,KAAK,GAAI,UAAU,CAAC,KAAX,GAAmB,KAAK,CAAC,OAAN,CAAqB,YAAA;AACrD,QAAM,WAAW,GAAU,WAAW,CAAC,WAAD,EAAc,SAAd,CAAtC;AAEA,IAAA,WAAW,CAAC,EAAZ,GAAiB,UAAU,CAAC,WAAD,EAAc,SAAd,CAA3B;AAEA,WAAO,WAAP;AACD,GANiC,EAM/B,CAAC,WAAD,EAAc,SAAd,CAN+B,CAAlC;AAQA,EAAA,UAAU,CAAC,iBAAX,GAA+B,KAAK,CAAC,OAAN,CAC7B,YAAA;AAAM,WAAC;AACL,MAAA,cAAc,EAAE;AACd,QAAA,mBAAmB,EAAE,IADP;AAEd,QAAA,QAAQ,EAAE;AAAE,UAAA,KAAK,EAAA;AAAP,SAFI;AAGd,QAAA,cAAc,EAAE,KAAK,CAAC,UAAN,IAAoB;AAHtB;AADX,KAAD;AAMJ,GAP2B,EAQ7B,CAAC,KAAD,CAR6B,CAA/B;;AAWA,MAAI,UAAU,CAAC,KAAX,CAAiB,GAAjB,KAAyB,WAAW,CAAC,GAAzC,EAA8C;AAC5C,IAAA,UAAU,CAAC,GAAX,GAAiB,UAAU,CAAC,KAAX,CAAiB,GAAjB,GAAuB,KAAvB,GAA+B,KAAhD;AACD;AACF,CA7BM","sourcesContent":["import { mergeThemes, PartialTheme, Theme } from '@fluentui/theme';\nimport * as React from 'react';\nimport { ThemeProviderState } from './ThemeProvider.types';\nimport { useTheme } from './useTheme';\nimport { getId, ICustomizerContext } from '@fluentui/utilities';\n\nconst themeToIdMap = new Map<Object, string>();\n\nconst getThemeId = (...themes: (Theme | PartialTheme | undefined)[]) => {\n  const ids: string[] = [];\n\n  for (const theme of themes) {\n    if (theme) {\n      let id = (theme as Theme).id || themeToIdMap.get(theme);\n\n      if (!id) {\n        id = getId('');\n        themeToIdMap.set(theme, id);\n      }\n      ids.push(id);\n    }\n  }\n\n  return ids.join('-');\n};\n\nexport const useThemeProviderState = (draftState: ThemeProviderState) => {\n  const userTheme: PartialTheme = draftState.theme;\n\n  // Pull contextual theme.\n  const parentTheme = useTheme();\n\n  // Update the incoming theme with a memoized version of the merged theme.\n  const theme = (draftState.theme = React.useMemo<Theme>(() => {\n    const mergedTheme: Theme = mergeThemes(parentTheme, userTheme);\n\n    mergedTheme.id = getThemeId(parentTheme, userTheme);\n\n    return mergedTheme;\n  }, [parentTheme, userTheme]));\n\n  draftState.customizerContext = React.useMemo<ICustomizerContext>(\n    () => ({\n      customizations: {\n        inCustomizerContext: true,\n        settings: { theme },\n        scopedSettings: theme.components || {},\n      },\n    }),\n    [theme],\n  );\n\n  if (draftState.theme.rtl !== parentTheme.rtl) {\n    draftState.dir = draftState.theme.rtl ? 'rtl' : 'ltr';\n  }\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}