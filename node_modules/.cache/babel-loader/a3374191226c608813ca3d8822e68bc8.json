{"ast":null,"code":"import { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\n\nexport var isRestrictedDate = function (date, options) {\n  var restrictedDates = options.restrictedDates,\n      minDate = options.minDate,\n      maxDate = options.maxDate;\n\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n\n  var inRestrictedDates = restrictedDates && restrictedDates.some(function (rd) {\n    return compareDates(rd, date);\n  });\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};","map":{"version":3,"sources":["dateGrid/isRestrictedDate.ts"],"names":[],"mappings":"AACA,SAAS,YAAT,QAA6B,sBAA7B;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;;;AAIG;;AACH,OAAO,IAAM,gBAAgB,GAAG,UAAC,IAAD,EAAa,OAAb,EAA6C;AACnE,MAAA,eAAA,GAAA,OAAA,CAAA,eAAA;AAAA,MAAiB,OAAA,GAAA,OAAA,CAAA,OAAjB;AAAA,MAA0B,OAAA,GAAA,OAAA,CAAA,OAA1B;;AACR,MAAI,CAAC,eAAD,IAAoB,CAAC,OAArB,IAAgC,CAAC,OAArC,EAA8C;AAC5C,WAAO,KAAP;AACD;;AACD,MAAM,iBAAiB,GAAG,eAAe,IAAI,eAAe,CAAC,IAAhB,CAAqB,UAAC,EAAD,EAAS;AAAK,WAAA,YAAY,CAAC,EAAD,EAAZ,IAAY,CAAZ;AAAsB,GAAzD,CAA7C;AACA,SAAO,iBAAiB,IAAI,eAAe,CAAC,IAAD,EAAO,OAAP,CAApC,IAAuD,cAAc,CAAC,IAAD,EAAO,OAAP,CAA5E;AACD,CAPM","sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\nexport const isRestrictedDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { restrictedDates, minDate, maxDate } = options;\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n  const inRestrictedDates = restrictedDates && restrictedDates.some((rd: Date) => compareDates(rd, date));\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}