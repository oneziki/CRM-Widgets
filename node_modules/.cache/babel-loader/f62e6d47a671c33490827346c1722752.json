{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { getNativeProps, divProperties, classNamesFunction, getDocument, memoizeFunction, getRTL, Customizer, useFocusRects } from '../../Utilities';\nimport { createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar getFabricTheme = memoizeFunction(function (theme, isRTL) {\n  return createTheme(__assign(__assign({}, theme), {\n    rtl: isRTL\n  }));\n});\n\nvar getDir = function (_a) {\n  var theme = _a.theme,\n      dir = _a.dir;\n  var contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  var pageDir = getRTL() ? 'rtl' : 'ltr';\n  var componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir\n  };\n};\n\nexport var FabricBase = React.forwardRef(function (props, ref) {\n  var className = props.className,\n      theme = props.theme,\n      applyTheme = props.applyTheme,\n      applyThemeToBody = props.applyThemeToBody,\n      styles = props.styles;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    applyTheme: applyTheme,\n    className: className\n  });\n  var rootElement = React.useRef(null);\n  useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n  useFocusRects(rootElement);\n  return React.createElement(React.Fragment, null, useRenderedContent(props, classNames, rootElement, ref));\n});\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(props, _a, rootElement, ref) {\n  var root = _a.root;\n  var _b = props.as,\n      Root = _b === void 0 ? 'div' : _b,\n      dir = props.dir,\n      theme = props.theme;\n  var divProps = getNativeProps(props, divProperties, ['dir']);\n\n  var _c = getDir(props),\n      rootDir = _c.rootDir,\n      needsTheme = _c.needsTheme;\n\n  var renderedContent = React.createElement(Root, __assign({\n    dir: rootDir\n  }, divProps, {\n    className: root,\n    ref: useMergedRefs(rootElement, ref)\n  })); // Create the contextual theme if component direction does not match parent direction.\n\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = // eslint-disable-next-line deprecation/deprecation\n    React.createElement(Customizer, {\n      settings: {\n        theme: getFabricTheme(theme, dir === 'rtl')\n      }\n    }, renderedContent);\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(applyThemeToBody, _a, rootElement) {\n  var bodyThemed = _a.bodyThemed;\n  React.useEffect(function () {\n    if (applyThemeToBody) {\n      var currentDoc_1 = getDocument(rootElement.current);\n\n      if (currentDoc_1) {\n        currentDoc_1.body.classList.add(bodyThemed);\n        return function () {\n          currentDoc_1.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n  return rootElement;\n}","map":{"version":3,"sources":["components/Fabric/Fabric.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  Customizer,\n  useFocusRects,\n} from '../../Utilities';\nimport { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport { IProcessedStyleSet } from '@fluentui/merge-styles';\nimport { ITheme, createTheme } from '../../Styling';\nimport { useMergedRefs } from '@fluentui/react-hooks';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = ({ theme, dir }: IFabricProps) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport const FabricBase: React.FunctionComponent<IFabricProps> = React.forwardRef<HTMLDivElement, IFabricProps>(\n  (props, ref) => {\n    const { className, theme, applyTheme, applyThemeToBody, styles } = props;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n\n    const rootElement = React.useRef<HTMLDivElement | null>(null);\n    useApplyThemeToBody(applyThemeToBody, classNames, rootElement);\n    useFocusRects(rootElement);\n\n    return <>{useRenderedContent(props, classNames, rootElement, ref)}</>;\n  },\n);\nFabricBase.displayName = 'FabricBase';\n\nfunction useRenderedContent(\n  props: IFabricProps,\n  { root }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement | undefined>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { as: Root = 'div', dir, theme } = props;\n  const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, ['dir']);\n\n  const { rootDir, needsTheme } = getDir(props);\n\n  let renderedContent = <Root dir={rootDir} {...divProps} className={root} ref={useMergedRefs(rootElement, ref)} />;\n\n  // Create the contextual theme if component direction does not match parent direction.\n  if (needsTheme) {\n    // Disabling ThemeProvider here because theme doesn't need to be re-provided by ThemeProvider if dir has changed.\n    renderedContent = (\n      // eslint-disable-next-line deprecation/deprecation\n      <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n    );\n  }\n\n  return renderedContent;\n}\n\nfunction useApplyThemeToBody(\n  applyThemeToBody: boolean | undefined,\n  { bodyThemed }: IProcessedStyleSet<IFabricStyles>,\n  rootElement: React.RefObject<HTMLDivElement | undefined>,\n) {\n  React.useEffect((): void | (() => void) => {\n    if (applyThemeToBody) {\n      const currentDoc = getDocument(rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(bodyThemed);\n        return () => {\n          currentDoc.body.classList.remove(bodyThemed);\n        };\n      }\n    }\n  }, [bodyThemed, applyThemeToBody, rootElement]);\n\n  return rootElement;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}