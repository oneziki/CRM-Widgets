{"ast":null,"code":"import { concatStyleSets, HighContrastSelector, IconFontSizes, getInputFocusStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\nvar ARROW_BUTTON_WIDTH = 23;\nvar ARROW_BUTTON_ICON_SIZE = 8;\nvar DEFAULT_HEIGHT = 32;\nvar DEFAULT_MIN_WIDTH = 86;\nvar LABEL_MARGIN = 10;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {\n      ':after': {\n        borderColor: SpinButtonBackgroundColorDisabled\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n});\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var _a, _b, _c;\n\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects; // TODO: after updating the semanticColor slots all this need to be reevaluated.\n\n  var ArrowButtonTextColor = palette.neutralSecondary;\n  var ArrowButtonTextColorHovered = semanticColors.buttonText;\n  var ArrowButtonTextColorPressed = semanticColors.buttonText;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: ARROW_BUTTON_WIDTH,\n      padding: 0,\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor,\n      selectors: {\n        '&.ms-DownButton': {\n          borderRadius: \"0 0 \" + effects.roundedCorner2 + \" 0\"\n        },\n        '&.ms-UpButton': {\n          borderRadius: \"0 \" + effects.roundedCorner2 + \" 0 0\"\n        }\n      }\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: ARROW_BUTTON_ICON_SIZE,\n      marginTop: 0,\n      marginRight: 0,\n      marginBottom: 0,\n      marginLeft: 0\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n});\nexport var getStyles = function (props) {\n  var _a, _b;\n\n  var theme = props.theme,\n      className = props.className,\n      labelPosition = props.labelPosition,\n      disabled = props.disabled,\n      isFocused = props.isFocused;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      effects = theme.effects,\n      fonts = theme.fonts;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonInputTextColor = semanticColors.inputText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  return {\n    root: [fonts.medium, {\n      outline: 'none',\n      width: '100%',\n      minWidth: DEFAULT_MIN_WIDTH\n    }, className],\n    labelWrapper: [{\n      display: 'inline-flex',\n      alignItems: 'center'\n    }, labelPosition === Position.start && {\n      height: DEFAULT_HEIGHT,\n      float: 'left',\n      marginRight: LABEL_MARGIN\n    }, labelPosition === Position.end && {\n      height: DEFAULT_HEIGHT,\n      float: 'right',\n      marginLeft: LABEL_MARGIN\n    }, labelPosition === Position.top && {\n      // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n      // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n      // the SpinButton is displayed with the label on top next to other form fields.\n      // Decrease the wrapper's effective height slightly to compensate.\n      marginBottom: -1\n    }],\n    icon: [{\n      padding: '0 5px',\n      fontSize: IconFontSizes.large\n    }, disabled && {\n      color: SpinButtonIconDisabledColor\n    }],\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large\n    },\n    spinButtonWrapper: [{\n      display: 'flex',\n      position: 'relative',\n      boxSizing: 'border-box',\n      height: DEFAULT_HEIGHT,\n      minWidth: DEFAULT_MIN_WIDTH,\n      selectors: {\n        // setting border using pseudo-element here in order to prevent:\n        // input and chevron buttons to overlap border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: SpinButtonRootBorderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }, (labelPosition === Position.top || labelPosition === Position.bottom) && {\n      width: '100%'\n    }, !disabled && [{\n      selectors: {\n        ':hover': {\n          selectors: (_a = {\n            ':after': {\n              borderColor: SpinButtonRootBorderColorHovered\n            }\n          }, _a[HighContrastSelector] = {\n            selectors: {\n              ':after': {\n                borderColor: 'Highlight'\n              }\n            }\n          }, _a)\n        }\n      }\n    }, isFocused && {\n      selectors: {\n        '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2)\n      }\n    }], disabled && getDisabledStyles(theme)],\n    input: ['ms-spinButton-input', {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      flex: 1,\n      margin: 0,\n      fontSize: fonts.medium.fontSize,\n      fontFamily: 'inherit',\n      color: SpinButtonInputTextColor,\n      backgroundColor: SpinButtonRootBackgroundColor,\n      height: '100%',\n      padding: '0 8px 0 9px',\n      outline: 0,\n      display: 'block',\n      minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text',\n      borderRadius: effects.roundedCorner2 + \" 0 0 \" + effects.roundedCorner2\n    }, !disabled && {\n      selectors: {\n        '::selection': {\n          backgroundColor: SpinButtonInputBackgroundColorSelected,\n          color: SpinButtonInputTextColorSelected,\n          selectors: (_b = {}, _b[HighContrastSelector] = {\n            backgroundColor: 'Highlight',\n            borderColor: 'Highlight',\n            color: 'HighlightText'\n          }, _b)\n        }\n      }\n    }, disabled && getDisabledStyles(theme)],\n    arrowButtonsContainer: [{\n      display: 'block',\n      height: '100%',\n      cursor: 'default'\n    }, disabled && getDisabledStyles(theme)]\n  };\n};","map":{"version":3,"sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IRawStyle,\n  ITheme,\n  concatStyleSets,\n  HighContrastSelector,\n  IconFontSizes,\n  getInputFocusStyle,\n} from '../../Styling';\nimport { IButtonStyles } from '../../Button';\n\nimport { ISpinButtonStyles, ISpinButtonStyleProps } from './SpinButton.types';\nimport { memoizeFunction } from '../../Utilities';\nimport { Position } from '../../Positioning';\n\nconst ARROW_BUTTON_WIDTH = 23;\nconst ARROW_BUTTON_ICON_SIZE = 8;\nconst DEFAULT_HEIGHT = 32;\nconst DEFAULT_MIN_WIDTH = 86;\nconst LABEL_MARGIN = 10;\n\nconst getDisabledStyles = memoizeFunction(\n  (theme: ITheme): IRawStyle => {\n    const { semanticColors } = theme;\n\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n\n    return {\n      backgroundColor: SpinButtonBackgroundColorDisabled,\n      pointerEvents: 'none',\n      cursor: 'default',\n      color: SpinButtonTextColorDisabled,\n      selectors: {\n        ':after': {\n          borderColor: SpinButtonBackgroundColorDisabled,\n        },\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n  },\n);\n\nexport const getArrowButtonStyles = memoizeFunction(\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { palette, semanticColors, effects } = theme;\n\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\n    const ArrowButtonTextColor = palette.neutralSecondary;\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\n\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\n\n    const defaultArrowButtonStyles: IButtonStyles = {\n      root: {\n        outline: 'none',\n        display: 'block',\n        height: '50%',\n        width: ARROW_BUTTON_WIDTH,\n        padding: 0,\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        cursor: 'default',\n        color: ArrowButtonTextColor,\n        selectors: {\n          '&.ms-DownButton': {\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\n          },\n          '&.ms-UpButton': {\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\n          },\n        },\n      },\n      rootHovered: {\n        backgroundColor: ArrowButtonBackgroundHovered,\n        color: ArrowButtonTextColorHovered,\n      },\n      rootChecked: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootPressed: {\n        backgroundColor: ArrowButtonBackgroundPressed,\n        color: ArrowButtonTextColorPressed,\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'Highlight',\n            color: 'HighlightText',\n          },\n        },\n      },\n      rootDisabled: {\n        opacity: 0.5,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            opacity: 1,\n          },\n        },\n      },\n      icon: {\n        fontSize: ARROW_BUTTON_ICON_SIZE,\n        marginTop: 0,\n        marginRight: 0,\n        marginBottom: 0,\n        marginLeft: 0,\n      },\n    };\n\n    // No specific styles needed as of now.\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\n\n    return concatStyleSets(\n      defaultArrowButtonStyles,\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\n      customSpecificArrowStyles,\n    ) as IButtonStyles;\n  },\n);\n\nexport const getStyles = (props: ISpinButtonStyleProps): ISpinButtonStyles => {\n  const { theme, className, labelPosition, disabled, isFocused } = props;\n  const { palette, semanticColors, effects, fonts } = theme;\n  const SpinButtonRootBorderColor = semanticColors.inputBorder;\n  const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\n  const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  const SpinButtonInputTextColor = semanticColors.inputText;\n  const SpinButtonInputTextColorSelected = palette.white;\n  const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\n  const SpinButtonIconDisabledColor = semanticColors.disabledText;\n\n  return {\n    root: [\n      fonts.medium,\n      {\n        outline: 'none',\n        width: '100%',\n        minWidth: DEFAULT_MIN_WIDTH,\n      },\n      className,\n    ],\n\n    labelWrapper: [\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n      },\n      labelPosition === Position.start && {\n        height: DEFAULT_HEIGHT,\n        float: 'left',\n        marginRight: LABEL_MARGIN,\n      },\n      labelPosition === Position.end && {\n        height: DEFAULT_HEIGHT,\n        float: 'right',\n        marginLeft: LABEL_MARGIN,\n      },\n      labelPosition === Position.top && {\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\n        // the SpinButton is displayed with the label on top next to other form fields.\n        // Decrease the wrapper's effective height slightly to compensate.\n        marginBottom: -1,\n      },\n    ],\n\n    icon: [\n      {\n        padding: '0 5px',\n        fontSize: IconFontSizes.large,\n      },\n      disabled && {\n        color: SpinButtonIconDisabledColor,\n      },\n    ],\n\n    label: {\n      pointerEvents: 'none',\n      // centering the label with the icon by forcing the exact same height as the icon.\n      lineHeight: IconFontSizes.large,\n    },\n\n    spinButtonWrapper: [\n      {\n        display: 'flex',\n        position: 'relative',\n        boxSizing: 'border-box',\n        height: DEFAULT_HEIGHT,\n        minWidth: DEFAULT_MIN_WIDTH,\n        selectors: {\n          // setting border using pseudo-element here in order to prevent:\n          // input and chevron buttons to overlap border under certain resolutions\n          ':after': {\n            pointerEvents: 'none',\n            content: \"''\",\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: SpinButtonRootBorderColor,\n            borderRadius: effects.roundedCorner2,\n          },\n        },\n      },\n      (labelPosition === Position.top || labelPosition === Position.bottom) && {\n        width: '100%',\n      },\n      !disabled && [\n        {\n          selectors: {\n            ':hover': {\n              selectors: {\n                ':after': {\n                  borderColor: SpinButtonRootBorderColorHovered,\n                },\n                [HighContrastSelector]: {\n                  selectors: {\n                    ':after': {\n                      borderColor: 'Highlight',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        isFocused && {\n          selectors: {\n            '&&': getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\n          },\n        },\n      ],\n      disabled && getDisabledStyles(theme),\n    ],\n\n    input: [\n      'ms-spinButton-input',\n      {\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        borderStyle: 'none',\n        flex: 1,\n        margin: 0,\n        fontSize: fonts.medium.fontSize,\n        fontFamily: 'inherit',\n        color: SpinButtonInputTextColor,\n        backgroundColor: SpinButtonRootBackgroundColor,\n        height: '100%',\n        padding: '0 8px 0 9px',\n        outline: 0,\n        display: 'block',\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        cursor: 'text',\n        userSelect: 'text',\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\n      },\n      !disabled && {\n        selectors: {\n          '::selection': {\n            backgroundColor: SpinButtonInputBackgroundColorSelected,\n            color: SpinButtonInputTextColorSelected,\n            selectors: {\n              [HighContrastSelector]: {\n                backgroundColor: 'Highlight',\n                borderColor: 'Highlight',\n                color: 'HighlightText',\n              },\n            },\n          },\n        },\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n\n    arrowButtonsContainer: [\n      {\n        display: 'block',\n        height: '100%',\n        cursor: 'default',\n      },\n      disabled && getDisabledStyles(theme),\n    ],\n  };\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}