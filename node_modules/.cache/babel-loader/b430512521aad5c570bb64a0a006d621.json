{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n */\n\nexport var useResponsiveMode = function (elementRef) {\n  var _a = React.useState(getInitialResponsiveMode),\n      lastResponsiveMode = _a[0],\n      setLastResponsiveMode = _a[1];\n\n  var onResize = React.useCallback(function () {\n    var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current)); // Setting the same value should not cause a re-render.\n\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n  var win = useWindow();\n  useOnEvent(win, 'resize', onResize); // Call resize function initially on mount.\n\n  React.useEffect(function () {\n    onResize(); // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount\n  }, []);\n  return lastResponsiveMode;\n};","map":{"version":3,"sources":["utilities/hooks/useResponsiveMode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,QAA0B,qBAA1B;AACA,SAAS,UAAT,QAA2B,uBAA3B;AACA,SAAyB,iBAAzB,EAA4C,wBAA5C,QAA4E,kCAA5E;AACA,SAAS,SAAT,QAA0B,sBAA1B;AAEA;;;AAGG;;AACH,OAAO,IAAM,iBAAiB,GAAG,UAAC,UAAD,EAAgD;AACzE,MAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,wBAAA,CAAA;AAAA,MAAC,kBAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAqB,qBAAA,GAAA,EAAA,CAAA,CAAA,CAArB;;AAEN,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAN,CAAkB,YAAA;AACjC,QAAM,iBAAiB,GAAG,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC,OAAZ,CAAV,CAA3C,CADiC,CAGjC;;AACA,QAAI,kBAAkB,KAAK,iBAA3B,EAA8C;AAC5C,MAAA,qBAAqB,CAAC,iBAAD,CAArB;AACD;AACF,GAPgB,EAOd,CAAC,UAAD,EAAa,kBAAb,CAPc,CAAjB;AASA,MAAM,GAAG,GAAG,SAAS,EAArB;AACA,EAAA,UAAU,CAAC,GAAD,EAAM,QAAN,EAAgB,QAAhB,CAAV,CAb+E,CAe/E;;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,IAAA,QAAQ,GADM,CAEd;AACD,GAHD,EAGG,EAHH;AAKA,SAAO,kBAAP;AACD,CAtBM","sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n */\nexport const useResponsiveMode = (elementRef: React.RefObject<HTMLElement | null>) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode);\n\n  const onResize = React.useCallback(() => {\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', onResize as (ev: Event) => void);\n\n  // Call resize function initially on mount.\n  React.useEffect(() => {\n    onResize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount\n  }, []);\n\n  return lastResponsiveMode;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}