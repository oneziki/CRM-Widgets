{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var ButtonGridBase = React.forwardRef(function (props, forwardedRef) {\n  var id = useId(undefined, props.id);\n  var items = props.items,\n      columnCount = props.columnCount,\n      onRenderItem = props.onRenderItem,\n      // eslint-disable-next-line deprecation/deprecation\n  _a = props.ariaPosInSet,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n      // eslint-disable-next-line deprecation/deprecation\n  _b = props.ariaSetSize,\n      // eslint-disable-next-line deprecation/deprecation\n  ariaSetSize = _b === void 0 ? props.setSize : _b,\n      styles = props.styles,\n      doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n  var htmlProps = getNativeProps(props, htmlElementProperties, // avoid applying onBlur on the table if it's being used in the FocusZone\n  doNotContainWithinFocusZone ? [] : ['onBlur']);\n  var classNames = getClassNames(styles, {\n    theme: props.theme\n  }); // Array to store the cells in the correct row index\n\n  var rowsOfItems = toMatrix(items, columnCount);\n  var content = React.createElement(\"table\", __assign({\n    \"aria-posinset\": ariaPosInSet,\n    \"aria-setsize\": ariaSetSize,\n    id: id,\n    role: \"grid\"\n  }, htmlProps, {\n    className: classNames.root\n  }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n    return React.createElement(\"tr\", {\n      role: 'row',\n      key: rowIndex\n    }, rows.map(function (cell, cellIndex) {\n      return React.createElement(\"td\", {\n        role: \"presentation\",\n        key: cellIndex + '-cell',\n        className: classNames.tableCell\n      }, onRenderItem(cell, cellIndex));\n    }));\n  })));\n  return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n    elementRef: forwardedRef,\n    isCircularNavigation: props.shouldFocusCircularNavigate,\n    className: classNames.focusedContainer,\n    onBlur: props.onBlur\n  }, content);\n});","map":{"version":3,"sources":["utilities/ButtonGrid/ButtonGrid.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,EAAmB,kBAAnB,EAAuC,cAAvC,EAAuD,qBAAvD,QAAoF,iBAApF;AACA,SAAS,SAAT,QAA0B,iBAA1B;AAEA,SAAS,KAAT,QAAsB,uBAAtB;AAEA,IAAM,aAAa,GAAG,kBAAkB,EAAxC;AAEA,OAAO,IAAM,cAAc,GAA8C,KAAK,CAAC,UAAN,CAGvE,UAAC,KAAD,EAAQ,YAAR,EAAoB;AACpB,MAAM,EAAE,GAAG,KAAK,CAAC,SAAD,EAAY,KAAK,CAAC,EAAlB,CAAhB;AAGE,MAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,MACA,WAAA,GAAA,KAAA,CAAA,WADA;AAAA,MAEA,YAAA,GAAA,KAAA,CAAA,YAFA;AAAA,MAGA;AACA,EAAA,EAAA,GAAA,KAAA,CAAA,YAJA;AAAA,MAGA;AACA,EAAA,YAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,aAAA,GAAA,EAJA;AAAA,MAKA;AACA,EAAA,EAAA,GAAA,KAAA,CAAA,WANA;AAAA,MAKA;AACA,EAAA,WAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,OAAA,GAAA,EANA;AAAA,MAOA,MAAA,GAAA,KAAA,CAAA,MAPA;AAAA,MAQA,2BAAA,GAAA,KAAA,CAAA,2BARA;AAWF,MAAM,SAAS,GAAG,cAAc,CAC9B,KAD8B,EAE9B,qBAF8B,EAG9B;AACA,EAAA,2BAA2B,GAAG,EAAH,GAAQ,CAAC,QAAD,CAJL,CAAhC;AAOA,MAAM,UAAU,GAAG,aAAa,CAAC,MAAD,EAAU;AAAE,IAAA,KAAK,EAAE,KAAK,CAAC;AAAf,GAAV,CAAhC,CAtBoB,CAwBpB;;AACA,MAAM,WAAW,GAAY,QAAQ,CAAC,KAAD,EAAQ,WAAR,CAArC;AAEA,MAAM,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAAA,qBACiB,YADjB;AAC6B,oBACb,WAFhB;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,IAAI,EAAC;AAJP,GAAA,EAKM,SALN,EAKe;AACb,IAAA,SAAS,EAAE,UAAU,CAAC;AADT,GALf,CAAA,EAQE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,IAAA,EACG,WAAW,CAAC,GAAZ,CAAgB,UAAC,IAAD,EAAO,QAAP,EAAe;AAC9B,WACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,MAAA,IAAI,EAAE,KAAV;AAAiB,MAAA,GAAG,EAAE;AAAtB,KAAA,EACG,IAAI,CAAC,GAAL,CAAS,UAAC,IAAD,EAAO,SAAP,EAAwB;AAChC,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,QAAA,IAAI,EAAC,cAAT;AAAwB,QAAA,GAAG,EAAE,SAAS,GAAG,OAAzC;AAAkD,QAAA,SAAS,EAAE,UAAU,CAAC;AAAxE,OAAA,EACG,YAAY,CAAC,IAAD,EAAO,SAAP,CADf,CADF;AAKD,KANA,CADH,CADF;AAWD,GAZA,CADH,CARF,CADF;AA2BA,SAAO,2BAA2B,GAChC,OADgC,GAGhC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,IAAA,UAAU,EAAE,YADJ;AAER,IAAA,oBAAoB,EAAE,KAAK,CAAC,2BAFpB;AAGR,IAAA,SAAS,EAAE,UAAU,CAAC,gBAHd;AAIR,IAAA,MAAM,EAAE,KAAK,CAAC;AAJN,GAAV,EAMG,OANH,CAHF;AAYD,CArEwE,CAAlE","sourcesContent":["import * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\nimport { useId } from '@fluentui/react-hooks';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport const ButtonGridBase: React.FunctionComponent<IButtonGridProps> = React.forwardRef<\n  HTMLElement,\n  IButtonGridProps\n>((props, forwardedRef) => {\n  const id = useId(undefined, props.id);\n\n  const {\n    items,\n    columnCount,\n    onRenderItem,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaPosInSet = props.positionInSet,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaSetSize = props.setSize,\n    styles,\n    doNotContainWithinFocusZone,\n  } = props;\n\n  const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n    props,\n    htmlElementProperties,\n    // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur'],\n  );\n\n  const classNames = getClassNames(styles!, { theme: props.theme! });\n\n  // Array to store the cells in the correct row index\n  const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n  const content = (\n    <table\n      aria-posinset={ariaPosInSet}\n      aria-setsize={ariaSetSize}\n      id={id}\n      role=\"grid\"\n      {...htmlProps}\n      className={classNames.root}\n    >\n      <tbody>\n        {rowsOfItems.map((rows, rowIndex) => {\n          return (\n            <tr role={'row'} key={rowIndex}>\n              {rows.map((cell, cellIndex: number) => {\n                return (\n                  <td role=\"presentation\" key={cellIndex + '-cell'} className={classNames.tableCell}>\n                    {onRenderItem(cell, cellIndex)}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n\n  return doNotContainWithinFocusZone ? (\n    content\n  ) : (\n    <FocusZone\n      elementRef={forwardedRef}\n      isCircularNavigation={props.shouldFocusCircularNavigate}\n      className={classNames.focusedContainer}\n      onBlur={props.onBlur}\n    >\n      {content}\n    </FocusZone>\n  );\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}