{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, shallowCompare, getNativeProps, divProperties } from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar NO_COLUMNS = [];\n\nvar DetailsRowBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsRowBase, _super);\n\n  function DetailsRowBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._cellMeasurer = React.createRef();\n    _this._focusZone = React.createRef();\n\n    _this._onSelectionChanged = function () {\n      var selectionState = getSelectionState(_this.props);\n\n      if (!shallowCompare(selectionState, _this.state.selectionState)) {\n        _this.setState({\n          selectionState: selectionState\n        });\n      }\n    };\n    /**\n     * update isDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * when change to true, that means drag enter. we will add default dropping class name\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n     *\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\n     *\n     * @param newValue - New isDropping state value\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n     */\n\n\n    _this._updateDroppingState = function (newValue, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n          dragDropEvents = _a.dragDropEvents,\n          item = _a.item;\n\n      if (!newValue) {\n        if (dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(item, event);\n        }\n      } else if (dragDropEvents.onDragEnter) {\n        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n\n      if (isDropping !== newValue) {\n        _this.setState({\n          isDropping: newValue\n        });\n      }\n    };\n\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false\n    };\n    _this._droppingClassNames = '';\n    return _this;\n  }\n\n  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return __assign(__assign({}, previousState), {\n      selectionState: getSelectionState(nextProps)\n    });\n  };\n\n  DetailsRowBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        dragDropHelper = _a.dragDropHelper,\n        selection = _a.selection,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n    var state = this.state;\n    var _a = this.props,\n        item = _a.item,\n        onDidMount = _a.onDidMount;\n    var columnMeasureInfo = state.columnMeasureInfo;\n\n    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n\n  DetailsRowBase.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n        item = _a.item,\n        onWillUnmount = _a.onWillUnmount; // Only call the onWillUnmount callback if we have an item.\n\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  };\n\n  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (this.props.useReducedRowRenderer) {\n      var newSelectionState = getSelectionState(nextProps);\n\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  };\n\n  DetailsRowBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        dragDropEvents = _a.dragDropEvents,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        id = _a.id,\n        _c = _a.flatIndexOffset,\n        flatIndexOffset = _c === void 0 ? 2 : _c,\n        _d = _a.onRenderCheck,\n        onRenderCheck = _d === void 0 ? this._onRenderCheck : _d,\n        onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n        onRenderItemColumn = _a.onRenderItemColumn,\n        getCellValueKey = _a.getCellValueKey,\n        selectionMode = _a.selectionMode,\n        _e = _a.rowWidth,\n        rowWidth = _e === void 0 ? 0 : _e,\n        checkboxVisibility = _a.checkboxVisibility,\n        getRowAriaLabel = _a.getRowAriaLabel,\n        getRowAriaDescribedBy = _a.getRowAriaDescribedBy,\n        checkButtonAriaLabel = _a.checkButtonAriaLabel,\n        checkboxCellClassName = _a.checkboxCellClassName,\n\n    /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n    _f = _a.rowFieldsAs,\n\n    /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n    RowFields = _f === void 0 ? DetailsRowFields : _f,\n        selection = _a.selection,\n        indentWidth = _a.indentWidth,\n        enableUpdateAnimations = _a.enableUpdateAnimations,\n        compact = _a.compact,\n        theme = _a.theme,\n        styles = _a.styles,\n        cellsByColumn = _a.cellsByColumn,\n        groupNestingDepth = _a.groupNestingDepth,\n        _g = _a.useFastIcons,\n        useFastIcons = _g === void 0 ? true : _g,\n        cellStyleProps = _a.cellStyleProps,\n        group = _a.group;\n    var _h = this.state,\n        columnMeasureInfo = _h.columnMeasureInfo,\n        isDropping = _h.isDropping;\n    var _j = this.state.selectionState,\n        _k = _j.isSelected,\n        isSelected = _k === void 0 ? false : _k,\n        _l = _j.isSelectionModal,\n        isSelectionModal = _l === void 0 ? false : _l;\n    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    var canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    var isContentUnselectable = selectionMode === SelectionMode.multiple;\n    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    var ariaSetSize = group ? group.count : undefined;\n    this._classNames = __assign(__assign({}, this._classNames), getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelected,\n      canSelect: !isContentUnselectable,\n      anySelected: isSelectionModal,\n      checkboxCellClassName: checkboxCellClassName,\n      droppingClassName: droppingClassName,\n      className: className,\n      compact: compact,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    }));\n    var rowClassNames = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields\n    }; // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    var rowFields = React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      cellsByColumn: cellsByColumn,\n      columns: columns,\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    });\n    var defaultRole = 'row';\n    var role = this.props.role ? this.props.role : defaultRole;\n    return React.createElement(FocusZone, __assign({\n      \"data-is-focusable\": true\n    }, getNativeProps(this.props, divProperties), typeof isDraggable === 'boolean' ? {\n      'data-is-draggable': isDraggable,\n      draggable: isDraggable\n    } : {}, {\n      direction: FocusZoneDirection.horizontal,\n      elementRef: this._root,\n      componentRef: this._focusZone,\n      role: role,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedBy,\n      className: this._classNames.root,\n      \"data-selection-index\": itemIndex,\n      \"data-selection-touch-invoke\": true,\n      \"data-item-index\": itemIndex,\n      \"aria-rowindex\": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined,\n      \"aria-level\": groupNestingDepth && groupNestingDepth + 1 || undefined,\n      \"aria-posinset\": ariaPositionInSet,\n      \"aria-setsize\": ariaSetSize,\n      \"data-automationid\": \"DetailsRow\",\n      style: {\n        minWidth: rowWidth\n      },\n      \"aria-selected\": ariaSelected,\n      allowFocusRoot: true\n    }), showCheckbox && React.createElement(\"div\", {\n      role: \"gridcell\",\n      \"aria-colindex\": 1,\n      \"data-selection-toggle\": true,\n      className: this._classNames.checkCell\n    }, onRenderCheck({\n      id: id ? id + \"-checkbox\" : undefined,\n      selected: isSelected,\n      anySelected: isSelectionModal,\n      'aria-label': checkButtonAriaLabel,\n      'aria-labelledby': id ? id + \"-checkbox \" + id + \"-header\" : undefined,\n      canSelect: canSelect,\n      compact: compact,\n      className: this._classNames.check,\n      theme: theme,\n      isVisible: checkboxVisibility === CheckboxVisibility.always,\n      onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n      useFastIcons: useFastIcons\n    })), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)\n    }), item && rowFields, columnMeasureInfo && React.createElement(\"span\", {\n      role: \"presentation\",\n      className: css(this._classNames.cellMeasurer, this._classNames.cell),\n      ref: this._cellMeasurer\n    }, React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: id + \"-header\",\n      columns: [columnMeasureInfo.column],\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey\n    })), React.createElement(\"span\", {\n      role: \"checkbox\",\n      className: this._classNames.checkCover,\n      \"aria-checked\": isSelected,\n      \"data-selection-toggle\": true\n    }));\n  };\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n\n\n  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n\n    var column = __assign({}, columns[index]);\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n    delete column.calculatedWidth;\n    this.setState({\n      columnMeasureInfo: {\n        index: index,\n        column: column,\n        onMeasureDone: onMeasureDone\n      }\n    });\n  };\n\n  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n    var _a;\n\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n  };\n\n  DetailsRowBase.prototype._onRenderCheck = function (props) {\n    return React.createElement(DetailsRowCheck, __assign({}, props));\n  };\n\n  DetailsRowBase.prototype._getRowDragDropOptions = function () {\n    var _a = this.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex,\n        dragDropEvents = _a.dragDropEvents,\n        eventsToRegister = _a.eventsToRegister;\n    var options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: {\n        data: item,\n        index: itemIndex\n      },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents.onDrop,\n      onDragEnd: dragDropEvents.onDragEnd,\n      onDragOver: dragDropEvents.onDragOver\n    };\n    return options;\n  };\n\n  return DetailsRowBase;\n}(React.Component);\n\nexport { DetailsRowBase };\n\nfunction getSelectionState(props) {\n  var _a;\n\n  var itemIndex = props.itemIndex,\n      selection = props.selection;\n  return {\n    isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),\n    isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection))\n  };\n}","map":{"version":3,"sources":["components/DetailsList/DetailsRow.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from '../../DragDrop';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}