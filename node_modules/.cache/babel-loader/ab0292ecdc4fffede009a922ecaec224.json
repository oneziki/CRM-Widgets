{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\nexport var ToggleBase = React.forwardRef(function (props, forwardedRef) {\n  var _a = props.as,\n      RootType = _a === void 0 ? 'div' : _a,\n      ariaLabel = props.ariaLabel,\n      controlledChecked = props.checked,\n      className = props.className,\n      _b = props.defaultChecked,\n      defaultChecked = _b === void 0 ? false : _b,\n      disabled = props.disabled,\n      inlineLabel = props.inlineLabel,\n      label = props.label,\n      // eslint-disable-next-line deprecation/deprecation\n  offAriaLabel = props.offAriaLabel,\n      offText = props.offText,\n      // eslint-disable-next-line deprecation/deprecation\n  onAriaLabel = props.onAriaLabel,\n      onChange = props.onChange,\n      // eslint-disable-next-line deprecation/deprecation\n  onChanged = props.onChanged,\n      onToggleClick = props.onClick,\n      onText = props.onText,\n      role = props.role,\n      styles = props.styles,\n      theme = props.theme;\n\n  var _c = useControllableValue(controlledChecked, defaultChecked, React.useCallback(function (ev, isChecked) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, isChecked);\n    onChanged === null || onChanged === void 0 ? void 0 : onChanged(isChecked);\n  }, [onChange, onChanged])),\n      checked = _c[0],\n      setChecked = _c[1];\n\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    checked: checked,\n    inlineLabel: inlineLabel,\n    onOffMissing: !onText && !offText\n  });\n  var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n  var id = useId(COMPONENT_NAME, props.id);\n  var labelId = id + \"-label\";\n  var stateTextId = id + \"-stateText\";\n  var stateText = checked ? onText : offText;\n  var toggleNativeProps = getNativeProps(props, inputProperties, ['defaultChecked']); // The following properties take priority for what Narrator should read:\n  // 1. ariaLabel\n  // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n  // 3. label AND stateText, if existent\n\n  var labelledById = undefined;\n\n  if (!ariaLabel && !badAriaLabel) {\n    if (label) {\n      labelledById = labelId;\n    }\n\n    if (stateText) {\n      labelledById = labelledById ? labelledById + \" \" + stateTextId : stateTextId;\n    }\n  }\n\n  var toggleButton = React.useRef(null);\n  useFocusRects(toggleButton);\n  useComponentRef(props, checked, toggleButton);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        offAriaLabel: undefined,\n        onAriaLabel: 'ariaLabel',\n        onChanged: 'onChange'\n      },\n      mutuallyExclusive: {\n        checked: 'defaultChecked'\n      }\n    });\n  }\n\n  var onClick = function (ev) {\n    if (!disabled) {\n      setChecked(!checked, ev);\n\n      if (onToggleClick) {\n        onToggleClick(ev);\n      }\n    }\n  };\n\n  var slotProps = {\n    root: {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    },\n    label: {\n      children: label,\n      className: classNames.label,\n      htmlFor: id,\n      id: labelId\n    },\n    container: {\n      className: classNames.container\n    },\n    pill: __assign(__assign({}, toggleNativeProps), {\n      'aria-disabled': disabled,\n      'aria-checked': checked,\n      'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n      'aria-labelledby': labelledById,\n      className: classNames.pill,\n      'data-is-focusable': true,\n      'data-ktp-target': true,\n      disabled: disabled,\n      id: id,\n      onClick: onClick,\n      ref: toggleButton,\n      role: role ? role : 'switch',\n      type: 'button'\n    }),\n    thumb: {\n      className: classNames.thumb\n    },\n    stateText: {\n      children: stateText,\n      className: classNames.text,\n      htmlFor: id,\n      id: stateTextId\n    }\n  };\n  return React.createElement(RootType, __assign({\n    ref: forwardedRef\n  }, slotProps.root), label && React.createElement(Label, __assign({}, slotProps.label)), React.createElement(\"div\", __assign({}, slotProps.container), React.createElement(\"button\", __assign({}, slotProps.pill), React.createElement(\"span\", __assign({}, slotProps.thumb))), (checked && onText || offText) && React.createElement(Label, __assign({}, slotProps.stateText))));\n});\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nvar useComponentRef = function (props, isChecked, toggleButtonRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n\n      focus: function () {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      }\n    };\n  }, [isChecked, toggleButtonRef]);\n};","map":{"version":3,"sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label AND stateText, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText) {\n        labelledById = labelledById ? `${labelledById} ${stateTextId}` : stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled: disabled,\n        id: id,\n        onClick: onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}